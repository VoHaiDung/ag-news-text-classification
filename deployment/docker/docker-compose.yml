# Docker Compose configuration for AG News Text Classification
# ================================================================================
# Development environment orchestration with all services
# Includes hot-reloading, debugging support, and local volumes
#
# Services architecture:
#   - API Gateway (Nginx)
#   - REST API
#   - gRPC Server
#   - GraphQL Server
#   - Core Services (Training, Prediction, Data, Model)
#   - Supporting Services (Cache, Queue, Database, Monitoring)
#
# References:
#   - Docker Compose Best Practices: https://docs.docker.com/compose/production/
#   - Compose Specification: https://docs.docker.com/compose/compose-file/
#
# Author: Võ Hải Dũng
# License: MIT

version: '3.9'

x-common-variables: &common-variables
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  LOG_LEVEL: DEBUG
  ENVIRONMENT: development
  REDIS_URL: redis://redis:6379/0
  DATABASE_URL: postgresql://postgres:postgres@postgres:5432/agnews
  ELASTICSEARCH_URL: http://elasticsearch:9200
  MLFLOW_TRACKING_URI: http://mlflow:5000

x-common-volumes: &common-volumes
  - ./src:/app/src:cached
  - ./configs:/app/configs:ro
  - ./scripts:/app/scripts:ro
  - ./data:/app/data:cached
  - ./models:/app/models:cached
  - ./outputs:/app/outputs:cached
  - ./logs:/app/logs:cached

services:
  # API Gateway
  nginx:
    image: nginx:alpine
    container_name: agnews-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/api.conf:/etc/nginx/conf.d/api.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
    depends_on:
      - rest-api
      - grpc-server
      - graphql-server
    networks:
      - agnews-network
    restart: unless-stopped

  # REST API Service
  rest-api:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.api
      target: development
    container_name: agnews-rest-api
    environment:
      <<: *common-variables
      SERVICE_NAME: rest-api
      API_PORT: 8000
    ports:
      - "8000:8000"
    volumes: *common-volumes
    depends_on:
      - redis
      - postgres
    networks:
      - agnews-network
    restart: unless-stopped
    command: ["uvicorn", "src.api.rest.app:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # gRPC Server
  grpc-server:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.api
      target: development
    container_name: agnews-grpc-server
    environment:
      <<: *common-variables
      SERVICE_NAME: grpc-server
      GRPC_PORT: 50051
    ports:
      - "50051:50051"
    volumes: *common-volumes
    depends_on:
      - redis
      - postgres
    networks:
      - agnews-network
    restart: unless-stopped
    command: ["python", "src/api/grpc/server.py"]

  # GraphQL Server
  graphql-server:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.api
      target: development
    container_name: agnews-graphql-server
    environment:
      <<: *common-variables
      SERVICE_NAME: graphql-server
      GRAPHQL_PORT: 4000
    ports:
      - "4000:4000"
    volumes: *common-volumes
    depends_on:
      - redis
      - postgres
    networks:
      - agnews-network
    restart: unless-stopped
    command: ["python", "src/api/graphql/server.py"]

  # Training Service
  training-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: training-service
    container_name: agnews-training-service
    environment:
      <<: *common-variables
      SERVICE_NAME: training-service
      SERVICE_PORT: 8001
    ports:
      - "8001:8001"
    volumes: *common-volumes
    depends_on:
      - redis
      - postgres
      - mlflow
    networks:
      - agnews-network
    restart: unless-stopped

  # Prediction Service
  prediction-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: prediction-service
    container_name: agnews-prediction-service
    environment:
      <<: *common-variables
      SERVICE_NAME: prediction-service
      SERVICE_PORT: 8002
    ports:
      - "8002:8002"
    volumes: *common-volumes
    depends_on:
      - redis
      - model-service
    networks:
      - agnews-network
    restart: unless-stopped

  # Data Service
  data-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: data-service
    container_name: agnews-data-service
    environment:
      <<: *common-variables
      SERVICE_NAME: data-service
      SERVICE_PORT: 8003
    ports:
      - "8003:8003"
    volumes: *common-volumes
    depends_on:
      - postgres
      - elasticsearch
    networks:
      - agnews-network
    restart: unless-stopped

  # Model Management Service
  model-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: model-service
    container_name: agnews-model-service
    environment:
      <<: *common-variables
      SERVICE_NAME: model-service
      SERVICE_PORT: 8004
    ports:
      - "8004:8004"
    volumes: *common-volumes
    depends_on:
      - postgres
      - mlflow
    networks:
      - agnews-network
    restart: unless-stopped

  # Monitoring Service
  monitoring-service:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: monitoring-service
    container_name: agnews-monitoring-service
    environment:
      <<: *common-variables
      SERVICE_NAME: monitoring-service
      SERVICE_PORT: 8005
      METRICS_PORT: 9090
    ports:
      - "8005:8005"
      - "9090:9090"
    volumes: *common-volumes
    depends_on:
      - prometheus
      - grafana
    networks:
      - agnews-network
    restart: unless-stopped

  # Queue Worker
  celery-worker:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: queue-worker
    container_name: agnews-celery-worker
    environment:
      <<: *common-variables
      SERVICE_NAME: celery-worker
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    volumes: *common-volumes
    depends_on:
      - redis
      - rabbitmq
    networks:
      - agnews-network
    restart: unless-stopped
    scale: 2

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile.services
      target: queue-worker
    container_name: agnews-celery-beat
    environment:
      <<: *common-variables
      SERVICE_NAME: celery-beat
      CELERY_BROKER_URL: redis://redis:6379/1
    volumes: *common-volumes
    depends_on:
      - redis
    networks:
      - agnews-network
    restart: unless-stopped
    command: ["celery", "-A", "src.services.queue.celery_tasks", "beat", "--loglevel=info"]

  # Flower - Celery Monitoring
  flower:
    image: mher/flower:latest
    container_name: agnews-flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      FLOWER_PORT: 5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - agnews-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agnews-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - agnews-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agnews-postgres
    environment:
      POSTGRES_DB: agnews
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./deployment/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - agnews-network
    restart: unless-stopped

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: agnews-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - agnews-network
    restart: unless-stopped

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: agnews-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - agnews-network
    restart: unless-stopped

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: agnews-mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: postgresql://postgres:postgres@postgres:5432/mlflow
      MLFLOW_ARTIFACT_STORE_URI: /mlflow/artifacts
    ports:
      - "5000:5000"
    volumes:
      - mlflow-data:/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - agnews-network
    restart: unless-stopped
    command: ["mlflow", "server", "--host", "0.0.0.0", "--port", "5000"]

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: agnews-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - agnews-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: agnews-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - agnews-network
    restart: unless-stopped

  # Jupyter Development Environment
  jupyter:
    build:
      context: .
      dockerfile: deployment/docker/Dockerfile
      target: training
    container_name: agnews-jupyter
    environment:
      <<: *common-variables
      JUPYTER_ENABLE_LAB: "yes"
    ports:
      - "8888:8888"
    volumes: *common-volumes
    networks:
      - agnews-network
    restart: unless-stopped
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token=''"]

networks:
  agnews-network:
    driver: bridge
    name: agnews-network

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  elasticsearch-data:
    driver: local
  rabbitmq-data:
    driver: local
  mlflow-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
