# Services Dockerfile for AG News Text Classification
# ================================================================================
# Specialized Dockerfile for microservices architecture
# Builds lightweight service containers with specific responsibilities
#
# Services included:
#   - Training service
#   - Prediction service
#   - Data service
#   - Model management service
#   - Monitoring service
#   - Queue workers
#
# References:
#   - Microservices Best Practices: https://microservices.io/
#   - Container Patterns: https://kubernetes.io/blog/2016/06/container-design-patterns/
#
# Author: Võ Hải Dũng
# License: MIT

ARG PYTHON_VERSION=3.9

# Base stage for all services
FROM python:${PYTHON_VERSION}-slim AS service-base

# Environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    SERVICE_NAME=base

# Install common system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    wget \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create service user
RUN groupadd -r service && useradd -r -g service service

# Create common directories
RUN mkdir -p /app /app/logs /app/cache && \
    chown -R service:service /app

WORKDIR /app

# Install Python dependencies
COPY requirements/base.txt requirements/services.txt* /tmp/
RUN pip install --upgrade pip && \
    pip install -r /tmp/base.txt && \
    (test -f /tmp/services.txt && pip install -r /tmp/services.txt || true)

# Stage: Training Service
FROM service-base AS training-service

ENV SERVICE_NAME=training-service

# Install training-specific dependencies with compatible versions
RUN pip install \
    torch==2.0.1+cpu \
    -f https://download.pytorch.org/whl/torch_stable.html && \
    pip install \
    transformers==4.35.0 \
    tokenizers==0.14.1 \
    accelerate==0.24.0 \
    numpy==1.24.0 \
    pyyaml==6.0.1

# Copy service code
COPY src/services/core/training_service.py /app/src/services/core/
COPY src/services/base_service.py /app/src/services/
COPY src/services/service_registry.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/training/ /app/src/training/
COPY src/models/ /app/src/models/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Switch to service user
USER service

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8001/health || exit 1

# Expose service port
EXPOSE 8001

# Run training service
CMD ["python", "-m", "src.services.core.training_service"]

# Stage: Prediction Service
FROM service-base AS prediction-service

ENV SERVICE_NAME=prediction-service

# Install inference dependencies with compatible versions
RUN pip install \
    torch==2.0.1+cpu \
    -f https://download.pytorch.org/whl/torch_stable.html && \
    pip install \
    transformers==4.35.0 \
    tokenizers==0.14.1 \
    onnxruntime==1.16.0 \
    numpy==1.24.0

# Copy service code
COPY src/services/core/prediction_service.py /app/src/services/core/
COPY src/services/base_service.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/services/caching/ /app/src/services/caching/
COPY src/inference/ /app/src/inference/
COPY src/models/ /app/src/models/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Switch to service user
USER service

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Expose service port
EXPOSE 8002

# Run prediction service
CMD ["python", "-m", "src.services.core.prediction_service"]

# Stage: Data Service
FROM service-base AS data-service

ENV SERVICE_NAME=data-service

# Install data processing dependencies
RUN pip install \
    pandas==2.0.0 \
    numpy==1.24.0 \
    pyarrow==14.0.0 \
    datasets==2.14.0 \
    tokenizers==0.14.1

# Copy service code
COPY src/services/core/data_service.py /app/src/services/core/
COPY src/services/base_service.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/services/storage/ /app/src/services/storage/
COPY src/data/ /app/src/data/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Create data directories
RUN mkdir -p /app/data/raw /app/data/processed /app/data/cache && \
    chown -R service:service /app/data

# Switch to service user
USER service

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8003/health || exit 1

# Expose service port
EXPOSE 8003

# Run data service
CMD ["python", "-m", "src.services.core.data_service"]

# Stage: Model Management Service
FROM service-base AS model-service

ENV SERVICE_NAME=model-service

# Install model management dependencies
RUN pip install \
    mlflow==2.8.0 \
    boto3==1.29.0 \
    azure-storage-blob==12.19.0 \
    google-cloud-storage==2.10.0 || echo "Some cloud storage packages are optional"

# Copy service code
COPY src/services/core/model_management_service.py /app/src/services/core/
COPY src/services/base_service.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/services/storage/ /app/src/services/storage/
COPY src/models/ /app/src/models/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Create model directories
RUN mkdir -p /app/models /app/model_registry && \
    chown -R service:service /app/models /app/model_registry

# Switch to service user
USER service

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8004/health || exit 1

# Expose service port
EXPOSE 8004

# Run model management service
CMD ["python", "-m", "src.services.core.model_management_service"]

# Stage: Monitoring Service
FROM service-base AS monitoring-service

ENV SERVICE_NAME=monitoring-service

# Install monitoring dependencies
RUN pip install \
    prometheus-client==0.18.0 \
    grafana-api==1.0.3 \
    datadog==0.47.0 \
    statsd==4.0.1

# Copy service code
COPY src/services/monitoring/ /app/src/services/monitoring/
COPY src/services/base_service.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Switch to service user
USER service

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8005/health || exit 1

# Expose service and metrics ports
EXPOSE 8005 9090

# Run monitoring service
CMD ["python", "-m", "src.services.monitoring.metrics_service"]

# Stage: Queue Worker
FROM service-base AS queue-worker

ENV SERVICE_NAME=queue-worker

# Install queue dependencies
RUN pip install \
    celery==5.3.0 \
    redis==5.0.0 \
    kombu==5.3.0

# Copy worker code
COPY src/services/queue/ /app/src/services/queue/
COPY src/services/core/ /app/src/services/core/
COPY src/services/base_service.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/training/ /app/src/training/
COPY src/inference/ /app/src/inference/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Switch to service user
USER service

# Run Celery worker
CMD ["celery", "-A", "src.services.queue.celery_tasks", "worker", "--loglevel=info", "--concurrency=4"]

# Stage: Orchestration Service
FROM service-base AS orchestration-service

ENV SERVICE_NAME=orchestration-service

# Install orchestration dependencies
RUN pip install \
    prefect==2.14.0 \
    dagster==1.5.0 || echo "Some orchestration packages are optional"

# Copy orchestration code
COPY src/services/orchestration/ /app/src/services/orchestration/
COPY src/services/base_service.py /app/src/services/
COPY src/services/__init__.py /app/src/services/
COPY src/core/ /app/src/core/
COPY src/utils/ /app/src/utils/
COPY configs/ /app/configs/

# Set Python path
ENV PYTHONPATH=/app:${PYTHONPATH:-}

# Switch to service user
USER service

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8006/health || exit 1

# Expose service port
EXPOSE 8006

# Run orchestration service
CMD ["python", "-m", "src.services.orchestration.workflow_orchestrator"]
