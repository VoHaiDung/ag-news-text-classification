# Kubernetes Services Deployment Configuration for AG News
# ================================================================================
# This configuration defines deployments for supporting services including
# databases, caches, message queues, and monitoring infrastructure.
#
# Services included:
#   - PostgreSQL database
#   - Redis cache
#   - Elasticsearch
#   - RabbitMQ message broker
#   - MLflow tracking server
#   - Prometheus and Grafana
#
# References:
#   - StatefulSets: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
#   - Persistent Volumes: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
#   - Database on Kubernetes: https://kubernetes.io/blog/2017/02/postgresql-clusters-kubernetes-statefulsets/
#
# Author: Võ Hải Dũng
# License: MIT

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: agnews-production
  labels:
    app: agnews
    component: postgres
    tier: database
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: postgres
  template:
    metadata:
      labels:
        app: agnews
        component: postgres
        tier: database
    spec:
      securityContext:
        fsGroup: 999
        
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
          
        env:
        - name: POSTGRES_DB
          value: "agnews"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --data-checksums"
          
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
            
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
          
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: agnews
        component: postgres
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: agnews-production
  labels:
    app: agnews
    component: redis
    tier: cache
spec:
  serviceName: redis-headless
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: redis
  template:
    metadata:
      labels:
        app: agnews
        component: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
          
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
            
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          
