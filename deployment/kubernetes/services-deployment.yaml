# Kubernetes Services Deployment Configuration for AG News
# ================================================================================
# This configuration defines deployments for supporting services including
# databases, caches, message queues, and monitoring infrastructure.
#
# Services included:
#   - PostgreSQL database
#   - Redis cache
#   - Elasticsearch
#   - RabbitMQ message broker
#   - MLflow tracking server
#   - Prometheus and Grafana
#
# References:
#   - StatefulSets: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
#   - Persistent Volumes: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
#   - Database on Kubernetes: https://kubernetes.io/blog/2017/02/postgresql-clusters-kubernetes-statefulsets/
#
# Author: Võ Hải Dũng
# License: MIT

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: agnews-production
  labels:
    app: agnews
    component: postgres
    tier: database
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: postgres
  template:
    metadata:
      labels:
        app: agnews
        component: postgres
        tier: database
    spec:
      securityContext:
        fsGroup: 999
        
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
          
        env:
        - name: POSTGRES_DB
          value: "agnews"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --data-checksums"
          
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
            
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
            - -d
            - $(POSTGRES_DB)
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
          
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        app: agnews
        component: postgres
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 50Gi

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: agnews-production
  labels:
    app: agnews
    component: redis
    tier: cache
spec:
  serviceName: redis-headless
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: redis
  template:
    metadata:
      labels:
        app: agnews
        component: redis
        tier: cache
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        
        command:
        - redis-server
        - /usr/local/etc/redis/redis.conf
        
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
          
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
            
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /usr/local/etc/redis
          
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
          
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app: agnews
        component: redis
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: standard
      resources:
        requests:
          storage: 10Gi

---
# Elasticsearch StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: agnews-production
  labels:
    app: agnews
    component: elasticsearch
    tier: search
spec:
  serviceName: elasticsearch-headless
  replicas: 3
  selector:
    matchLabels:
      app: agnews
      component: elasticsearch
  template:
    metadata:
      labels:
        app: agnews
        component: elasticsearch
        tier: search
    spec:
      securityContext:
        fsGroup: 1000
        
      initContainers:
      - name: increase-vm-max-map
        image: busybox
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
          
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
        imagePullPolicy: IfNotPresent
        
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP
          
        env:
        - name: cluster.name
          value: "agnews-cluster"
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "elasticsearch-headless"
        - name: cluster.initial_master_nodes
          value: "elasticsearch-0,elasticsearch-1,elasticsearch-2"
        - name: ES_JAVA_OPTS
          value: "-Xms1g -Xmx1g"
        - name: xpack.security.enabled
          value: "false"
        - name: xpack.monitoring.enabled
          value: "true"
          
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
          limits:
            memory: "3Gi"
            cpu: "2"
            
        livenessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 90
          periodSeconds: 30
          
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 30
          periodSeconds: 10
          
        volumeMounts:
        - name: elasticsearch-data
          mountPath: /usr/share/elasticsearch/data
          
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-data
      labels:
        app: agnews
        component: elasticsearch
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 100Gi

---
# MLflow Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: agnews-production
  labels:
    app: agnews
    component: mlflow
    tier: tracking
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: mlflow
  template:
    metadata:
      labels:
        app: agnews
        component: mlflow
        tier: tracking
    spec:
      containers:
      - name: mlflow
        image: ghcr.io/mlflow/mlflow:2.8.0
        imagePullPolicy: IfNotPresent
        
        command:
        - mlflow
        - server
        - --host=0.0.0.0
        - --port=5000
        - --backend-store-uri=$(DATABASE_URL)
        - --default-artifact-root=s3://agnews-mlflow-artifacts
        - --serve-artifacts
        
        ports:
        - containerPort: 5000
          name: http
          protocol: TCP
          
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: database-url
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mlflow-secret
              key: aws-secret-access-key
        - name: MLFLOW_S3_ENDPOINT_URL
          value: "https://s3.us-west-2.amazonaws.com"
          
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
            
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 30
          
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 15
          periodSeconds: 10
          
        volumeMounts:
        - name: mlflow-config
          mountPath: /app/configs
          
      volumes:
      - name: mlflow-config
        configMap:
          name: mlflow-config

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: agnews-monitoring
  labels:
    app: agnews
    component: prometheus
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: prometheus
  template:
    metadata:
      labels:
        app: agnews
        component: prometheus
        tier: monitoring
    spec:
      serviceAccountName: prometheus
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: IfNotPresent
        
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --storage.tsdb.retention.time=30d
        - --web.enable-lifecycle
        - --web.enable-admin-api
        
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
          
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
            
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
          
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: agnews-monitoring
  labels:
    app: agnews
    component: grafana
    tier: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: agnews
      component: grafana
  template:
    metadata:
      labels:
        app: agnews
        component: grafana
        tier: monitoring
    spec:
      securityContext:
        fsGroup: 472
        
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        imagePullPolicy: IfNotPresent
        
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
          
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_INSTALL_PLUGINS
          value: "redis-datasource,cloudwatch,prometheus"
          
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
            
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
          
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
