"""
Generated gRPC service code for Monitoring Service
================================================================================
This file is automatically generated by the gRPC tools.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/monitoring.proto

Implements the gRPC service interface for monitoring and metrics operations.
"""

import grpc
from typing import Iterator

from . import monitoring_pb2 as monitoring__pb2


class MonitoringServiceStub(object):
    """
    Monitoring Service Stub
    
    Client stub for accessing monitoring service methods.
    Provides operations for metrics collection, querying, and alerting.
    """
    
    def __init__(self, channel: grpc.Channel):
        """
        Initialize the stub with a gRPC channel
        
        Args:
            channel: grpc.Channel instance for communication
        """
        self.RecordMetrics = channel.unary_unary(
            '/agnews.monitoring.v1.MonitoringService/RecordMetrics',
            request_serializer=monitoring__pb2.RecordMetricsRequest.SerializeToString,
            response_deserializer=monitoring__pb2.RecordMetricsResponse.FromString,
        )
        
        self.RecordMetricsBatch = channel.stream_unary(
            '/agnews.monitoring.v1.MonitoringService/RecordMetricsBatch',
            request_serializer=monitoring__pb2.MetricBatch.SerializeToString,
            response_deserializer=monitoring__pb2.RecordMetricsResponse.FromString,
        )
        
        self.QueryMetrics = channel.unary_unary(
            '/agnews.monitoring.v1.MonitoringService/QueryMetrics',
            request_serializer=monitoring__pb2.QueryMetricsRequest.SerializeToString,
            response_deserializer=monitoring__pb2.QueryMetricsResponse.FromString,
        )
        
        self.StreamMetrics = channel.unary_stream(
            '/agnews.monitoring.v1.MonitoringService/StreamMetrics',
            request_serializer=monitoring__pb2.QueryMetricsRequest.SerializeToString,
            response_deserializer=monitoring__pb2.Metric.FromString,
        )
        
        self.GetSystemStatus = channel.unary_unary(
            '/agnews.monitoring.v1.MonitoringService/GetSystemStatus',
            request_serializer=monitoring__pb2.GetSystemStatusRequest.SerializeToString,
            response_deserializer=monitoring__pb2.GetSystemStatusResponse.FromString,
        )
        
        self.CreateAlert = channel.unary_unary(
            '/agnews.monitoring.v1.MonitoringService/CreateAlert',
            request_serializer=monitoring__pb2.CreateAlertRequest.SerializeToString,
            response_deserializer=monitoring__pb2.CreateAlertResponse.FromString,
        )
        
        self.StreamAlerts = channel.unary_stream(
            '/agnews.monitoring.v1.MonitoringService/StreamAlerts',
            request_serializer=monitoring__pb2.GetAlertsRequest.SerializeToString,
            response_deserializer=monitoring__pb2.Alert.FromString,
        )


class MonitoringServiceServicer(object):
    """
    Monitoring Service Interface
    
    Abstract base class for monitoring service implementation.
    Defines the service methods that must be implemented by the server.
    """
    
    def RecordMetrics(self, request: monitoring__pb2.RecordMetricsRequest,
                      context: grpc.ServicerContext) -> monitoring__pb2.RecordMetricsResponse:
        """
        Record metrics
        
        Args:
            request: RecordMetricsRequest message
            context: grpc.ServicerContext
            
        Returns:
            RecordMetricsResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def RecordMetricsBatch(self, request_iterator: Iterator[monitoring__pb2.MetricBatch],
                           context: grpc.ServicerContext) -> monitoring__pb2.RecordMetricsResponse:
        """
        Record metrics in batch (streaming)
        
        Args:
            request_iterator: Iterator of MetricBatch messages
            context: grpc.ServicerContext
            
        Returns:
            RecordMetricsResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def QueryMetrics(self, request: monitoring__pb2.QueryMetricsRequest,
                     context: grpc.ServicerContext) -> monitoring__pb2.QueryMetricsResponse:
        """
        Query metrics
        
        Args:
            request: QueryMetricsRequest message
            context: grpc.ServicerContext
            
        Returns:
            QueryMetricsResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def StreamMetrics(self, request: monitoring__pb2.QueryMetricsRequest,
                      context: grpc.ServicerContext) -> Iterator[monitoring__pb2.Metric]:
        """
        Stream metrics in real-time
        
        Args:
            request: QueryMetricsRequest message
            context: grpc.ServicerContext
            
        Yields:
            Metric messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def GetSystemStatus(self, request: monitoring__pb2.GetSystemStatusRequest,
                        context: grpc.ServicerContext) -> monitoring__pb2.GetSystemStatusResponse:
        """
        Get system status
        
        Args:
            request: GetSystemStatusRequest message
            context: grpc.ServicerContext
            
        Returns:
            GetSystemStatusResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def CreateAlert(self, request: monitoring__pb2.CreateAlertRequest,
                    context: grpc.ServicerContext) -> monitoring__pb2.CreateAlertResponse:
        """
        Create alert rule
        
        Args:
            request: CreateAlertRequest message
            context: grpc.ServicerContext
            
        Returns:
            CreateAlertResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def StreamAlerts(self, request: monitoring__pb2.GetAlertsRequest,
                     context: grpc.ServicerContext) -> Iterator[monitoring__pb2.Alert]:
        """
        Stream alerts in real-time
        
        Args:
            request: GetAlertsRequest message
            context: grpc.ServicerContext
            
        Yields:
            Alert messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonitoringServiceServicer_to_server(servicer: MonitoringServiceServicer,
                                            server: grpc.Server):
    """
    Register MonitoringService with gRPC server
    
    Args:
        servicer: MonitoringServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'RecordMetrics': grpc.unary_unary_rpc_method_handler(
            servicer.RecordMetrics,
            request_deserializer=monitoring__pb2.RecordMetricsRequest.FromString,
            response_serializer=monitoring__pb2.RecordMetricsResponse.SerializeToString,
        ),
        'RecordMetricsBatch': grpc.stream_unary_rpc_method_handler(
            servicer.RecordMetricsBatch,
            request_deserializer=monitoring__pb2.MetricBatch.FromString,
            response_serializer=monitoring__pb2.RecordMetricsResponse.SerializeToString,
        ),
        'QueryMetrics': grpc.unary_unary_rpc_method_handler(
            servicer.QueryMetrics,
            request_deserializer=monitoring__pb2.QueryMetricsRequest.FromString,
            response_serializer=monitoring__pb2.QueryMetricsResponse.SerializeToString,
        ),
        'StreamMetrics': grpc.unary_stream_rpc_method_handler(
            servicer.StreamMetrics,
            request_deserializer=monitoring__pb2.QueryMetricsRequest.FromString,
            response_serializer=monitoring__pb2.Metric.SerializeToString,
        ),
        'GetSystemStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetSystemStatus,
            request_deserializer=monitoring__pb2.GetSystemStatusRequest.FromString,
            response_serializer=monitoring__pb2.GetSystemStatusResponse.SerializeToString,
        ),
        'CreateAlert': grpc.unary_unary_rpc_method_handler(
            servicer.CreateAlert,
            request_deserializer=monitoring__pb2.CreateAlertRequest.FromString,
            response_serializer=monitoring__pb2.CreateAlertResponse.SerializeToString,
        ),
        'StreamAlerts': grpc.unary_stream_rpc_method_handler(
            servicer.StreamAlerts,
            request_deserializer=monitoring__pb2.GetAlertsRequest.FromString,
            response_serializer=monitoring__pb2.Alert.SerializeToString,
        ),
    }
    
    generic_handler = grpc.method_handlers_generic_handler(
        'agnews.monitoring.v1.MonitoringService',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# Additional request type for streaming alerts
class GetAlertsRequest(monitoring__pb2._message.Message):
    """Request for getting alerts"""
    __slots__ = ['filter', 'severity_min', 'include_resolved']
    
    def __init__(self,
                 filter: str = "",
                 severity_min: int = 0,
                 include_resolved: bool = False):
        super().__init__()
        self.filter = filter
        self.severity_min = severity_min
        self.include_resolved = include_resolved
