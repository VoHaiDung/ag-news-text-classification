"""
Generated gRPC service code for Classification Service
================================================================================
This file is automatically generated by the gRPC tools.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/classification.proto
"""

import grpc
from . import classification_pb2 as classification__pb2

class ClassificationServiceStub(object):
    """
    Classification Service Stub
    
    Client stub for accessing classification service methods.
    Implements the gRPC client interface for text classification operations.
    """
    
    def __init__(self, channel):
        """
        Initialize the stub with a gRPC channel
        
        Args:
            channel: grpc.Channel instance for communication
        """
        self.Classify = channel.unary_unary(
            '/agnews.classification.v1.ClassificationService/Classify',
            request_serializer=classification__pb2.ClassificationRequest.SerializeToString,
            response_deserializer=classification__pb2.ClassificationResponse.FromString,
        )
        
        self.ClassifyBatch = channel.unary_unary(
            '/agnews.classification.v1.ClassificationService/ClassifyBatch',
            request_serializer=classification__pb2.BatchClassificationRequest.SerializeToString,
            response_deserializer=classification__pb2.BatchClassificationResponse.FromString,
        )
        
        self.ClassifyStream = channel.stream_stream(
            '/agnews.classification.v1.ClassificationService/ClassifyStream',
            request_serializer=classification__pb2.StreamClassificationRequest.SerializeToString,
            response_deserializer=classification__pb2.ClassificationResponse.FromString,
        )

class ClassificationServiceServicer(object):
    """
    Classification Service Interface
    
    Abstract base class for classification service implementation.
    Defines the service methods that must be implemented by the server.
    """
    
    def Classify(self, request, context):
        """
        Single text classification
        
        Args:
            request: ClassificationRequest message
            context: grpc.ServicerContext
            
        Returns:
            ClassificationResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def ClassifyBatch(self, request, context):
        """
        Batch text classification
        
        Args:
            request: BatchClassificationRequest message
            context: grpc.ServicerContext
            
        Returns:
            BatchClassificationResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def ClassifyStream(self, request_iterator, context):
        """
        Streaming text classification
        
        Args:
            request_iterator: Iterator of StreamClassificationRequest messages
            context: grpc.ServicerContext
            
        Yields:
            ClassificationResponse messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

def add_ClassificationServiceServicer_to_server(servicer, server):
    """
    Register ClassificationService with gRPC server
    
    Args:
        servicer: ClassificationServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'Classify': grpc.unary_unary_rpc_method_handler(
            servicer.Classify,
            request_deserializer=classification__pb2.ClassificationRequest.FromString,
            response_serializer=classification__pb2.ClassificationResponse.SerializeToString,
        ),
        'ClassifyBatch': grpc.unary_unary_rpc_method_handler(
            servicer.ClassifyBatch,
            request_deserializer=classification__pb2.BatchClassificationRequest.FromString,
            response_serializer=classification__pb2.BatchClassificationResponse.SerializeToString,
        ),
        'ClassifyStream': grpc.stream_stream_rpc_method_handler(
            servicer.ClassifyStream,
            request_deserializer=classification__pb2.StreamClassificationRequest.FromString,
            response_serializer=classification__pb2.ClassificationResponse.SerializeToString,
        ),
    }
    
    generic_handler = grpc.method_handlers_generic_handler(
        'agnews.classification.v1.ClassificationService',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))

class ClassificationService(object):
    """Classification Service descriptor for reflection"""
    
    @staticmethod
    def Classify(request, target, options=(), channel_credentials=None,
                 call_credentials=None, insecure=False, compression=None,
                 wait_for_ready=None, timeout=None, metadata=None):
        """Static method for direct RPC calls"""
        return grpc.experimental.unary_unary(
            request, target,
            '/agnews.classification.v1.ClassificationService/Classify',
            classification__pb2.ClassificationRequest.SerializeToString,
            classification__pb2.ClassificationResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
