"""
Generated gRPC service code for Data Service
================================================================================
This file is automatically generated by the gRPC tools.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/data_service.proto

Implements the gRPC service interface for data management operations.
"""

import grpc
from typing import Iterator

from . import data_service_pb2 as data__service__pb2


class DataServiceStub(object):
    """
    Data Service Stub
    
    Client stub for accessing data service methods.
    Provides operations for dataset management, preprocessing, and augmentation.
    """
    
    def __init__(self, channel: grpc.Channel):
        """
        Initialize the stub with a gRPC channel
        
        Args:
            channel: grpc.Channel instance for communication
        """
        self.CreateDataset = channel.unary_unary(
            '/agnews.data.v1.DataService/CreateDataset',
            request_serializer=data__service__pb2.CreateDatasetRequest.SerializeToString,
            response_deserializer=data__service__pb2.CreateDatasetResponse.FromString,
        )
        
        self.GetDataset = channel.unary_unary(
            '/agnews.data.v1.DataService/GetDataset',
            request_serializer=data__service__pb2.GetDatasetRequest.SerializeToString,
            response_deserializer=data__service__pb2.GetDatasetResponse.FromString,
        )
        
        self.ListDatasets = channel.unary_unary(
            '/agnews.data.v1.DataService/ListDatasets',
            request_serializer=data__service__pb2.ListDatasetsRequest.SerializeToString,
            response_deserializer=data__service__pb2.ListDatasetsResponse.FromString,
        )
        
        self.UpdateDataset = channel.unary_unary(
            '/agnews.data.v1.DataService/UpdateDataset',
            request_serializer=data__service__pb2.UpdateDatasetRequest.SerializeToString,
            response_deserializer=data__service__pb2.UpdateDatasetResponse.FromString,
        )
        
        self.DeleteDataset = channel.unary_unary(
            '/agnews.data.v1.DataService/DeleteDataset',
            request_serializer=data__service__pb2.DeleteDatasetRequest.SerializeToString,
            response_deserializer=data__service__pb2.DeleteDatasetResponse.FromString,
        )
        
        self.PreprocessData = channel.unary_unary(
            '/agnews.data.v1.DataService/PreprocessData',
            request_serializer=data__service__pb2.PreprocessRequest.SerializeToString,
            response_deserializer=data__service__pb2.PreprocessResponse.FromString,
        )
        
        self.AugmentData = channel.unary_unary(
            '/agnews.data.v1.DataService/AugmentData',
            request_serializer=data__service__pb2.AugmentationRequest.SerializeToString,
            response_deserializer=data__service__pb2.AugmentationResponse.FromString,
        )
        
        self.StreamDataSamples = channel.unary_stream(
            '/agnews.data.v1.DataService/StreamDataSamples',
            request_serializer=data__service__pb2.GetDatasetRequest.SerializeToString,
            response_deserializer=data__service__pb2.DataSample.FromString,
        )
        
        self.UploadDataStream = channel.stream_unary(
            '/agnews.data.v1.DataService/UploadDataStream',
            request_serializer=data__service__pb2.DataSample.SerializeToString,
            response_deserializer=data__service__pb2.CreateDatasetResponse.FromString,
        )


class DataServiceServicer(object):
    """
    Data Service Interface
    
    Abstract base class for data service implementation.
    Defines the service methods that must be implemented by the server.
    """
    
    def CreateDataset(self, request: data__service__pb2.CreateDatasetRequest,
                      context: grpc.ServicerContext) -> data__service__pb2.CreateDatasetResponse:
        """
        Create a new dataset
        
        Args:
            request: CreateDatasetRequest message
            context: grpc.ServicerContext
            
        Returns:
            CreateDatasetResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def GetDataset(self, request: data__service__pb2.GetDatasetRequest,
                   context: grpc.ServicerContext) -> data__service__pb2.GetDatasetResponse:
        """
        Get dataset information
        
        Args:
            request: GetDatasetRequest message
            context: grpc.ServicerContext
            
        Returns:
            GetDatasetResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def ListDatasets(self, request: data__service__pb2.ListDatasetsRequest,
                     context: grpc.ServicerContext) -> data__service__pb2.ListDatasetsResponse:
        """
        List available datasets
        
        Args:
            request: ListDatasetsRequest message
            context: grpc.ServicerContext
            
        Returns:
            ListDatasetsResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def UpdateDataset(self, request: data__service__pb2.UpdateDatasetRequest,
                      context: grpc.ServicerContext) -> data__service__pb2.UpdateDatasetResponse:
        """
        Update dataset information
        
        Args:
            request: UpdateDatasetRequest message
            context: grpc.ServicerContext
            
        Returns:
            UpdateDatasetResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def DeleteDataset(self, request: data__service__pb2.DeleteDatasetRequest,
                      context: grpc.ServicerContext) -> data__service__pb2.DeleteDatasetResponse:
        """
        Delete a dataset
        
        Args:
            request: DeleteDatasetRequest message
            context: grpc.ServicerContext
            
        Returns:
            DeleteDatasetResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def PreprocessData(self, request: data__service__pb2.PreprocessRequest,
                       context: grpc.ServicerContext) -> data__service__pb2.PreprocessResponse:
        """
        Preprocess dataset
        
        Args:
            request: PreprocessRequest message
            context: grpc.ServicerContext
            
        Returns:
            PreprocessResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def AugmentData(self, request: data__service__pb2.AugmentationRequest,
                    context: grpc.ServicerContext) -> data__service__pb2.AugmentationResponse:
        """
        Augment dataset
        
        Args:
            request: AugmentationRequest message
            context: grpc.ServicerContext
            
        Returns:
            AugmentationResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def StreamDataSamples(self, request: data__service__pb2.GetDatasetRequest,
                          context: grpc.ServicerContext) -> Iterator[data__service__pb2.DataSample]:
        """
        Stream data samples from dataset
        
        Args:
            request: GetDatasetRequest message
            context: grpc.ServicerContext
            
        Yields:
            DataSample messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def UploadDataStream(self, request_iterator: Iterator[data__service__pb2.DataSample],
                         context: grpc.ServicerContext) -> data__service__pb2.CreateDatasetResponse:
        """
        Upload data samples as stream
        
        Args:
            request_iterator: Iterator of DataSample messages
            context: grpc.ServicerContext
            
        Returns:
            CreateDatasetResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServiceServicer_to_server(servicer: DataServiceServicer,
                                      server: grpc.Server):
    """
    Register DataService with gRPC server
    
    Args:
        servicer: DataServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'CreateDataset': grpc.unary_unary_rpc_method_handler(
            servicer.CreateDataset,
            request_deserializer=data__service__pb2.CreateDatasetRequest.FromString,
            response_serializer=data__service__pb2.CreateDatasetResponse.SerializeToString,
        ),
        'GetDataset': grpc.unary_unary_rpc_method_handler(
            servicer.GetDataset,
            request_deserializer=data__service__pb2.GetDatasetRequest.FromString,
            response_serializer=data__service__pb2.GetDatasetResponse.SerializeToString,
        ),
        'ListDatasets': grpc.unary_unary_rpc_method_handler(
            servicer.ListDatasets,
            request_deserializer=data__service__pb2.ListDatasetsRequest.FromString,
            response_serializer=data__service__pb2.ListDatasetsResponse.SerializeToString,
        ),
        'UpdateDataset': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateDataset,
            request_deserializer=data__service__pb2.UpdateDatasetRequest.FromString,
            response_serializer=data__service__pb2.UpdateDatasetResponse.SerializeToString,
        ),
        'DeleteDataset': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteDataset,
            request_deserializer=data__service__pb2.DeleteDatasetRequest.FromString,
            response_serializer=data__service__pb2.DeleteDatasetResponse.SerializeToString,
        ),
        'PreprocessData': grpc.unary_unary_rpc_method_handler(
            servicer.PreprocessData,
            request_deserializer=data__service__pb2.PreprocessRequest.FromString,
            response_serializer=data__service__pb2.PreprocessResponse.SerializeToString,
        ),
        'AugmentData': grpc.unary_unary_rpc_method_handler(
            servicer.AugmentData,
            request_deserializer=data__service__pb2.AugmentationRequest.FromString,
            response_serializer=data__service__pb2.AugmentationResponse.SerializeToString,
        ),
        'StreamDataSamples': grpc.unary_stream_rpc_method_handler(
            servicer.StreamDataSamples,
            request_deserializer=data__service__pb2.GetDatasetRequest.FromString,
            response_serializer=data__service__pb2.DataSample.SerializeToString,
        ),
        'UploadDataStream': grpc.stream_unary_rpc_method_handler(
            servicer.UploadDataStream,
            request_deserializer=data__service__pb2.DataSample.FromString,
            response_serializer=data__service__pb2.CreateDatasetResponse.SerializeToString,
        ),
    }
    
    generic_handler = grpc.method_handlers_generic_handler(
        'agnews.data.v1.DataService',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# Additional request/response messages needed for complete service

class GetDatasetRequest(data__service__pb2._message.Message):
    """Request for getting dataset information"""
    __slots__ = ['dataset_id', 'include_samples', 'sample_limit']
    
    def __init__(self,
                 dataset_id: str = "",
                 include_samples: bool = False,
                 sample_limit: int = 10):
        super().__init__()
        self.dataset_id = dataset_id
        self.include_samples = include_samples
        self.sample_limit = sample_limit


class GetDatasetResponse(data__service__pb2._message.Message):
    """Response with dataset information"""
    __slots__ = ['dataset', 'samples', 'metadata']
    
    def __init__(self,
                 dataset=None,
                 samples=None,
                 metadata=None):
        super().__init__()
        if dataset:
            self.dataset = dataset
        if samples:
            self.samples.extend(samples)
        if metadata:
            self.metadata = metadata


class ListDatasetsRequest(data__service__pb2._message.Message):
    """Request for listing datasets"""
    __slots__ = ['filter', 'page_size', 'page_token', 'sort_by', 'sort_order']
    
    def __init__(self,
                 filter: str = "",
                 page_size: int = 10,
                 page_token: str = "",
                 sort_by: str = "created_at",
                 sort_order: str = "DESC"):
        super().__init__()
        self.filter = filter
        self.page_size = page_size
        self.page_token = page_token
        self.sort_by = sort_by
        self.sort_order = sort_order


class ListDatasetsResponse(data__service__pb2._message.Message):
    """Response with list of datasets"""
    __slots__ = ['datasets', 'next_page_token', 'total_count', 'metadata']
    
    def __init__(self,
                 datasets=None,
                 next_page_token: str = "",
                 total_count: int = 0,
                 metadata=None):
        super().__init__()
        if datasets:
            self.datasets.extend(datasets)
        self.next_page_token = next_page_token
        self.total_count = total_count
        if metadata:
            self.metadata = metadata


class UpdateDatasetRequest(data__service__pb2._message.Message):
    """Request for updating dataset"""
    __slots__ = ['dataset_id', 'update_mask', 'name', 'description', 'metadata']
    
    def __init__(self,
                 dataset_id: str = "",
                 update_mask=None,
                 name: str = "",
                 description: str = "",
                 metadata=None):
        super().__init__()
        self.dataset_id = dataset_id
        if update_mask:
            self.update_mask = update_mask
        self.name = name
        self.description = description
        if metadata:
            self.metadata.update(metadata)


class UpdateDatasetResponse(data__service__pb2._message.Message):
    """Response for dataset update"""
    __slots__ = ['dataset', 'metadata']
    
    def __init__(self, dataset=None, metadata=None):
        super().__init__()
        if dataset:
            self.dataset = dataset
        if metadata:
            self.metadata = metadata


class DeleteDatasetRequest(data__service__pb2._message.Message):
    """Request for deleting dataset"""
    __slots__ = ['dataset_id', 'force']
    
    def __init__(self, dataset_id: str = "", force: bool = False):
        super().__init__()
        self.dataset_id = dataset_id
        self.force = force


class DeleteDatasetResponse(data__service__pb2._message.Message):
    """Response for dataset deletion"""
    __slots__ = ['success', 'message', 'metadata']
    
    def __init__(self,
                 success: bool = False,
                 message: str = "",
                 metadata=None):
        super().__init__()
        self.success = success
        self.message = message
        if metadata:
            self.metadata = metadata
