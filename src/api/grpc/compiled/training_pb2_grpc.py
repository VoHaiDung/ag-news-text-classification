"""
Generated gRPC service code for Training Service
================================================================================
This file is automatically generated by the gRPC tools.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/training.proto

Implements the gRPC service interface for model training operations.
"""

import grpc
from typing import Iterator

from . import training_pb2 as training__pb2


class TrainingServiceStub(object):
    """
    Training Service Stub
    
    Client stub for accessing training service methods.
    Provides operations for training job management and monitoring.
    """
    
    def __init__(self, channel: grpc.Channel):
        """
        Initialize the stub with a gRPC channel
        
        Args:
            channel: grpc.Channel instance for communication
        """
        self.StartTraining = channel.unary_unary(
            '/agnews.training.v1.TrainingService/StartTraining',
            request_serializer=training__pb2.StartTrainingRequest.SerializeToString,
            response_deserializer=training__pb2.StartTrainingResponse.FromString,
        )
        
        self.StopTraining = channel.unary_unary(
            '/agnews.training.v1.TrainingService/StopTraining',
            request_serializer=training__pb2.StopTrainingRequest.SerializeToString,
            response_deserializer=training__pb2.StopTrainingResponse.FromString,
        )
        
        self.GetTrainingJob = channel.unary_unary(
            '/agnews.training.v1.TrainingService/GetTrainingJob',
            request_serializer=training__pb2.GetTrainingJobRequest.SerializeToString,
            response_deserializer=training__pb2.GetTrainingJobResponse.FromString,
        )
        
        self.ListTrainingJobs = channel.unary_unary(
            '/agnews.training.v1.TrainingService/ListTrainingJobs',
            request_serializer=training__pb2.ListTrainingJobsRequest.SerializeToString,
            response_deserializer=training__pb2.ListTrainingJobsResponse.FromString,
        )
        
        self.StreamTrainingMetrics = channel.unary_stream(
            '/agnews.training.v1.TrainingService/StreamTrainingMetrics',
            request_serializer=training__pb2.GetTrainingJobRequest.SerializeToString,
            response_deserializer=training__pb2.TrainingJob.Metrics.FromString,
        )


class TrainingServiceServicer(object):
    """
    Training Service Interface
    
    Abstract base class for training service implementation.
    Defines the service methods that must be implemented by the server.
    """
    
    def StartTraining(self, request: training__pb2.StartTrainingRequest,
                      context: grpc.ServicerContext) -> training__pb2.StartTrainingResponse:
        """
        Start a new training job
        
        Args:
            request: StartTrainingRequest message
            context: grpc.ServicerContext
            
        Returns:
            StartTrainingResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def StopTraining(self, request: training__pb2.StopTrainingRequest,
                     context: grpc.ServicerContext) -> training__pb2.StopTrainingResponse:
        """
        Stop a running training job
        
        Args:
            request: StopTrainingRequest message
            context: grpc.ServicerContext
            
        Returns:
            StopTrainingResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def GetTrainingJob(self, request: training__pb2.GetTrainingJobRequest,
                       context: grpc.ServicerContext) -> training__pb2.GetTrainingJobResponse:
        """
        Get training job information
        
        Args:
            request: GetTrainingJobRequest message
            context: grpc.ServicerContext
            
        Returns:
            GetTrainingJobResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def ListTrainingJobs(self, request: training__pb2.ListTrainingJobsRequest,
                         context: grpc.ServicerContext) -> training__pb2.ListTrainingJobsResponse:
        """
        List training jobs
        
        Args:
            request: ListTrainingJobsRequest message
            context: grpc.ServicerContext
            
        Returns:
            ListTrainingJobsResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def StreamTrainingMetrics(self, request: training__pb2.GetTrainingJobRequest,
                              context: grpc.ServicerContext) -> Iterator[training__pb2.TrainingJob.Metrics]:
        """
        Stream training metrics in real-time
        
        Args:
            request: GetTrainingJobRequest message
            context: grpc.ServicerContext
            
        Yields:
            TrainingJob.Metrics messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TrainingServiceServicer_to_server(servicer: TrainingServiceServicer,
                                          server: grpc.Server):
    """
    Register TrainingService with gRPC server
    
    Args:
        servicer: TrainingServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'StartTraining': grpc.unary_unary_rpc_method_handler(
            servicer.StartTraining,
            request_deserializer=training__pb2.StartTrainingRequest.FromString,
            response_serializer=training__pb2.StartTrainingResponse.SerializeToString,
        ),
        'StopTraining': grpc.unary_unary_rpc_method_handler(
            servicer.StopTraining,
            request_deserializer=training__pb2.StopTrainingRequest.FromString,
            response_serializer=training__pb2.StopTrainingResponse.SerializeToString,
        ),
        'GetTrainingJob': grpc.unary_unary_rpc_method_handler(
            servicer.GetTrainingJob,
            request_deserializer=training__pb2.GetTrainingJobRequest.FromString,
            response_serializer=training__pb2.GetTrainingJobResponse.SerializeToString,
        ),
        'ListTrainingJobs': grpc.unary_unary_rpc_method_handler(
            servicer.ListTrainingJobs,
            request_deserializer=training__pb2.ListTrainingJobsRequest.FromString,
            response_serializer=training__pb2.ListTrainingJobsResponse.SerializeToString,
        ),
        'StreamTrainingMetrics': grpc.unary_stream_rpc_method_handler(
            servicer.StreamTrainingMetrics,
            request_deserializer=training__pb2.GetTrainingJobRequest.FromString,
            response_serializer=training__pb2.TrainingJob.Metrics.SerializeToString,
        ),
    }
    
    generic_handler = grpc.method_handlers_generic_handler(
        'agnews.training.v1.TrainingService',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


class TrainingService(object):
    """Training Service descriptor for reflection and direct calls"""
    
    @staticmethod
    def StartTraining(request: training__pb2.StartTrainingRequest,
                      target: str,
                      options=(),
                      channel_credentials=None,
                      call_credentials=None,
                      insecure=False,
                      compression=None,
                      wait_for_ready=None,
                      timeout=None,
                      metadata=None) -> training__pb2.StartTrainingResponse:
        """Static method for direct StartTraining RPC calls"""
        return grpc.experimental.unary_unary(
            request, target,
            '/agnews.training.v1.TrainingService/StartTraining',
            training__pb2.StartTrainingRequest.SerializeToString,
            training__pb2.StartTrainingResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
