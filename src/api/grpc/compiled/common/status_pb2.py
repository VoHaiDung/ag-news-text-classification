"""
Generated Protocol Buffer code for Status Types
================================================================================
This file is automatically generated by the Protocol Buffer compiler.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/common/status.proto

These types provide standard status and error reporting mechanisms following
Google's error model for APIs.
"""

import sys
from typing import Optional, List, Dict, Any

_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode('latin1'))

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import any_pb2

# Symbol database
_sym_db = _symbol_database.Default()


class StatusCode:
    """
    Standard status codes following gRPC conventions
    
    Based on Google's canonical error codes:
    https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
    """
    OK = 0
    CANCELLED = 1
    UNKNOWN = 2
    INVALID_ARGUMENT = 3
    DEADLINE_EXCEEDED = 4
    NOT_FOUND = 5
    ALREADY_EXISTS = 6
    PERMISSION_DENIED = 7
    RESOURCE_EXHAUSTED = 8
    FAILED_PRECONDITION = 9
    ABORTED = 10
    OUT_OF_RANGE = 11
    UNIMPLEMENTED = 12
    INTERNAL = 13
    UNAVAILABLE = 14
    DATA_LOSS = 15
    UNAUTHENTICATED = 16


class Status(_message.Message):
    """
    Status message for operation results
    
    Attributes:
        code: Status code from StatusCode enum
        message: Human-readable status message
        details: List of detailed error information
    """
    __slots__ = ['code', 'message', 'details']
    
    def __init__(self,
                 code: int = StatusCode.OK,
                 message: str = "",
                 details: Optional[List[Any]] = None):
        super(Status, self).__init__()
        self.code = code
        self.message = message
        if details:
            self.details.extend(details)


class ErrorInfo(_message.Message):
    """
    Detailed error information
    
    Attributes:
        reason: Machine-readable error reason
        domain: Error domain (e.g., service name)
        metadata: Additional error metadata
    """
    __slots__ = ['reason', 'domain', 'metadata']
    
    def __init__(self,
                 reason: str = "",
                 domain: str = "",
                 metadata: Optional[Dict[str, str]] = None):
        super(ErrorInfo, self).__init__()
        self.reason = reason
        self.domain = domain
        if metadata:
            self.metadata.update(metadata)


class RetryInfo(_message.Message):
    """
    Information for client retry behavior
    
    Attributes:
        retry_delay_seconds: Minimum delay before retry
        max_attempts: Maximum number of retry attempts
        backoff_multiplier: Exponential backoff multiplier
    """
    __slots__ = ['retry_delay_seconds', 'max_attempts', 'backoff_multiplier']
    
    def __init__(self,
                 retry_delay_seconds: int = 1,
                 max_attempts: int = 3,
                 backoff_multiplier: float = 2.0):
        super(RetryInfo, self).__init__()
        self.retry_delay_seconds = retry_delay_seconds
        self.max_attempts = max_attempts
        self.backoff_multiplier = backoff_multiplier


class DebugInfo(_message.Message):
    """
    Debug information for development
    
    Attributes:
        stack_entries: Stack trace entries
        detail: Detailed debug message
    """
    __slots__ = ['stack_entries', 'detail']
    
    def __init__(self,
                 stack_entries: Optional[List[str]] = None,
                 detail: str = ""):
        super(DebugInfo, self).__init__()
        if stack_entries:
            self.stack_entries.extend(stack_entries)
        self.detail = detail


class QuotaViolation(_message.Message):
    """
    Quota violation details
    
    Attributes:
        subject: Subject that violated quota
        description: Description of the violation
        limit: Quota limit
        current: Current usage
    """
    __slots__ = ['subject', 'description', 'limit', 'current']
    
    def __init__(self,
                 subject: str = "",
                 description: str = "",
                 limit: int = 0,
                 current: int = 0):
        super(QuotaViolation, self).__init__()
        self.subject = subject
        self.description = description
        self.limit = limit
        self.current = current


class PreconditionFailure(_message.Message):
    """
    Precondition failure details
    
    Attributes:
        violations: List of precondition violations
    """
    
    class Violation(_message.Message):
        """Single precondition violation"""
        __slots__ = ['type', 'subject', 'description']
        
        def __init__(self,
                     type: str = "",
                     subject: str = "",
                     description: str = ""):
            super(PreconditionFailure.Violation, self).__init__()
            self.type = type
            self.subject = subject
            self.description = description
    
    __slots__ = ['violations']
    
    def __init__(self, violations: Optional[List[Violation]] = None):
        super(PreconditionFailure, self).__init__()
        if violations:
            self.violations.extend(violations)


class BadRequest(_message.Message):
    """
    Bad request error details
    
    Attributes:
        field_violations: List of field validation errors
    """
    
    class FieldViolation(_message.Message):
        """Field validation error"""
        __slots__ = ['field', 'description', 'reason']
        
        def __init__(self,
                     field: str = "",
                     description: str = "",
                     reason: str = ""):
            super(BadRequest.FieldViolation, self).__init__()
            self.field = field
            self.description = description
            self.reason = reason
    
    __slots__ = ['field_violations']
    
    def __init__(self, field_violations: Optional[List[FieldViolation]] = None):
        super(BadRequest, self).__init__()
        if field_violations:
            self.field_violations.extend(field_violations)


# Register message types
_sym_db.RegisterMessage(Status)
_sym_db.RegisterMessage(ErrorInfo)
_sym_db.RegisterMessage(RetryInfo)
_sym_db.RegisterMessage(DebugInfo)
_sym_db.RegisterMessage(QuotaViolation)
_sym_db.RegisterMessage(PreconditionFailure)
_sym_db.RegisterMessage(PreconditionFailure.Violation)
_sym_db.RegisterMessage(BadRequest)
_sym_db.RegisterMessage(BadRequest.FieldViolation)
