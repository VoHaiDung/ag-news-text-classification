"""
Generated Protocol Buffer code for Health Service
================================================================================
This file is automatically generated by the Protocol Buffer compiler.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/health.proto

Implements standard gRPC health checking protocol as defined in:
https://github.com/grpc/grpc/blob/master/doc/health-checking.md
"""

import sys
from typing import Optional, Dict, List

_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode('latin1'))

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import timestamp_pb2

# Symbol database
_sym_db = _symbol_database.Default()


class HealthCheckRequest(_message.Message):
    """
    Health check request message
    
    Attributes:
        service: Service name to check (empty for overall health)
        verbose: Include detailed health information
    """
    __slots__ = ['service', 'verbose']
    
    def __init__(self, service: str = "", verbose: bool = False):
        super(HealthCheckRequest, self).__init__()
        self.service = service
        self.verbose = verbose


class HealthCheckResponse(_message.Message):
    """
    Health check response message
    
    Attributes:
        status: Service health status
        details: Detailed health information
        dependencies: Health status of dependencies
        timestamp: Health check timestamp
    """
    
    class ServingStatus:
        """Health status enumeration"""
        UNKNOWN = 0
        SERVING = 1
        NOT_SERVING = 2
        SERVICE_UNKNOWN = 3
    
    class DependencyHealth(_message.Message):
        """Health status of a dependency"""
        __slots__ = ['name', 'status', 'latency_ms', 'error_message']
        
        def __init__(self,
                     name: str = "",
                     status: int = 0,
                     latency_ms: int = 0,
                     error_message: str = ""):
            super(HealthCheckResponse.DependencyHealth, self).__init__()
            self.name = name
            self.status = status
            self.latency_ms = latency_ms
            self.error_message = error_message
    
    class SystemMetrics(_message.Message):
        """System resource metrics"""
        __slots__ = ['cpu_usage_percent', 'memory_usage_percent', 
                     'disk_usage_percent', 'active_connections']
        
        def __init__(self,
                     cpu_usage_percent: float = 0.0,
                     memory_usage_percent: float = 0.0,
                     disk_usage_percent: float = 0.0,
                     active_connections: int = 0):
            super(HealthCheckResponse.SystemMetrics, self).__init__()
            self.cpu_usage_percent = cpu_usage_percent
            self.memory_usage_percent = memory_usage_percent
            self.disk_usage_percent = disk_usage_percent
            self.active_connections = active_connections
    
    __slots__ = ['status', 'details', 'dependencies', 'timestamp', 'system_metrics']
    
    def __init__(self,
                 status: int = 0,
                 details: Optional[Dict[str, str]] = None,
                 dependencies: Optional[List[DependencyHealth]] = None,
                 timestamp: Optional[timestamp_pb2.Timestamp] = None,
                 system_metrics: Optional[SystemMetrics] = None):
        super(HealthCheckResponse, self).__init__()
        self.status = status
        if details:
            self.details.update(details)
        if dependencies:
            self.dependencies.extend(dependencies)
        if timestamp:
            self.timestamp.CopyFrom(timestamp)
        if system_metrics:
            self.system_metrics.CopyFrom(system_metrics)


class LivenessRequest(_message.Message):
    """
    Liveness probe request
    
    Used by orchestrators (e.g., Kubernetes) to determine if service should be restarted
    """
    __slots__ = []
    
    def __init__(self):
        super(LivenessRequest, self).__init__()


class LivenessResponse(_message.Message):
    """
    Liveness probe response
    
    Attributes:
        alive: Whether service is alive
        message: Status message
    """
    __slots__ = ['alive', 'message']
    
    def __init__(self, alive: bool = True, message: str = "Service is alive"):
        super(LivenessResponse, self).__init__()
        self.alive = alive
        self.message = message


class ReadinessRequest(_message.Message):
    """
    Readiness probe request
    
    Used by orchestrators to determine if service is ready to accept traffic
    """
    __slots__ = []
    
    def __init__(self):
        super(ReadinessRequest, self).__init__()


class ReadinessResponse(_message.Message):
    """
    Readiness probe response
    
    Attributes:
        ready: Whether service is ready to accept requests
        message: Status message
        checks: Individual readiness checks
    """
    
    class ReadinessCheck(_message.Message):
        """Individual readiness check result"""
        __slots__ = ['name', 'ready', 'message']
        
        def __init__(self, name: str = "", ready: bool = False, message: str = ""):
            super(ReadinessResponse.ReadinessCheck, self).__init__()
            self.name = name
            self.ready = ready
            self.message = message
    
    __slots__ = ['ready', 'message', 'checks']
    
    def __init__(self,
                 ready: bool = False,
                 message: str = "",
                 checks: Optional[List[ReadinessCheck]] = None):
        super(ReadinessResponse, self).__init__()
        self.ready = ready
        self.message = message
        if checks:
            self.checks.extend(checks)


class StartupRequest(_message.Message):
    """
    Startup probe request
    
    Used to determine if application has successfully started
    """
    __slots__ = []
    
    def __init__(self):
        super(StartupRequest, self).__init__()


class StartupResponse(_message.Message):
    """
    Startup probe response
    
    Attributes:
        started: Whether service has completed startup
        progress: Startup progress percentage
        message: Status message
    """
    __slots__ = ['started', 'progress', 'message']
    
    def __init__(self,
                 started: bool = False,
                 progress: int = 0,
                 message: str = ""):
        super(StartupResponse, self).__init__()
        self.started = started
        self.progress = progress
        self.message = message


# Register message types
_sym_db.RegisterMessage(HealthCheckRequest)
_sym_db.RegisterMessage(HealthCheckResponse)
_sym_db.RegisterMessage(HealthCheckResponse.DependencyHealth)
_sym_db.RegisterMessage(HealthCheckResponse.SystemMetrics)
_sym_db.RegisterMessage(LivenessRequest)
_sym_db.RegisterMessage(LivenessResponse)
_sym_db.RegisterMessage(ReadinessRequest)
_sym_db.RegisterMessage(ReadinessResponse)
_sym_db.RegisterMessage(ReadinessResponse.ReadinessCheck)
_sym_db.RegisterMessage(StartupRequest)
_sym_db.RegisterMessage(StartupResponse)
