"""
Generated gRPC service code for Health Service
================================================================================
This file is automatically generated by the gRPC tools.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/health.proto

Implements standard gRPC health checking service interface.
"""

import grpc
from typing import Iterator

from . import health_pb2 as health__pb2


class HealthServiceStub(object):
    """
    Health Service Stub
    
    Client stub for accessing health service methods.
    Implements standard gRPC health checking protocol.
    """
    
    def __init__(self, channel: grpc.Channel):
        """
        Initialize the stub with a gRPC channel
        
        Args:
            channel: grpc.Channel instance for communication
        """
        self.Check = channel.unary_unary(
            '/grpc.health.v1.Health/Check',
            request_serializer=health__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=health__pb2.HealthCheckResponse.FromString,
        )
        
        self.Watch = channel.unary_stream(
            '/grpc.health.v1.Health/Watch',
            request_serializer=health__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=health__pb2.HealthCheckResponse.FromString,
        )
        
        self.Liveness = channel.unary_unary(
            '/grpc.health.v1.Health/Liveness',
            request_serializer=health__pb2.LivenessRequest.SerializeToString,
            response_deserializer=health__pb2.LivenessResponse.FromString,
        )
        
        self.Readiness = channel.unary_unary(
            '/grpc.health.v1.Health/Readiness',
            request_serializer=health__pb2.ReadinessRequest.SerializeToString,
            response_deserializer=health__pb2.ReadinessResponse.FromString,
        )
        
        self.Startup = channel.unary_unary(
            '/grpc.health.v1.Health/Startup',
            request_serializer=health__pb2.StartupRequest.SerializeToString,
            response_deserializer=health__pb2.StartupResponse.FromString,
        )


class HealthServiceServicer(object):
    """
    Health Service Interface
    
    Abstract base class for health service implementation.
    Follows gRPC health checking specification.
    """
    
    def Check(self, request: health__pb2.HealthCheckRequest,
              context: grpc.ServicerContext) -> health__pb2.HealthCheckResponse:
        """
        Standard health check method
        
        Args:
            request: HealthCheckRequest message
            context: grpc.ServicerContext
            
        Returns:
            HealthCheckResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def Watch(self, request: health__pb2.HealthCheckRequest,
              context: grpc.ServicerContext) -> Iterator[health__pb2.HealthCheckResponse]:
        """
        Watch for health status changes (streaming)
        
        Args:
            request: HealthCheckRequest message
            context: grpc.ServicerContext
            
        Yields:
            HealthCheckResponse messages with status updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def Liveness(self, request: health__pb2.LivenessRequest,
                 context: grpc.ServicerContext) -> health__pb2.LivenessResponse:
        """
        Kubernetes liveness probe
        
        Args:
            request: LivenessRequest message
            context: grpc.ServicerContext
            
        Returns:
            LivenessResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def Readiness(self, request: health__pb2.ReadinessRequest,
                  context: grpc.ServicerContext) -> health__pb2.ReadinessResponse:
        """
        Kubernetes readiness probe
        
        Args:
            request: ReadinessRequest message
            context: grpc.ServicerContext
            
        Returns:
            ReadinessResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def Startup(self, request: health__pb2.StartupRequest,
                context: grpc.ServicerContext) -> health__pb2.StartupResponse:
        """
        Kubernetes startup probe
        
        Args:
            request: StartupRequest message
            context: grpc.ServicerContext
            
        Returns:
            StartupResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer: HealthServiceServicer, 
                                        server: grpc.Server):
    """
    Register HealthService with gRPC server
    
    Args:
        servicer: HealthServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'Check': grpc.unary_unary_rpc_method_handler(
            servicer.Check,
            request_deserializer=health__pb2.HealthCheckRequest.FromString,
            response_serializer=health__pb2.HealthCheckResponse.SerializeToString,
        ),
        'Watch': grpc.unary_stream_rpc_method_handler(
            servicer.Watch,
            request_deserializer=health__pb2.HealthCheckRequest.FromString,
            response_serializer=health__pb2.HealthCheckResponse.SerializeToString,
        ),
        'Liveness': grpc.unary_unary_rpc_method_handler(
            servicer.Liveness,
            request_deserializer=health__pb2.LivenessRequest.FromString,
            response_serializer=health__pb2.LivenessResponse.SerializeToString,
        ),
        'Readiness': grpc.unary_unary_rpc_method_handler(
            servicer.Readiness,
            request_deserializer=health__pb2.ReadinessRequest.FromString,
            response_serializer=health__pb2.ReadinessResponse.SerializeToString,
        ),
        'Startup': grpc.unary_unary_rpc_method_handler(
            servicer.Startup,
            request_deserializer=health__pb2.StartupRequest.FromString,
            response_serializer=health__pb2.StartupResponse.SerializeToString,
        ),
    }
    
    generic_handler = grpc.method_handlers_generic_handler(
        'grpc.health.v1.Health',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


class HealthService(object):
    """Health Service descriptor for reflection and direct calls"""
    
    @staticmethod
    def Check(request: health__pb2.HealthCheckRequest,
              target: str,
              options=(),
              channel_credentials=None,
              call_credentials=None,
              insecure=False,
              compression=None,
              wait_for_ready=None,
              timeout=None,
              metadata=None) -> health__pb2.HealthCheckResponse:
        """Static method for direct Check RPC calls"""
        return grpc.experimental.unary_unary(
            request, target,
            '/grpc.health.v1.Health/Check',
            health__pb2.HealthCheckRequest.SerializeToString,
            health__pb2.HealthCheckResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
