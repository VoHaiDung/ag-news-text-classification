"""
Generated Protocol Buffer code for Data Service
================================================================================
This file is automatically generated by the Protocol Buffer compiler.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/data_service.proto

Defines messages for data management, preprocessing, and augmentation operations.
"""

import sys
from typing import Optional, List, Dict, Any

_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode('latin1'))

from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import timestamp_pb2

# Symbol database
_sym_db = _symbol_database.Default()

# Import common types
from .common import types_pb2, status_pb2


class Dataset(_message.Message):
    """
    Dataset information
    
    Attributes:
        dataset_id: Unique dataset identifier
        name: Dataset name
        description: Dataset description
        type: Dataset type
        size: Number of samples
        metadata: Dataset metadata
        created_at: Creation timestamp
        updated_at: Last update timestamp
    """
    
    class DatasetType:
        """Dataset type enumeration"""
        UNKNOWN = 0
        TRAINING = 1
        VALIDATION = 2
        TEST = 3
        AUGMENTED = 4
        EXTERNAL = 5
        SYNTHETIC = 6
    
    __slots__ = ['dataset_id', 'name', 'description', 'type', 'size',
                 'metadata', 'created_at', 'updated_at']
    
    def __init__(self,
                 dataset_id: str = "",
                 name: str = "",
                 description: str = "",
                 type: int = 0,
                 size: int = 0,
                 metadata: Optional[Dict[str, str]] = None,
                 created_at: Optional[timestamp_pb2.Timestamp] = None,
                 updated_at: Optional[timestamp_pb2.Timestamp] = None):
        super(Dataset, self).__init__()
        self.dataset_id = dataset_id
        self.name = name
        self.description = description
        self.type = type
        self.size = size
        if metadata:
            self.metadata.update(metadata)
        if created_at:
            self.created_at.CopyFrom(created_at)
        if updated_at:
            self.updated_at.CopyFrom(updated_at)


class DataSample(_message.Message):
    """
    Individual data sample
    
    Attributes:
        sample_id: Sample identifier
        text: Text content
        label: Sample label
        metadata: Sample metadata
    """
    __slots__ = ['sample_id', 'text', 'label', 'metadata']
    
    def __init__(self,
                 sample_id: str = "",
                 text: str = "",
                 label: str = "",
                 metadata: Optional[Dict[str, str]] = None):
        super(DataSample, self).__init__()
        self.sample_id = sample_id
        self.text = text
        self.label = label
        if metadata:
            self.metadata.update(metadata)


class CreateDatasetRequest(_message.Message):
    """
    Request to create a new dataset
    
    Attributes:
        name: Dataset name
        description: Dataset description
        samples: Initial samples
        type: Dataset type
        metadata: Dataset metadata
    """
    __slots__ = ['name', 'description', 'samples', 'type', 'metadata']
    
    def __init__(self,
                 name: str = "",
                 description: str = "",
                 samples: Optional[List[DataSample]] = None,
                 type: int = 0,
                 metadata: Optional[Dict[str, str]] = None):
        super(CreateDatasetRequest, self).__init__()
        self.name = name
        self.description = description
        if samples:
            self.samples.extend(samples)
        self.type = type
        if metadata:
            self.metadata.update(metadata)


class CreateDatasetResponse(_message.Message):
    """
    Response for dataset creation
    
    Attributes:
        dataset: Created dataset information
        metadata: Response metadata
    """
    __slots__ = ['dataset', 'metadata']
    
    def __init__(self,
                 dataset: Optional[Dataset] = None,
                 metadata: Optional[types_pb2.ResponseMetadata] = None):
        super(CreateDatasetResponse, self).__init__()
        if dataset:
            self.dataset.CopyFrom(dataset)
        if metadata:
            self.metadata.CopyFrom(metadata)


class PreprocessRequest(_message.Message):
    """
    Request for data preprocessing
    
    Attributes:
        dataset_id: Dataset to preprocess
        operations: Preprocessing operations
        config: Preprocessing configuration
        output_dataset_name: Name for processed dataset
    """
    
    class PreprocessOperation:
        """Preprocessing operation types"""
        NONE = 0
        CLEAN_TEXT = 1
        TOKENIZE = 2
        NORMALIZE = 3
        REMOVE_STOPWORDS = 4
        LEMMATIZE = 5
        EXTRACT_FEATURES = 6
    
    class Config(_message.Message):
        """Preprocessing configuration"""
        __slots__ = ['lowercase', 'remove_punctuation', 'remove_numbers',
                     'remove_urls', 'remove_emails', 'max_length', 'language']
        
        def __init__(self,
                     lowercase: bool = True,
                     remove_punctuation: bool = False,
                     remove_numbers: bool = False,
                     remove_urls: bool = True,
                     remove_emails: bool = True,
                     max_length: int = 512,
                     language: str = "en"):
            super(PreprocessRequest.Config, self).__init__()
            self.lowercase = lowercase
            self.remove_punctuation = remove_punctuation
            self.remove_numbers = remove_numbers
            self.remove_urls = remove_urls
            self.remove_emails = remove_emails
            self.max_length = max_length
            self.language = language
    
    __slots__ = ['dataset_id', 'operations', 'config', 'output_dataset_name']
    
    def __init__(self,
                 dataset_id: str = "",
                 operations: Optional[List[int]] = None,
                 config: Optional[Config] = None,
                 output_dataset_name: str = ""):
        super(PreprocessRequest, self).__init__()
        self.dataset_id = dataset_id
        if operations:
            self.operations.extend(operations)
        if config:
            self.config.CopyFrom(config)
        self.output_dataset_name = output_dataset_name


class PreprocessResponse(_message.Message):
    """
    Response for preprocessing request
    
    Attributes:
        dataset: Processed dataset information
        statistics: Processing statistics
        metadata: Response metadata
    """
    
    class Statistics(_message.Message):
        """Processing statistics"""
        __slots__ = ['samples_processed', 'samples_filtered', 'processing_time_ms',
                     'avg_text_length', 'vocabulary_size']
        
        def __init__(self,
                     samples_processed: int = 0,
                     samples_filtered: int = 0,
                     processing_time_ms: int = 0,
                     avg_text_length: float = 0.0,
                     vocabulary_size: int = 0):
            super(PreprocessResponse.Statistics, self).__init__()
            self.samples_processed = samples_processed
            self.samples_filtered = samples_filtered
            self.processing_time_ms = processing_time_ms
            self.avg_text_length = avg_text_length
            self.vocabulary_size = vocabulary_size
    
    __slots__ = ['dataset', 'statistics', 'metadata']
    
    def __init__(self,
                 dataset: Optional[Dataset] = None,
                 statistics: Optional[Statistics] = None,
                 metadata: Optional[types_pb2.ResponseMetadata] = None):
        super(PreprocessResponse, self).__init__()
        if dataset:
            self.dataset.CopyFrom(dataset)
        if statistics:
            self.statistics.CopyFrom(statistics)
        if metadata:
            self.metadata.CopyFrom(metadata)


class AugmentationRequest(_message.Message):
    """
    Request for data augmentation
    
    Attributes:
        dataset_id: Dataset to augment
        techniques: Augmentation techniques to apply
        config: Augmentation configuration
        output_dataset_name: Name for augmented dataset
    """
    
    class AugmentationTechnique:
        """Augmentation technique types"""
        NONE = 0
        BACK_TRANSLATION = 1
        PARAPHRASE = 2
        TOKEN_REPLACEMENT = 3
        MIXUP = 4
        CUTMIX = 5
        ADVERSARIAL = 6
        CONTRAST_SET = 7
    
    class Config(_message.Message):
        """Augmentation configuration"""
        __slots__ = ['augmentation_ratio', 'preserve_original', 'random_seed',
                     'back_translation_languages', 'paraphrase_model',
                     'replacement_probability']
        
        def __init__(self,
                     augmentation_ratio: float = 1.0,
                     preserve_original: bool = True,
                     random_seed: int = 42,
                     back_translation_languages: Optional[List[str]] = None,
                     paraphrase_model: str = "",
                     replacement_probability: float = 0.1):
            super(AugmentationRequest.Config, self).__init__()
            self.augmentation_ratio = augmentation_ratio
            self.preserve_original = preserve_original
            self.random_seed = random_seed
            if back_translation_languages:
                self.back_translation_languages.extend(back_translation_languages)
            self.paraphrase_model = paraphrase_model
            self.replacement_probability = replacement_probability
    
    __slots__ = ['dataset_id', 'techniques', 'config', 'output_dataset_name']
    
    def __init__(self,
                 dataset_id: str = "",
                 techniques: Optional[List[int]] = None,
                 config: Optional[Config] = None,
                 output_dataset_name: str = ""):
        super(AugmentationRequest, self).__init__()
        self.dataset_id = dataset_id
        if techniques:
            self.techniques.extend(techniques)
        if config:
            self.config.CopyFrom(config)
        self.output_dataset_name = output_dataset_name


class AugmentationResponse(_message.Message):
    """
    Response for augmentation request
    
    Attributes:
        dataset: Augmented dataset information
        statistics: Augmentation statistics
        metadata: Response metadata
    """
    
    class Statistics(_message.Message):
        """Augmentation statistics"""
        __slots__ = ['original_size', 'augmented_size', 'techniques_applied',
                     'processing_time_ms']
        
        def __init__(self,
                     original_size: int = 0,
                     augmented_size: int = 0,
                     techniques_applied: Optional[List[str]] = None,
                     processing_time_ms: int = 0):
            super(AugmentationResponse.Statistics, self).__init__()
            self.original_size = original_size
            self.augmented_size = augmented_size
            if techniques_applied:
                self.techniques_applied.extend(techniques_applied)
            self.processing_time_ms = processing_time_ms
    
    __slots__ = ['dataset', 'statistics', 'metadata']
    
    def __init__(self,
                 dataset: Optional[Dataset] = None,
                 statistics: Optional[Statistics] = None,
                 metadata: Optional[types_pb2.ResponseMetadata] = None):
        super(AugmentationResponse, self).__init__()
        if dataset:
            self.dataset.CopyFrom(dataset)
        if statistics:
            self.statistics.CopyFrom(statistics)
        if metadata:
            self.metadata.CopyFrom(metadata)


# Register message types
_sym_db.RegisterMessage(Dataset)
_sym_db.RegisterMessage(DataSample)
_sym_db.RegisterMessage(CreateDatasetRequest)
_sym_db.RegisterMessage(CreateDatasetResponse)
_sym_db.RegisterMessage(PreprocessRequest)
_sym_db.RegisterMessage(PreprocessResponse)
_sym_db.RegisterMessage(AugmentationRequest)
_sym_db.RegisterMessage(AugmentationResponse)
