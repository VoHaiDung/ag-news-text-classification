"""
Generated gRPC service code for Model Management Service
================================================================================
This file is automatically generated by the gRPC tools.
DO NOT EDIT MANUALLY - changes will be overwritten.

Generated from: src/api/grpc/protos/model_management.proto

Implements the gRPC service interface for model lifecycle management operations.
"""

import grpc
from typing import Iterator

from . import model_management_pb2 as model__management__pb2


class ModelManagementServiceStub(object):
    """
    Model Management Service Stub
    
    Client stub for accessing model management service methods.
    Provides operations for model CRUD, deployment, and versioning.
    """
    
    def __init__(self, channel: grpc.Channel):
        """
        Initialize the stub with a gRPC channel
        
        Args:
            channel: grpc.Channel instance for communication
        """
        self.GetModel = channel.unary_unary(
            '/agnews.model.v1.ModelManagementService/GetModel',
            request_serializer=model__management__pb2.GetModelRequest.SerializeToString,
            response_deserializer=model__management__pb2.GetModelResponse.FromString,
        )
        
        self.ListModels = channel.unary_unary(
            '/agnews.model.v1.ModelManagementService/ListModels',
            request_serializer=model__management__pb2.ListModelsRequest.SerializeToString,
            response_deserializer=model__management__pb2.ListModelsResponse.FromString,
        )
        
        self.DeployModel = channel.unary_unary(
            '/agnews.model.v1.ModelManagementService/DeployModel',
            request_serializer=model__management__pb2.DeployModelRequest.SerializeToString,
            response_deserializer=model__management__pb2.DeployModelResponse.FromString,
        )
        
        self.UpdateModel = channel.unary_unary(
            '/agnews.model.v1.ModelManagementService/UpdateModel',
            request_serializer=model__management__pb2.UpdateModelRequest.SerializeToString,
            response_deserializer=model__management__pb2.UpdateModelResponse.FromString,
        )
        
        self.DeleteModel = channel.unary_unary(
            '/agnews.model.v1.ModelManagementService/DeleteModel',
            request_serializer=model__management__pb2.DeleteModelRequest.SerializeToString,
            response_deserializer=model__management__pb2.DeleteModelResponse.FromString,
        )
        
        self.WatchModel = channel.unary_stream(
            '/agnews.model.v1.ModelManagementService/WatchModel',
            request_serializer=model__management__pb2.GetModelRequest.SerializeToString,
            response_deserializer=model__management__pb2.ModelInfo.FromString,
        )


class ModelManagementServiceServicer(object):
    """
    Model Management Service Interface
    
    Abstract base class for model management service implementation.
    Defines the service methods that must be implemented by the server.
    """
    
    def GetModel(self, request: model__management__pb2.GetModelRequest, 
                 context: grpc.ServicerContext) -> model__management__pb2.GetModelResponse:
        """
        Get model information
        
        Args:
            request: GetModelRequest message
            context: grpc.ServicerContext
            
        Returns:
            GetModelResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def ListModels(self, request: model__management__pb2.ListModelsRequest,
                   context: grpc.ServicerContext) -> model__management__pb2.ListModelsResponse:
        """
        List available models
        
        Args:
            request: ListModelsRequest message
            context: grpc.ServicerContext
            
        Returns:
            ListModelsResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def DeployModel(self, request: model__management__pb2.DeployModelRequest,
                    context: grpc.ServicerContext) -> model__management__pb2.DeployModelResponse:
        """
        Deploy a model to an environment
        
        Args:
            request: DeployModelRequest message
            context: grpc.ServicerContext
            
        Returns:
            DeployModelResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def UpdateModel(self, request: model__management__pb2.UpdateModelRequest,
                    context: grpc.ServicerContext) -> model__management__pb2.UpdateModelResponse:
        """
        Update model information
        
        Args:
            request: UpdateModelRequest message
            context: grpc.ServicerContext
            
        Returns:
            UpdateModelResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def DeleteModel(self, request: model__management__pb2.DeleteModelRequest,
                    context: grpc.ServicerContext) -> model__management__pb2.DeleteModelResponse:
        """
        Delete a model
        
        Args:
            request: DeleteModelRequest message
            context: grpc.ServicerContext
            
        Returns:
            DeleteModelResponse message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')
    
    def WatchModel(self, request: model__management__pb2.GetModelRequest,
                   context: grpc.ServicerContext) -> Iterator[model__management__pb2.ModelInfo]:
        """
        Watch model changes (streaming)
        
        Args:
            request: GetModelRequest message
            context: grpc.ServicerContext
            
        Yields:
            ModelInfo messages with updates
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelManagementServiceServicer_to_server(servicer: ModelManagementServiceServicer, 
                                                 server: grpc.Server):
    """
    Register ModelManagementService with gRPC server
    
    Args:
        servicer: ModelManagementServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'GetModel': grpc.unary_unary_rpc_method_handler(
            servicer.GetModel,
            request_deserializer=model__management__pb2.GetModelRequest.FromString,
            response_serializer=model__management__pb2.GetModelResponse.SerializeToString,
        ),
        'ListModels': grpc.unary_unary_rpc_method_handler(
            servicer.ListModels,
            request_deserializer=model__management__pb2.ListModelsRequest.FromString,
            response_serializer=model__management__pb2.ListModelsResponse.SerializeToString,
        ),
        'DeployModel': grpc.unary_unary_rpc_method_handler(
            servicer.DeployModel,
            request_deserializer=model__management__pb2.DeployModelRequest.FromString,
            response_serializer=model__management__pb2.DeployModelResponse.SerializeToString,
        ),
        'UpdateModel': grpc.unary_unary_rpc_method_handler(
            servicer.UpdateModel,
            request_deserializer=model__management__pb2.UpdateModelRequest.FromString,
            response_serializer=model__management__pb2.UpdateModelResponse.SerializeToString,
        ),
        'DeleteModel': grpc.unary_unary_rpc_method_handler(
            servicer.DeleteModel,
            request_deserializer=model__management__pb2.DeleteModelRequest.FromString,
            response_serializer=model__management__pb2.DeleteModelResponse.SerializeToString,
        ),
        'WatchModel': grpc.unary_stream_rpc_method_handler(
            servicer.WatchModel,
            request_deserializer=model__management__pb2.GetModelRequest.FromString,
            response_serializer=model__management__pb2.ModelInfo.SerializeToString,
        ),
    }
    
    generic_handler = grpc.method_handlers_generic_handler(
        'agnews.model.v1.ModelManagementService',
        rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


class ModelManagementService(object):
    """Model Management Service descriptor for reflection and direct calls"""
    
    @staticmethod
    def GetModel(request: model__management__pb2.GetModelRequest,
                 target: str,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None) -> model__management__pb2.GetModelResponse:
        """Static method for direct GetModel RPC calls"""
        return grpc.experimental.unary_unary(
            request, target,
            '/agnews.model.v1.ModelManagementService/GetModel',
            model__management__pb2.GetModelRequest.SerializeToString,
            model__management__pb2.GetModelResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
    
    @staticmethod
    def ListModels(request: model__management__pb2.ListModelsRequest,
                   target: str,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None) -> model__management__pb2.ListModelsResponse:
        """Static method for direct ListModels RPC calls"""
        return grpc.experimental.unary_unary(
            request, target,
            '/agnews.model.v1.ModelManagementService/ListModels',
            model__management__pb2.ListModelsRequest.SerializeToString,
            model__management__pb2.ListModelsResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
    
    @staticmethod
    def DeployModel(request: model__management__pb2.DeployModelRequest,
                    target: str,
                    options=(),
                    channel_credentials=None,
                    call_credentials=None,
                    insecure=False,
                    compression=None,
                    wait_for_ready=None,
                    timeout=None,
                    metadata=None) -> model__management__pb2.DeployModelResponse:
        """Static method for direct DeployModel RPC calls"""
        return grpc.experimental.unary_unary(
            request, target,
            '/agnews.model.v1.ModelManagementService/DeployModel',
            model__management__pb2.DeployModelRequest.SerializeToString,
            model__management__pb2.DeployModelResponse.FromString,
            options, channel_credentials, insecure, call_credentials,
            compression, wait_for_ready, timeout, metadata
        )
