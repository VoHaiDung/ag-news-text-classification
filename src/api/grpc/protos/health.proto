syntax = "proto3";

package ag_news;

import "common/status.proto";
import "google/protobuf/timestamp.proto";

// Health service definition following gRPC health checking protocol
service Health {
    // Standard health check
    rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
    
    // Watch for health status changes
    rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
    
    // Get detailed health information
    rpc GetHealthDetails(HealthDetailsRequest) returns (HealthDetailsResponse);
}

// Health check request
message HealthCheckRequest {
    string service = 1;  // Empty for overall health
}

// Health check response
message HealthCheckResponse {
    enum ServingStatus {
        UNKNOWN = 0;
        SERVING = 1;
        NOT_SERVING = 2;
        SERVICE_UNKNOWN = 3;
    }
    ServingStatus status = 1;
    string message = 2;
}

// Health details request
message HealthDetailsRequest {
    repeated string services = 1;
    bool include_metrics = 2;
}

// Health details response
message HealthDetailsResponse {
    OverallHealth overall = 1;
    repeated ServiceHealth services = 2;
    SystemHealth system = 3;
    google.protobuf.Timestamp timestamp = 4;
}

// Overall health status
message OverallHealth {
    string status = 1;  // healthy, degraded, unhealthy
    float health_score = 2;  // 0-100
    int64 uptime_seconds = 3;
    string version = 4;
}

// Service health information
message ServiceHealth {
    string name = 1;
    string status = 2;
    float response_time_ms = 3;
    int32 active_connections = 4;
    int64 requests_handled = 5;
    int64 errors_count = 6;
    google.protobuf.Timestamp last_check = 7;
}

// System health metrics
message SystemHealth {
    float cpu_usage_percent = 1;
    float memory_usage_percent = 2;
    float disk_usage_percent = 3;
    int64 memory_available_mb = 4;
    int64 disk_available_gb = 5;
    int32 active_threads = 6;
    int32 open_file_descriptors = 7;
}
