syntax = "proto3";

package ag_news;

import "common/types.proto";
import "common/status.proto";
import "google/protobuf/timestamp.proto";

// Training service definition
service TrainingService {
    // Start a new training job
    rpc StartTraining(StartTrainingRequest) returns (StartTrainingResponse);
    
    // Stop a running training job
    rpc StopTraining(StopTrainingRequest) returns (StopTrainingResponse);
    
    // Get training job status
    rpc GetTrainingStatus(GetTrainingStatusRequest) returns (GetTrainingStatusResponse);
    
    // Stream training progress
    rpc StreamTrainingProgress(StreamProgressRequest) returns (stream TrainingProgress);
    
    // List training jobs
    rpc ListTrainingJobs(ListTrainingJobsRequest) returns (ListTrainingJobsResponse);
    
    // Get training logs
    rpc GetTrainingLogs(GetTrainingLogsRequest) returns (GetTrainingLogsResponse);
}

// Training status enumeration
enum TrainingStatus {
    UNKNOWN = 0;
    PENDING = 1;
    RUNNING = 2;
    COMPLETED = 3;
    FAILED = 4;
    STOPPED = 5;
}

// Start training request
message StartTrainingRequest {
    string model_type = 1;
    string dataset_id = 2;
    int32 epochs = 3;
    int32 batch_size = 4;
    float learning_rate = 5;
    float validation_split = 6;
    bool early_stopping = 7;
    int32 checkpoint_interval = 8;
    OptimizerConfig optimizer_config = 9;
    SchedulerConfig scheduler_config = 10;
    map<string, string> hyperparameters = 11;
}

// Optimizer configuration
message OptimizerConfig {
    string type = 1;  // adamw, sgd, lamb, etc.
    map<string, float> parameters = 2;
}

// Scheduler configuration
message SchedulerConfig {
    string type = 1;  // cosine, linear, polynomial, etc.
    map<string, float> parameters = 2;
}

// Start training response
message StartTrainingResponse {
    TrainingJob job = 1;
    common.Status status = 2;
}

// Training job information
message TrainingJob {
    string job_id = 1;
    TrainingStatus status = 2;
    string model_type = 3;
    string dataset_id = 4;
    int32 epochs = 5;
    int32 current_epoch = 6;
    int64 started_at = 7;
    int64 completed_at = 8;
    float current_loss = 9;
    float best_validation_score = 10;
    map<string, float> metrics = 11;
    string error_message = 12;
}

// Stop training request
message StopTrainingRequest {
    string job_id = 1;
    bool save_checkpoint = 2;
}

// Stop training response
message StopTrainingResponse {
    bool success = 1;
    string message = 2;
    common.Status status = 3;
}

// Get training status request
message GetTrainingStatusRequest {
    string job_id = 1;
}

// Get training status response
message GetTrainingStatusResponse {
    TrainingJob job = 1;
    common.Status status = 2;
}

// Stream progress request
message StreamProgressRequest {
    string job_id = 1;
    float update_interval = 2;  // seconds
}

// Training progress update
message TrainingProgress {
    string job_id = 1;
    int32 current_epoch = 2;
    int32 total_epochs = 3;
    int32 current_step = 4;
    int32 total_steps = 5;
    float current_loss = 6;
    float learning_rate = 7;
    map<string, float> metrics = 8;
    int32 eta_seconds = 9;
    int64 timestamp = 10;
}

// List training jobs request
message ListTrainingJobsRequest {
    TrainingStatus status = 1;
    string model_type = 2;
    int32 limit = 3;
    int32 offset = 4;
}

// List training jobs response
message ListTrainingJobsResponse {
    repeated TrainingJob jobs = 1;
    int32 total_count = 2;
    common.Status status = 3;
}

// Get training logs request
message GetTrainingLogsRequest {
    string job_id = 1;
    int32 lines = 2;
    string log_level = 3;  // DEBUG, INFO, WARNING, ERROR
}

// Get training logs response
message GetTrainingLogsResponse {
    repeated LogEntry logs = 1;
    common.Status status = 2;
}

// Log entry
message LogEntry {
    int64 timestamp = 1;
    string level = 2;
    string message = 3;
}
