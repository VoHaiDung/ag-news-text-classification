syntax = "proto3";

package ag_news;

import "common/types.proto";
import "common/status.proto";

// Classification service definition
service ClassificationService {
    // Classify single text
    rpc Classify(ClassifyRequest) returns (ClassifyResponse);
    
    // Classify batch of texts
    rpc ClassifyBatch(ClassifyBatchRequest) returns (ClassifyBatchResponse);
    
    // Stream classification for multiple texts
    rpc ClassifyStream(stream ClassifyRequest) returns (stream ClassifyResponse);
    
    // Get model information
    rpc GetModelInfo(ModelInfoRequest) returns (ModelInfoResponse);
}

// Classification request message
message ClassifyRequest {
    string text = 1;
    string model_type = 2;
    bool return_probabilities = 3;
    bool return_explanations = 4;
    int32 top_k = 5;
}

// Classification response message
message ClassifyResponse {
    Prediction prediction = 1;
    common.Status status = 2;
}

// Batch classification request
message ClassifyBatchRequest {
    repeated string texts = 1;
    string model_type = 2;
    bool return_probabilities = 3;
    int32 batch_size = 4;
}

// Batch classification response
message ClassifyBatchResponse {
    repeated Prediction predictions = 1;
    int32 total_processed = 2;
    int32 successful = 3;
    int32 failed = 4;
    float average_confidence = 5;
    float total_time_ms = 6;
    repeated int32 failed_indices = 7;
    common.Status status = 8;
}

// Prediction message
message Prediction {
    string label = 1;
    float confidence = 2;
    string model_type = 3;
    float processing_time_ms = 4;
    repeated ClassProbability probabilities = 5;
    Explanation explanation = 6;
}

// Class probability
message ClassProbability {
    string label = 1;
    float probability = 2;
}

// Explanation message
message Explanation {
    map<string, float> attention_weights = 1;
    map<string, float> feature_importance = 2;
    repeated string important_phrases = 3;
}

// Model info request
message ModelInfoRequest {
    string model_type = 1;
}

// Model info response
message ModelInfoResponse {
    repeated ModelInfo models = 1;
    common.Status status = 2;
}

// Model information
message ModelInfo {
    string name = 1;
    string type = 2;
    string version = 3;
    bool is_loaded = 4;
    map<string, float> metrics = 5;
}
