# ============================================================================
# Pre-commit Configuration for AG News Text Classification
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Git hooks for automated code quality checks
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# ============================================================================
# This configuration runs automated checks before each commit to ensure:
# - Code formatting consistency (black, isort)
# - Code quality (flake8, pylint)
# - Type safety (mypy)
# - Security (bandit)
# - File integrity (trailing whitespace, line endings)
# - YAML/JSON validity
# - Commit message format (commitlint)
# - No large files
# - No secrets
#
# Installation:
#   pre-commit install
#   pre-commit install --hook-type commit-msg
#
# Run manually:
#   pre-commit run --all-files
#
# Update hooks:
#   pre-commit autoupdate
#
# Skip hooks (not recommended):
#   git commit --no-verify
#
# For more information:
# - https://pre-commit.com/
# - https://pre-commit.com/hooks.html
# ============================================================================

# Minimum pre-commit version
minimum_pre_commit_version: '3.0.0'

# Default configuration
default_install_hook_types: [pre-commit, commit-msg]
default_stages: [commit, push]

# Fail fast on first error
fail_fast: false

# ============================================================================
# Hook Repositories
# ============================================================================

repos:
  # ==========================================================================
  # General File Checks
  # ==========================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # Remove trailing whitespace
      - id: trailing-whitespace
        name: Remove trailing whitespace
        args: [--markdown-linebreak-ext=md]
        exclude: ^(.*\.lock|.*\.svg)$
      
      # Ensure files end with newline
      - id: end-of-file-fixer
        name: Fix end of files
        exclude: ^(.*\.lock)$
      
      # Check YAML syntax
      - id: check-yaml
        name: Check YAML syntax
        args: [--safe, --allow-multiple-documents]
        exclude: ^(templates/.*\.yaml\.j2)$
      
      # Check JSON syntax
      - id: check-json
        name: Check JSON syntax
      
      # Check TOML syntax
      - id: check-toml
        name: Check TOML syntax
      
      # Prevent large files
      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=10000']  # 10MB limit
        exclude: ^(data/|outputs/|notebooks/.*\.ipynb)$
      
      # Check for merge conflict markers
      - id: check-merge-conflict
        name: Check for merge conflicts
      
      # Check for case conflicts
      - id: check-case-conflict
        name: Check for case conflicts
      
      # Detect private keys
      - id: detect-private-key
        name: Detect private keys
      
      # Check Python syntax
      - id: check-ast
        name: Check Python AST
      
      # Check for debugger imports
      - id: debug-statements
        name: Check for debugger statements
      
      # Check docstring first
      - id: check-docstring-first
        name: Check docstring is first
      
      # Fix mixed line endings
      - id: mixed-line-ending
        name: Fix mixed line endings
        args: [--fix=lf]
      
      # Check executables have shebangs
      - id: check-executables-have-shebangs
        name: Check executables have shebangs
      
      # Check shebangs for non-executables
      - id: check-shebang-scripts-are-executable
        name: Check shebang scripts are executable
      
      # Sort requirements files
      - id: requirements-txt-fixer
        name: Sort requirements.txt
        files: requirements.*\.txt$

  # ==========================================================================
  # Python Code Formatting
  # ==========================================================================
  
  # Black - Code formatter
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format code with black
        language_version: python3.10
        args: 
          - --line-length=100
          - --target-version=py310
        exclude: ^(migrations/|experiments/baselines/)
  
  # isort - Import sorter
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort imports with isort
        args:
          - --profile=black
          - --line-length=100
          - --multi-line=3
          - --trailing-comma
        exclude: ^(migrations/)

  # ==========================================================================
  # Python Code Quality
  # ==========================================================================
  
  # Flake8 - Style guide enforcement
  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        name: Check code with flake8
        args:
          - --max-line-length=100
          - --extend-ignore=E203,E501,W503
          - --max-complexity=10
        exclude: ^(tests/|experiments/|notebooks/)
        additional_dependencies:
          - flake8-docstrings
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
  
  # Pylint - Code analysis
  - repo: https://github.com/PyCQA/pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        name: Analyze code with pylint
        args:
          - --max-line-length=100
          - --disable=C0111,C0103,R0913,R0914,W0212
        exclude: ^(tests/|experiments/|setup.py)
        additional_dependencies:
          - torch
          - transformers
  
  # Ruff - Fast Python linter
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.11
    hooks:
      - id: ruff
        name: Lint with ruff
        args:
          - --fix
          - --line-length=100
        exclude: ^(migrations/)

  # ==========================================================================
  # Type Checking
  # ==========================================================================
  
  # MyPy - Static type checker
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        name: Check types with mypy
        args:
          - --python-version=3.10
          - --ignore-missing-imports
          - --warn-redundant-casts
          - --warn-unused-ignores
        exclude: ^(tests/|experiments/|setup.py)
        additional_dependencies:
          - types-requests
          - types-PyYAML

  # ==========================================================================
  # Security
  # ==========================================================================
  
  # Bandit - Security linter
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.6
    hooks:
      - id: bandit
        name: Check security with bandit
        args:
          - -r
          - src/
          - -ll
          - -i
        exclude: ^(tests/|experiments/)
  
  # Safety - Dependency vulnerability scanner
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.3
    hooks:
      - id: python-safety-dependencies-check
        name: Check dependencies for vulnerabilities
        files: requirements.*\.txt$

  # ==========================================================================
  # Secrets Detection
  # ==========================================================================
  
  # Detect-secrets - Find secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args:
          - --baseline
          - .secrets.baseline
        exclude: ^(poetry\.lock|package-lock\.json|\.gitignore)$

  # ==========================================================================
  # YAML Linting
  # ==========================================================================
  
  # yamllint - YAML linter
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        name: Lint YAML files
        args:
          - --strict
          - --config-data
          - "{extends: default, rules: {line-length: {max: 120}, document-start: disable}}"
        exclude: ^(templates/.*\.yaml\.j2|\.github/)

  # ==========================================================================
  # Markdown
  # ==========================================================================
  
  # markdownlint - Markdown linter
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args:
          - --fix
          - --disable
          - MD013
          - MD033
          - MD041
        exclude: ^(CHANGELOG\.md|node_modules/)

  # ==========================================================================
  # Jupyter Notebooks
  # ==========================================================================
  
  # nbstripout - Strip Jupyter notebook outputs
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout
        name: Strip Jupyter notebook outputs
        args:
          - --extra-keys
          - metadata.kernelspec metadata.language_info
  
  # nbqa - Run code quality tools on notebooks
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.7.1
    hooks:
      - id: nbqa-black
        name: Format notebooks with black
        args: [--line-length=100]
      
      - id: nbqa-isort
        name: Sort notebook imports
        args: [--profile=black]
      
      - id: nbqa-flake8
        name: Lint notebooks with flake8
        args: [--max-line-length=100, --extend-ignore=E402]

  # ==========================================================================
  # Documentation
  # ==========================================================================
  
  # docformatter - Format docstrings
  - repo: https://github.com/PyCQA/docformatter
    rev: v1.7.5
    hooks:
      - id: docformatter
        name: Format docstrings
        args:
          - --in-place
          - --wrap-summaries=100
          - --wrap-descriptions=100

  # ==========================================================================
  # Commit Message
  # ==========================================================================
  
  # Commitlint - Enforce commit message format
  - repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook
    rev: v9.11.0
    hooks:
      - id: commitlint
        name: Check commit message format
        stages: [commit-msg]
        additional_dependencies:
          - '@commitlint/config-conventional'

  # ==========================================================================
  # File Size and Name Checks
  # ==========================================================================
  
  # Check for files with names that would conflict on case-insensitive FS
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-case-conflict
        name: Check for case conflicts

  # ==========================================================================
  # Custom Local Hooks
  # ==========================================================================
  
  - repo: local
    hooks:
      # Check for print statements in src/
      - id: no-print-statements
        name: Check for print statements
        entry: grep -rn "print(" src/ && exit 1 || exit 0
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]
        verbose: true
      
      # Check for TODO/FIXME without issue reference
      - id: check-todos
        name: Check TODO/FIXME have issue reference
        entry: bash -c 'grep -rn "TODO\|FIXME" src/ | grep -v "#[0-9]" && exit 1 || exit 0'
        language: system
        pass_filenames: false
        always_run: true
        stages: [commit]
        verbose: true
      
      # Validate Python imports
      - id: check-imports
        name: Check Python imports
        entry: python -m py_compile
        language: system
        types: [python]
        exclude: ^(setup\.py|conftest\.py)
      
      # Check config files are valid
      - id: validate-configs
        name: Validate configuration files
        entry: python tools/config_tools/validate_all_configs.py
        language: system
        pass_filenames: false
        files: ^configs/.*\.yaml$
        verbose: true
      
      # Check requirements files are sorted
      - id: sort-requirements
        name: Sort requirements files
        entry: bash -c 'for f in requirements/*.txt; do sort -u "$f" -o "$f"; done'
        language: system
        pass_filenames: false
        files: ^requirements/.*\.txt$

# ============================================================================
# CI Configuration
# ============================================================================
ci:
  autofix_commit_msg: |
    style: auto-fixes from pre-commit hooks
    
    Applied automatic fixes from pre-commit hooks
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: 'chore(deps): update pre-commit hooks'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# ============================================================================
# Notes
# ============================================================================
# Performance Tips:
# - Use fail_fast: true to stop on first error
# - Exclude large directories (data/, outputs/)
# - Use language_version to avoid environment issues
#
# Debugging:
# - Run specific hook: pre-commit run <hook-id> --all-files
# - Verbose output: pre-commit run --verbose
# - Show hook output: pre-commit run --show-diff-on-failure
#
# Customization:
# - Add exclude patterns to skip specific files
# - Adjust args for each hook
# - Add project-specific local hooks
# ============================================================================
