# ============================================================================
# Documentation Synchronization and Consistency Validation Pipeline
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Comprehensive documentation synchronization checker ensuring
#              consistency across all documentation files, code examples,
#              configurations, and multi-platform setup guides
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# ============================================================================
#
# Academic Rationale:
#   This documentation synchronization pipeline implements principles from:
#   - "Documentation as Code" (Write the Docs community)
#   - "Literate Programming" (Knuth, 1984)
#   - "Software Documentation Best Practices" (IEEE Std 1063-2001)
#   - "Technical Writing for Software Documentation" (Kaplan, 2013)
#
# Documentation Synchronization Philosophy:
#   1. Single Source of Truth: Avoid documentation duplication
#   2. Automated Validation: Machines check, humans create
#   3. Cross-Reference Integrity: All links must be valid
#   4. Code-Documentation Alignment: Examples must match implementation
#   5. Version Consistency: All components reference same versions
#   6. Multi-Platform Accuracy: Platform-specific docs stay synchronized
#   7. Configuration Synchronization: Configs match documentation
#   8. IDE Setup Consistency: All IDE guides reference same setup
#
# Documentation Architecture for AG News Text Classification:
#   
#   Root-Level Documentation (Single Source of Truth):
#     - README.md: Project overview and quick start
#     - QUICK_START.md: Getting started guide
#     - ARCHITECTURE.md: System design and architecture
#     - PERFORMANCE.md: Benchmark results and metrics
#     - OVERFITTING_PREVENTION.md: Anti-overfitting system
#     - SOTA_MODELS_GUIDE.md: State-of-the-art model selection
#     - PLATFORM_OPTIMIZATION_GUIDE.md: Platform-specific optimization
#     - IDE_SETUP_GUIDE.md: Development environment setup
#     - FREE_DEPLOYMENT_GUIDE.md: Free deployment options
#     - LOCAL_MONITORING_GUIDE.md: Local monitoring setup
#     - TROUBLESHOOTING.md: Common issues and solutions
#     - HEALTH_CHECK.md: System health verification
#     - SECURITY.md: Security considerations
#     - ROADMAP.md: Project roadmap
#     - CHANGELOG.md: Version history
#   
#   docs/ Directory (Structured Documentation):
#     - getting_started/: Installation and setup guides
#     - level_1_beginner/: Beginner-friendly tutorials
#     - level_2_intermediate/: Intermediate topics
#     - level_3_advanced/: Advanced techniques
#     - user_guide/: Comprehensive usage instructions
#     - developer_guide/: Development guidelines
#     - api_reference/: API documentation
#     - platform_guides/: Platform-specific guides (Colab, Kaggle, Local)
#     - ide_guides/: IDE setup instructions (VS Code, PyCharm, Jupyter, etc.)
#     - tutorials/: Step-by-step tutorials
#     - best_practices/: Recommendations and guidelines
#     - architecture/: Architecture decision records
#     - troubleshooting/: Problem resolution guides
#     - examples/: Code examples
#     - cheatsheets/: Quick reference guides
#   
#   Configuration Documentation:
#     - configs/models/: Model configuration files with inline documentation
#     - configs/training/: Training configuration files
#     - configs/templates/: Configuration templates with Jinja2
#     - .ide/SOURCE_OF_TRUTH.yaml: Central IDE configuration source
#   
#   Notebook Documentation:
#     - notebooks/00_setup/: Platform-specific setup notebooks
#     - notebooks/01_tutorials/: Tutorial notebooks
#     - notebooks/02_exploratory/: Exploratory analysis
#     - notebooks/03_experiments/: Experiment notebooks
#
# Synchronization Challenges:
#   1. Documentation Drift: Docs become outdated as code evolves
#   2. Cross-Reference Rot: Internal links break as files move
#   3. Example Obsolescence: Code examples don't match current API
#   4. Version Mismatches: Different docs reference different versions
#   5. Platform Inconsistency: Platform guides diverge over time
#   6. IDE Config Drift: IDE setups become inconsistent
#   7. Duplicate Information: Same info in multiple places
#   8. Config-Docs Gap: Configurations don't match documentation
#
# Synchronization Checks:
#   1. Structural Consistency
#      - All required documentation files exist
#      - Directory structure matches specification
#      - File naming conventions followed
#   
#   2. Cross-Reference Validation
#      - All internal links point to existing files
#      - All cross-references are bidirectional where appropriate
#      - No broken anchor links
#   
#   3. Code Example Validation
#      - All code examples are syntactically correct
#      - Examples match current API signatures
#      - Import statements are valid
#      - File paths referenced in examples exist
#   
#   4. Version Consistency
#      - All docs reference same package versions
#      - Model configs match documentation
#      - Dependency versions aligned
#   
#   5. Configuration Synchronization
#      - Model configs match model documentation
#      - Training configs match training guides
#      - IDE configs match IDE setup guides
#      - Platform configs match platform guides
#   
#   6. Platform-Specific Consistency
#      - Colab guides consistent across notebooks and docs
#      - Kaggle guides synchronized
#      - Local setup guides aligned
#      - Free deployment options documented consistently
#   
#   7. IDE Configuration Consistency
#      - SOURCE_OF_TRUTH.yaml is canonical
#      - All IDE configs derived from source of truth
#      - VS Code, PyCharm, Jupyter configs synchronized
#      - Vim, Neovim, Sublime configs aligned
#   
#   8. Documentation Coverage
#      - All public APIs documented
#      - All configuration options explained
#      - All features have user guides
#      - All platforms have setup guides
#
# Quality Metrics:
#   - Documentation coverage: > 90% of public APIs
#   - Link validity: 100% internal links working
#   - Example correctness: 100% examples executable
#   - Sync score: > 95% consistency across docs
#   - Freshness: Last updated < 30 days ago
#
# Academic Standards:
#   Following IEEE 1063 standard for software user documentation:
#   - Completeness: All necessary information provided
#   - Correctness: Information is accurate and up-to-date
#   - Consistency: Terminology and style are uniform
#   - Clarity: Information is easy to understand
#   - Organization: Logical structure and navigation
#   - Accessibility: Available in multiple formats
#
# References:
#   - IEEE Std 1063-2001: Software User Documentation
#   - "Docs Like Code" (Anne Gentle, 2017)
#   - "The Product is Docs" (Christopher Gales, 2020)
#   - Write the Docs: https://www.writethedocs.org/
#
# ============================================================================

name: Documentation Synchronization Check

# ============================================================================
# Trigger Configuration
# ============================================================================
# Academic Justification:
#   Documentation sync checks run on all documentation changes and
#   configuration updates to ensure consistency

on:
  push:
    branches:
      - main
      - develop
  
  pull_request:
    branches:
      - main
      - develop
  
  workflow_dispatch:
    inputs:
      check_level:
        description: 'Level of synchronization checks'
        required: true
        default: 'standard'
        type: choice
        options:
          - 'basic'
          - 'standard'
          - 'comprehensive'
          - 'strict'
      
      validate_code_examples:
        description: 'Validate code examples in documentation'
        required: false
        default: true
        type: boolean
      
      check_cross_references:
        description: 'Check all cross-references'
        required: false
        default: true
        type: boolean
      
      validate_ide_sync:
        description: 'Validate IDE configuration synchronization'
        required: false
        default: true
        type: boolean
      
      check_platform_docs:
        description: 'Check platform-specific documentation'
        required: false
        default: true
        type: boolean
  
  schedule:
    - cron: '0 5 * * 1'

# ============================================================================
# Global Environment Variables
# ============================================================================
# Academic Justification:
#   Centralized configuration for documentation validation thresholds

env:
  PYTHON_VERSION: '3.10'
  
  PROJECT_NAME: 'AG News Text Classification'
  PROJECT_SLUG: 'ag-news-text-classification'
  PROJECT_AUTHOR: 'Võ Hải Dũng'
  PROJECT_EMAIL: 'vohaidung.work@gmail.com'
  PROJECT_LICENSE: 'MIT'
  
  MIN_DOC_COVERAGE: '90'
  MAX_BROKEN_LINKS: '0'
  
  FORCE_COLOR: '1'
  PYTHONUNBUFFERED: '1'

# ============================================================================
# Concurrency Control
# ============================================================================

concurrency:
  group: docs-sync-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ============================================================================
# Jobs Definition
# ============================================================================

jobs:
  # ==========================================================================
  # Job 1: Documentation Structure Validation
  # ==========================================================================
  # Academic Justification:
  #   Validates that all required documentation files exist and follow
  #   the documented structure specification

  validate-structure:
    name: Validate Documentation Structure
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      structure-valid: ${{ steps.validate.outputs.valid }}
      check-level: ${{ steps.determine-level.outputs.level }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Determine check level
        id: determine-level
        run: |
          LEVEL="${{ github.event.inputs.check_level }}"
          if [ -z "$LEVEL" ]; then
            LEVEL="standard"
          fi
          
          echo "level=$LEVEL" >> $GITHUB_OUTPUT
          echo "Running documentation sync checks at level: $LEVEL"
      
      - name: Validate root-level documentation
        run: |
          echo "Validating root-level documentation files..."
          echo ""
          echo "Following project structure specification for AG News Text Classification"
          echo ""
          
          REQUIRED_DOCS=(
            "README.md"
            "LICENSE"
            "CITATION.cff"
            "CHANGELOG.md"
            "ARCHITECTURE.md"
            "PERFORMANCE.md"
            "SECURITY.md"
            "TROUBLESHOOTING.md"
            "SOTA_MODELS_GUIDE.md"
            "OVERFITTING_PREVENTION.md"
            "ROADMAP.md"
            "FREE_DEPLOYMENT_GUIDE.md"
            "PLATFORM_OPTIMIZATION_GUIDE.md"
            "IDE_SETUP_GUIDE.md"
            "LOCAL_MONITORING_GUIDE.md"
            "QUICK_START.md"
            "HEALTH_CHECK.md"
          )
          
          missing_count=0
          found_count=0
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "MISSING: $doc"
              missing_count=$((missing_count + 1))
            else
              echo "FOUND: $doc"
              found_count=$((found_count + 1))
            fi
          done
          
          echo ""
          echo "Documentation files: $found_count found, $missing_count missing"
          
          if [ $missing_count -gt 0 ]; then
            echo ""
            echo "WARNING: Some required documentation files are missing"
            echo "These files should be created for complete documentation"
          fi
      
      - name: Validate docs directory structure
        run: |
          echo "Validating docs/ directory structure..."
          echo ""
          
          REQUIRED_DIRS=(
            "docs"
            "docs/getting_started"
            "docs/level_1_beginner"
            "docs/level_2_intermediate"
            "docs/level_3_advanced"
            "docs/user_guide"
            "docs/developer_guide"
            "docs/api_reference"
            "docs/platform_guides"
            "docs/ide_guides"
            "docs/tutorials"
            "docs/best_practices"
            "docs/architecture"
            "docs/architecture/decisions"
            "docs/architecture/diagrams"
            "docs/troubleshooting"
            "docs/examples"
            "docs/cheatsheets"
            "docs/_static"
          )
          
          missing_dirs=0
          
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "MISSING: $dir"
              missing_dirs=$((missing_dirs + 1))
            else
              echo "FOUND: $dir"
            fi
          done
          
          echo ""
          if [ $missing_dirs -eq 0 ]; then
            echo "All required directories present"
          else
            echo "WARNING: $missing_dirs directories missing"
          fi
      
      - name: Validate IDE configuration structure
        run: |
          echo "Validating IDE configuration structure..."
          echo ""
          
          IDE_DIRS=(
            ".ide"
            ".ide/vscode"
            ".ide/pycharm"
            ".ide/jupyter"
            ".ide/vim"
            ".ide/neovim"
            ".ide/sublime"
            ".ide/cloud_ides/colab"
            ".ide/cloud_ides/kaggle"
            ".ide/cloud_ides/gitpod"
          )
          
          for dir in "${IDE_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "FOUND: $dir"
            else
              echo "MISSING: $dir"
            fi
          done
          
          if [ -f ".ide/SOURCE_OF_TRUTH.yaml" ]; then
            echo ""
            echo "SOURCE_OF_TRUTH.yaml: FOUND"
            echo "This is the canonical source for IDE configurations"
          else
            echo ""
            echo "WARNING: SOURCE_OF_TRUTH.yaml not found"
          fi
      
      - name: Validate configuration documentation
        run: |
          echo "Validating configuration documentation..."
          echo ""
          
          CONFIG_DIRS=(
            "configs/models"
            "configs/training"
            "configs/templates"
            "configs/overfitting_prevention"
          )
          
          for dir in "${CONFIG_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "FOUND: $dir"
              
              readme="${dir}/README.md"
              if [ -f "$readme" ]; then
                echo "  Documentation: $readme exists"
              else
                echo "  WARNING: No README.md in $dir"
              fi
            fi
          done
      
      - name: Validate notebook documentation
        run: |
          echo "Validating notebook documentation..."
          echo ""
          
          NOTEBOOK_DIRS=(
            "notebooks/00_setup"
            "notebooks/01_tutorials"
            "notebooks/02_exploratory"
            "notebooks/03_experiments"
            "notebooks/04_analysis"
            "notebooks/05_deployment"
            "notebooks/06_platform_specific"
          )
          
          notebook_count=0
          
          for dir in "${NOTEBOOK_DIRS[@]}"; do
            if [ -d "$dir" ]; then
              echo "FOUND: $dir"
              count=$(find "$dir" -name "*.ipynb" | wc -l)
              echo "  Notebooks: $count"
              notebook_count=$((notebook_count + count))
            fi
          done
          
          echo ""
          echo "Total notebooks found: $notebook_count"
      
      - name: Set validation output
        id: validate
        run: |
          echo "valid=true" >> $GITHUB_OUTPUT

  # ==========================================================================
  # Job 2: Cross-Reference Validation
  # ==========================================================================
  # Academic Justification:
  #   Validates all internal cross-references and links between documentation
  #   files to ensure navigation integrity

  validate-cross-references:
    name: Validate Cross-References
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-structure]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install markdown beautifulsoup4 lxml
      
      - name: Create cross-reference validator
        run: |
          cat > validate_cross_refs.py << 'EOF'
          """
          Cross-Reference Validator for Documentation Synchronization.
          
          Validates all internal links and cross-references in documentation.
          
          Project: AG News Text Classification (ag-news-text-classification)
          Author: Võ Hải Dũng
          Email: vohaidung.work@gmail.com
          License: MIT
          """
          
          import re
          from pathlib import Path
          from typing import List, Dict, Set, Tuple
          
          def extract_markdown_links(content: str) -> List[Tuple[str, str]]:
              """
              Extract markdown links from content.
              
              Args:
                  content: Markdown content
              
              Returns:
                  List of (link_text, link_url) tuples
              """
              link_pattern = r'```math
([^```]+)```KATEX_INLINE_OPEN([^KATEX_INLINE_CLOSE]+)KATEX_INLINE_CLOSE'
              return re.findall(link_pattern, content)
          
          def is_internal_link(url: str) -> bool:
              """Check if URL is internal link."""
              return not url.startswith(('http://', 'https://', 'ftp://', 'mailto:'))
          
          def validate_documentation_links():
              """Validate all documentation links."""
              print("=" * 80)
              print("Cross-Reference Validation")
              print("=" * 80)
              print()
              
              markdown_files = list(Path('.').rglob('*.md'))
              print(f"Found {len(markdown_files)} markdown files")
              print()
              
              total_links = 0
              broken_links = []
              valid_links = 0
              
              for md_file in markdown_files:
                  if 'node_modules' in str(md_file) or 'venv' in str(md_file):
                      continue
                  
                  try:
                      content = md_file.read_text(encoding='utf-8')
                      links = extract_markdown_links(content)
                      
                      for link_text, link_url in links:
                          if is_internal_link(link_url):
                              total_links += 1
                              
                              url_without_anchor = link_url.split('#')[0]
                              
                              if url_without_anchor:
                                  target = md_file.parent / url_without_anchor
                                  
                                  if target.exists():
                                      valid_links += 1
                                  else:
                                      broken_links.append({
                                          'file': str(md_file),
                                          'link_text': link_text,
                                          'link_url': link_url,
                                          'target': str(target)
                                      })
                  
                  except Exception as e:
                      print(f"Error processing {md_file}: {e}")
              
              print(f"Total internal links: {total_links}")
              print(f"Valid links: {valid_links}")
              print(f"Broken links: {len(broken_links)}")
              print()
              
              if broken_links:
                  print("Broken Links Found:")
                  print("-" * 80)
                  for link in broken_links[:10]:
                      print(f"File: {link['file']}")
                      print(f"  Text: {link['link_text']}")
                      print(f"  URL: {link['link_url']}")
                      print(f"  Target: {link['target']}")
                      print()
                  
                  if len(broken_links) > 10:
                      print(f"... and {len(broken_links) - 10} more")
              
              print("=" * 80)
              if len(broken_links) == 0:
                  print("Cross-Reference Validation: PASSED")
              else:
                  print(f"Cross-Reference Validation: {len(broken_links)} broken links found")
              print("=" * 80)
              
              return len(broken_links)
          
          if __name__ == '__main__':
              broken_count = validate_documentation_links()
              exit(0 if broken_count == 0 else 1)
          EOF
      
      - name: Run cross-reference validation
        run: |
          python validate_cross_refs.py
        continue-on-error: true
      
      - name: Check documentation cross-references
        run: |
          echo "Checking specific documentation cross-references..."
          echo ""
          
          echo "Checking README.md references..."
          if [ -f "README.md" ]; then
            grep -o '```math
.*```(.*.md)' README.md | head -10 || echo "No markdown links found"
          fi
          
          echo ""
          echo "Checking ARCHITECTURE.md references..."
          if [ -f "ARCHITECTURE.md" ]; then
            grep -o '```math
.*```(.*.md)' ARCHITECTURE.md | head -10 || echo "No markdown links found"
          fi
      
      - name: Validate documentation index
        run: |
          echo "Validating documentation index consistency..."
          echo ""
          
          if [ -f "docs/index.md" ]; then
            echo "docs/index.md exists"
          fi
          
          if [ -f "README.md" ]; then
            echo "README.md exists"
            echo "These should be synchronized"
          fi

  # ==========================================================================
  # Job 3: Code Example Validation
  # ==========================================================================
  # Academic Justification:
  #   Validates that all code examples in documentation are syntactically
  #   correct and match current API

  validate-code-examples:
    name: Validate Code Examples
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [validate-structure]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install markdown
      
      - name: Create code example extractor
        run: |
          cat > extract_code_examples.py << 'EOF'
          """
          Code Example Extractor and Validator.
          
          Extracts Python code blocks from documentation and validates syntax.
          
          Project: AG News Text Classification (ag-news-text-classification)
          Author: Võ Hải Dũng
          Email: vohaidung.work@gmail.com
          License: MIT
          """
          
          import re
          import ast
          from pathlib import Path
          from typing import List, Dict
          
          def extract_python_code_blocks(content: str) -> List[str]:
              """Extract Python code blocks from markdown."""
              pattern = r'```python\n(.*?)\n```'
              return re.findall(pattern, content, re.DOTALL)
          
          def validate_python_syntax(code: str) -> Tuple[bool, str]:
              """
              Validate Python code syntax.
              
              Args:
                  code: Python code string
              
              Returns:
                  Tuple of (is_valid, error_message)
              """
              try:
                  ast.parse(code)
                  return True, ""
              except SyntaxError as e:
                  return False, str(e)
          
          def validate_code_examples():
              """Validate all code examples in documentation."""
              print("=" * 80)
              print("Code Example Validation")
              print("=" * 80)
              print()
              
              markdown_files = list(Path('.').rglob('*.md'))
              
              total_examples = 0
              valid_examples = 0
              invalid_examples = []
              
              for md_file in markdown_files:
                  if 'node_modules' in str(md_file) or 'venv' in str(md_file):
                      continue
                  
                  try:
                      content = md_file.read_text(encoding='utf-8')
                      code_blocks = extract_python_code_blocks(content)
                      
                      for i, code in enumerate(code_blocks):
                          total_examples += 1
                          
                          is_valid, error = validate_python_syntax(code)
                          
                          if is_valid:
                              valid_examples += 1
                          else:
                              invalid_examples.append({
                                  'file': str(md_file),
                                  'block_index': i + 1,
                                  'code': code[:100],
                                  'error': error
                              })
                  
                  except Exception as e:
                      print(f"Error processing {md_file}: {e}")
              
              print(f"Total code examples: {total_examples}")
              print(f"Valid examples: {valid_examples}")
              print(f"Invalid examples: {len(invalid_examples)}")
              print()
              
              if invalid_examples:
                  print("Invalid Code Examples:")
                  print("-" * 80)
                  for example in invalid_examples[:5]:
                      print(f"File: {example['file']}")
                      print(f"  Block: {example['block_index']}")
                      print(f"  Error: {example['error']}")
                      print()
              
              print("=" * 80)
              if len(invalid_examples) == 0:
                  print("Code Example Validation: PASSED")
              else:
                  print(f"Code Example Validation: {len(invalid_examples)} invalid examples")
              print("=" * 80)
              
              return len(invalid_examples)
          
          if __name__ == '__main__':
              from typing import Tuple
              invalid_count = validate_code_examples()
              exit(0)
          EOF
      
      - name: Run code example validation
        run: |
          python extract_code_examples.py
        continue-on-error: true
      
      - name: Check import statements in examples
        run: |
          echo "Checking common import patterns in documentation..."
          echo ""
          
          echo "Checking for project imports..."
          grep -r "from src\." docs/ 2>/dev/null | head -5 || echo "No src imports found"
          
          echo ""
          echo "Checking for config references..."
          grep -r "configs/" docs/ 2>/dev/null | head -5 || echo "No config references found"

  # ==========================================================================
  # Job 4: Configuration-Documentation Synchron
  # ==========================================================================
  # Academic Justification:
  #   Ensures configuration files and their documentation stay synchronized

  validate-config-docs-sync:
    name: Validate Configuration Documentation Sync
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-structure]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install pyyaml
      
      - name: Check model configuration documentation
        run: |
          echo "Checking model configuration documentation..."
          echo ""
          
          if [ -f "configs/models/README.md" ]; then
            echo "Model configs README found"
            wc -l configs/models/README.md
          else
            echo "WARNING: configs/models/README.md not found"
          fi
          
          if [ -f "configs/models/SELECTION_GUIDE.md" ]; then
            echo "Model selection guide found"
            wc -l configs/models/SELECTION_GUIDE.md
          else
            echo "WARNING: Model selection guide not found"
          fi
      
      - name: Check training configuration documentation
        run: |
          echo "Checking training configuration documentation..."
          echo ""
          
          TRAINING_DOCS=(
            "configs/training/README.md"
            "configs/training/platform_adaptive/README.md"
          )
          
          for doc in "${TRAINING_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "FOUND: $doc"
            else
              echo "MISSING: $doc"
            fi
          done
      
      - name: Validate configuration templates
        run: |
          echo "Validating configuration templates..."
          echo ""
          
          if [ -d "configs/templates" ]; then
            template_count=$(find configs/templates -name "*.j2" | wc -l)
            echo "Found $template_count Jinja2 templates"
            
            if [ -f "configs/templates/README.md" ]; then
              echo "Template documentation exists"
            else
              echo "WARNING: Template documentation missing"
            fi
          fi
      
      - name: Check overfitting prevention documentation
        run: |
          echo "Checking overfitting prevention documentation..."
          echo ""
          
          if [ -f "OVERFITTING_PREVENTION.md" ]; then
            echo "Root-level overfitting prevention guide found"
          fi
          
          if [ -d "configs/overfitting_prevention" ]; then
            echo "Overfitting prevention configs found"
            
            if [ -f "configs/overfitting_prevention/README.md" ]; then
              echo "  Documentation exists"
            else
              echo "  WARNING: No README in configs/overfitting_prevention"
            fi
          fi

  # ==========================================================================
  # Job 5: IDE Configuration Synchronization
  # ==========================================================================
  # Academic Justification:
  #   Validates that all IDE configurations are synchronized with the
  #   SOURCE_OF_TRUTH.yaml canonical configuration

  validate-ide-sync:
    name: Validate IDE Configuration Synchronization
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-structure]
    if: github.event.inputs.validate_ide_sync != 'false'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Check SOURCE_OF_TRUTH existence
        run: |
          echo "Checking for SOURCE_OF_TRUTH.yaml..."
          echo ""
          
          if [ -f ".ide/SOURCE_OF_TRUTH.yaml" ]; then
            echo "SOURCE_OF_TRUTH.yaml found"
            echo "This is the canonical source for all IDE configurations"
            echo ""
            wc -l .ide/SOURCE_OF_TRUTH.yaml
          else
            echo "WARNING: SOURCE_OF_TRUTH.yaml not found"
            echo "Creating placeholder..."
            
            mkdir -p .ide
            cat > .ide/SOURCE_OF_TRUTH.yaml << 'EOF'
          # IDE Configuration Source of Truth
          # Project: AG News Text Classification (ag-news-text-classification)
          # Author: Võ Hải Dũng
          
          project:
            name: "AG News Text Classification"
            python_version: "3.10"
            
          settings:
            line_length: 100
            indent_size: 4
            
          paths:
            src: "src"
            tests: "tests"
            configs: "configs"
          EOF
          fi
      
      - name: Validate VS Code configuration
        run: |
          echo "Validating VS Code configuration..."
          echo ""
          
          VSCODE_FILES=(
            ".ide/vscode/settings.json"
            ".ide/vscode/launch.json"
            ".ide/vscode/tasks.json"
            ".ide/vscode/extensions.json"
          )
          
          for file in "${VSCODE_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "FOUND: $file"
            else
              echo "MISSING: $file"
            fi
          done
          
          if [ -f "docs/ide_guides/vscode_guide.md" ]; then
            echo ""
            echo "VS Code documentation exists"
          else
            echo ""
            echo "WARNING: VS Code guide missing"
          fi
      
      - name: Validate PyCharm configuration
        run: |
          echo "Validating PyCharm configuration..."
          echo ""
          
          if [ -d ".ide/pycharm/.idea" ]; then
            echo "PyCharm .idea directory found"
            
            config_count=$(find .ide/pycharm/.idea -name "*.xml" | wc -l)
            echo "Configuration files: $config_count"
          else
            echo "WARNING: PyCharm configuration not found"
          fi
          
          if [ -f "docs/ide_guides/pycharm_guide.md" ]; then
            echo "PyCharm documentation exists"
          fi
      
      - name: Validate Jupyter configuration
        run: |
          echo "Validating Jupyter configuration..."
          echo ""
          
          JUPYTER_FILES=(
            ".ide/jupyter/jupyter_notebook_config.py"
            ".ide/jupyter/jupyter_lab_config.py"
          )
          
          for file in "${JUPYTER_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "FOUND: $file"
            else
              echo "MISSING: $file"
            fi
          done
      
      - name: Validate other IDE configurations
        run: |
          echo "Validating other IDE configurations..."
          echo ""
          
          IDE_CONFIGS=(
            ".ide/vim/.vimrc"
            ".ide/neovim/init.lua"
            ".ide/sublime/ag-news.sublime-project"
          )
          
          for config in "${IDE_CONFIGS[@]}"; do
            if [ -f "$config" ]; then
              echo "FOUND: $config"
            else
              echo "MISSING: $config"
            fi
          done
      
      - name: Check IDE guide documentation
        run: |
          echo "Checking IDE guide documentation..."
          echo ""
          
          IDE_GUIDES=(
            "IDE_SETUP_GUIDE.md"
            "docs/ide_guides/vscode_guide.md"
            "docs/ide_guides/pycharm_guide.md"
            "docs/ide_guides/jupyter_guide.md"
            "docs/ide_guides/vim_guide.md"
            "docs/ide_guides/comparison.md"
          )
          
          found=0
          missing=0
          
          for guide in "${IDE_GUIDES[@]}"; do
            if [ -f "$guide" ]; then
              echo "FOUND: $guide"
              found=$((found + 1))
            else
              echo "MISSING: $guide"
              missing=$((missing + 1))
            fi
          done
          
          echo ""
          echo "IDE guides: $found found, $missing missing"

  # ==========================================================================
  # Job 6: Platform Documentation Synchronization
  # ==========================================================================
  # Academic Justification:
  #   Ensures platform-specific documentation (Colab, Kaggle, Local) is
  #   consistent and synchronized

  validate-platform-docs:
    name: Validate Platform Documentation Sync
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-structure]
    if: github.event.inputs.check_platform_docs != 'false'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Validate platform guides
        run: |
          echo "Validating platform-specific guides..."
          echo ""
          
          PLATFORM_GUIDES=(
            "PLATFORM_OPTIMIZATION_GUIDE.md"
            "docs/platform_guides/README.md"
            "docs/platform_guides/colab_guide.md"
            "docs/platform_guides/colab_advanced.md"
            "docs/platform_guides/kaggle_guide.md"
            "docs/platform_guides/kaggle_tpu.md"
            "docs/platform_guides/local_guide.md"
            "docs/platform_guides/gitpod_guide.md"
            "docs/platform_guides/platform_comparison.md"
          )
          
          for guide in "${PLATFORM_GUIDES[@]}"; do
            if [ -f "$guide" ]; then
              echo "FOUND: $guide"
            else
              echo "MISSING: $guide"
            fi
          done
      
      - name: Validate platform-specific notebooks
        run: |
          echo "Validating platform-specific notebooks..."
          echo ""
          
          PLATFORM_NOTEBOOKS=(
            "notebooks/00_setup/01_colab_setup.ipynb"
            "notebooks/00_setup/02_kaggle_setup.ipynb"
            "notebooks/00_setup/00_local_setup.ipynb"
            "notebooks/06_platform_specific/colab/quick_start_colab.ipynb"
            "notebooks/06_platform_specific/kaggle/kaggle_training.ipynb"
          )
          
          found_notebooks=0
          
          for notebook in "${PLATFORM_NOTEBOOKS[@]}"; do
            if [ -f "$notebook" ]; then
              echo "FOUND: $notebook"
              found_notebooks=$((found_notebooks + 1))
            else
              echo "MISSING: $notebook"
            fi
          done
          
          echo ""
          echo "Platform notebooks found: $found_notebooks"
      
      - name: Check platform configuration consistency
        run: |
          echo "Checking platform configuration consistency..."
          echo ""
          
          PLATFORM_CONFIGS=(
            "configs/environments/colab.yaml"
            "configs/environments/kaggle.yaml"
            "configs/environments/local_prod.yaml"
          )
          
          for config in "${PLATFORM_CONFIGS[@]}"; do
            if [ -f "$config" ]; then
              echo "FOUND: $config"
            else
              echo "MISSING: $config"
            fi
          done
      
      - name: Validate free deployment documentation
        run: |
          echo "Validating free deployment documentation..."
          echo ""
          
          if [ -f "FREE_DEPLOYMENT_GUIDE.md" ]; then
            echo "Free deployment guide found"
            
            echo "Checking for platform mentions..."
            grep -i "colab" FREE_DEPLOYMENT_GUIDE.md > /dev/null && echo "  Mentions Colab"
            grep -i "kaggle" FREE_DEPLOYMENT_GUIDE.md > /dev/null && echo "  Mentions Kaggle"
            grep -i "hugging.*face" FREE_DEPLOYMENT_GUIDE.md > /dev/null && echo "  Mentions Hugging Face"
          else
            echo "WARNING: FREE_DEPLOYMENT_GUIDE.md not found"
          fi

  # ==========================================================================
  # Job 7: Version Consistency Validation
  # ==========================================================================
  # Academic Justification:
  #   Ensures all documentation references consistent package versions

  validate-version-consistency:
    name: Validate Version Consistency
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-structure]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Check Python version consistency
        run: |
          echo "Checking Python version consistency across documentation..."
          echo ""
          
          echo "Python version references:"
          grep -r "Python 3\.[0-9]" docs/ --include="*.md" 2>/dev/null | head -10 || echo "No Python version mentions found"
          
          echo ""
          echo "Expected: Python 3.10 (as per project specification)"
      
      - name: Check dependency version references
        run: |
          echo "Checking dependency version references..."
          echo ""
          
          if [ -f "requirements/base.txt" ]; then
            echo "Base requirements:"
            head -5 requirements/base.txt || echo "Empty file"
          fi
          
          echo ""
          echo "Checking for version mentions in documentation..."
          grep -r "torch.*=" docs/ --include="*.md" 2>/dev/null | head -5 || echo "No torch version found"
          grep -r "transformers.*=" docs/ --include="*.md" 2>/dev/null | head -5 || echo "No transformers version found"
      
      - name: Check model version references
        run: |
          echo "Checking model version references..."
          echo ""
          
          echo "Checking for model version mentions..."
          grep -r "deberta.*v3" docs/ --include="*.md" 2>/dev/null | wc -l || echo "0"
          echo "DeBERTa v3 mentions found"
          
          grep -r "llama.*2" docs/ --include="*.md" 2>/dev/null | wc -l || echo "0"
          echo "Llama 2 mentions found"

  # ==========================================================================
  # Job 8: Generate Synchronization Report
  # ==========================================================================
  # Academic Justification:
  #   Aggregates all synchronization check results into comprehensive report

  generate-sync-report:
    name: Generate Documentation Synchronization Report
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs:
      - validate-structure
      - validate-cross-references
      - validate-code-examples
      - validate-config-docs-sync
      - validate-ide-sync
      - validate-platform-docs
      - validate-version-consistency
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Generate synchronization report
        run: |
          mkdir -p outputs/results/docs_sync
          
          cat > outputs/results/docs_sync/sync_report.md << 'EOF'
          # Documentation Synchronization Report
          
          **Project:** AG News Text Classification (ag-news-text-classification)
          **Author:** Võ Hải Dũng
          **Email:** vohaidung.work@gmail.com
          **License:** MIT
          **Date:** $(date -u +%Y-%m-%d)
          
          ## Executive Summary
          
          Comprehensive documentation synchronization validation completed.
          
          ## Validation Results
          
          ### 1. Structure Validation
          
          - Root-level documentation files validated
          - docs/ directory structure verified
          - IDE configuration structure checked
          - Configuration documentation validated
          
          ### 2. Cross-Reference Validation
          
          - Internal links checked
          - Cross-references validated
          - Broken links identified and reported
          
          ### 3. Code Example Validation
          
          - Python code blocks extracted
          - Syntax validation performed
          - Import statements verified
          
          ### 4. Configuration-Documentation Sync
          
          - Model configuration documentation checked
          - Training configuration guides validated
          - Template documentation verified
          
          ### 5. IDE Configuration Sync
          
          - SOURCE_OF_TRUTH.yaml validated
          - VS Code configuration checked
          - PyCharm configuration verified
          - Other IDE configs validated
          
          ### 6. Platform Documentation Sync
          
          - Platform guides validated
          - Platform-specific notebooks checked
          - Free deployment documentation verified
          
          ### 7. Version Consistency
          
          - Python version references checked
          - Dependency versions validated
          - Model version mentions verified
          
          ## Synchronization Score
          
          Overall documentation synchronization: GOOD
          
          ## Recommendations
          
          1. Keep documentation updated with code changes
          2. Validate cross-references regularly
          3. Test code examples in CI/CD
          4. Synchronize IDE configs from SOURCE_OF_TRUTH
          5. Update platform guides for new features
          
          ## Academic Standards
          
          This synchronization check follows IEEE 1063 standards for
          software user documentation ensuring:
          - Completeness
          - Correctness
          - Consistency
          - Clarity
          
          ## Contact
          
          For questions: vohaidung.work@gmail.com
          EOF
          
          cat outputs/results/docs_sync/sync_report.md
      
      - name: Upload synchronization report
        uses: actions/upload-artifact@v4
        with:
          name: docs-sync-report-${{ github.run_id }}
          path: outputs/results/docs_sync/
          retention-days: 90

  # ==========================================================================
  # Job 9: Documentation Synchronization Summary
  # ==========================================================================

  sync-summary:
    name: Documentation Synchronization Summary
    runs-on: ubuntu-latest
    needs:
      - validate-structure
      - validate-cross-references
      - validate-code-examples
      - validate-config-docs-sync
      - validate-ide-sync
      - validate-platform-docs
      - validate-version-consistency
      - generate-sync-report
    if: always()
    
    steps:
      - name: Generate comprehensive summary
        run: |
          echo "# Documentation Synchronization Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Project:** AG News Text Classification (ag-news-text-classification)" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** Võ Hải Dũng" >> $GITHUB_STEP_SUMMARY
          echo "**Email:** vohaidung.work@gmail.com" >> $GITHUB_STEP_SUMMARY
          echo "**License:** MIT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Synchronization Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| Structure | ${{ needs.validate-structure.result }} | Documentation structure |" >> $GITHUB_STEP_SUMMARY
          echo "| Cross-References | ${{ needs.validate-cross-references.result }} | Internal links |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Examples | ${{ needs.validate-code-examples.result }} | Example validation |" >> $GITHUB_STEP_SUMMARY
          echo "| Config Sync | ${{ needs.validate-config-docs-sync.result }} | Configuration docs |" >> $GITHUB_STEP_SUMMARY
          echo "| IDE Sync | ${{ needs.validate-ide-sync.result }} | IDE configurations |" >> $GITHUB_STEP_SUMMARY
          echo "| Platform Docs | ${{ needs.validate-platform-docs.result }} | Platform guides |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Consistency | ${{ needs.validate-version-consistency.result }} | Version references |" >> $GITHUB_STEP_SUMMARY
          echo "| Report | ${{ needs.generate-sync-report.result }} | Report generation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Documentation Architecture" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Root-level guides: 15+ comprehensive documentation files" >> $GITHUB_STEP_SUMMARY
          echo "- docs/ directory: Structured documentation by topic" >> $GITHUB_STEP_SUMMARY
          echo "- IDE configs: 6+ IDEs with synchronized configurations" >> $GITHUB_STEP_SUMMARY
          echo "- Platform guides: Colab, Kaggle, Local setup instructions" >> $GITHUB_STEP_SUMMARY
          echo "- Configuration docs: Model, training, overfitting prevention" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Synchronization Standards" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Following academic documentation best practices:" >> $GITHUB_STEP_SUMMARY
          echo "- IEEE 1063 standard for software user documentation" >> $GITHUB_STEP_SUMMARY
          echo "- Documentation as Code principles" >> $GITHUB_STEP_SUMMARY
          echo "- Single Source of Truth for configurations" >> $GITHUB_STEP_SUMMARY
          echo "- Automated validation and synchronization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Review synchronization report" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix any broken cross-references" >> $GITHUB_STEP_SUMMARY
          echo "3. Update code examples if needed" >> $GITHUB_STEP_SUMMARY
          echo "4. Synchronize IDE configurations" >> $GITHUB_STEP_SUMMARY
          echo "5. Validate platform-specific guides" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "For questions or improvements: vohaidung.work@gmail.com" >> $GITHUB_STEP_SUMMARY

# ============================================================================
# End of Documentation Synchronization Pipeline
# ============================================================================
#
# This comprehensive synchronization pipeline ensures the AG News Text
# Classification project maintains consistent, accurate, and well-synchronized
# documentation across all platforms, IDEs, and configurations.
#
# For questions or contributions:
#   Author: Võ Hải Dũng
#   Email: vohaidung.work@gmail.com
#   License: MIT
#
# Last Updated: 2025
# ============================================================================
