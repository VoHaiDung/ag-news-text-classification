# Documentation Build and Deployment Workflow
# ============================================
# Automated documentation generation following:
# - Sphinx Documentation Standards
# - IEEE Documentation Guidelines
# - Academic Publishing Best Practices
#
# Author: Võ Hải Dũng
# License: MIT
# Version: 1.0.0

name: Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'src/**/*.py'
      - 'README.md'
      - 'mkdocs.yml'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
  workflow_dispatch:
    inputs:
      deploy_docs:
        description: 'Deploy documentation to GitHub Pages'
        required: false
        default: false
        type: boolean

# Permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Concurrency control
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: '3.10'
  SPHINX_VERSION: '7.2.6'
  MKDOCS_VERSION: '1.5.3'

jobs:
  # Documentation building job
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      # Step 1: Repository checkout with full history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for git information
          
      # Step 2: Python environment setup
      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      # Step 3: Cache documentation dependencies
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-docs-${{ hashFiles('requirements/docs.txt', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-docs-
            
      # Step 4: Install documentation tools
      - name: Install documentation dependencies
        run: |
          # Update pip
          python -m pip install --upgrade pip
          
          # Install Sphinx and extensions
          pip install sphinx==${{ env.SPHINX_VERSION }}
          pip install sphinx-rtd-theme sphinx-autodoc-typehints sphinx-copybutton
          pip install myst-parser sphinx-design
          
          # Install MkDocs and themes
          pip install mkdocs==${{ env.MKDOCS_VERSION }}
          pip install mkdocs-material mkdocs-mermaid2-plugin mkdocstrings[python]
          
          # Install project dependencies for API documentation
          pip install pyyaml numpy
          
      # Step 5: Create documentation structure
      - name: Create documentation structure
        run: |
          # Create documentation directories
          mkdir -p docs/{_static,_templates,api,guides,tutorials}
          mkdir -p docs/getting_started
          mkdir -p docs/user_guide
          mkdir -p docs/developer_guide
          mkdir -p docs/api_reference
          
      # Step 6: Build Sphinx documentation
      - name: Build Sphinx documentation
        run: |
          echo "Building Sphinx documentation..."
          
          # Create Sphinx configuration if not exists
          if [ ! -f docs/conf.py ]; then
            cat > docs/conf.py << 'PYTHON'
          """
          Sphinx configuration file for AG News Classification documentation.
          Generated following Sphinx best practices and academic standards.
          """
          import os
          import sys
          from datetime import datetime
          
          # Add project root to Python path
          sys.path.insert(0, os.path.abspath('..'))
          
          # Project information
          project = 'AG News Classification'
          copyright = f'{datetime.now().year}, Võ Hải Dũng'
          author = 'Võ Hải Dũng'
          release = '1.0.0'
          version = '1.0'
          
          # General configuration
          extensions = [
              'sphinx.ext.autodoc',
              'sphinx.ext.napoleon',
              'sphinx.ext.viewcode',
              'sphinx.ext.githubpages',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.mathjax',
              'myst_parser',
              'sphinx_design',
              'sphinx_copybutton',
          ]
          
          # Extension configuration
          autodoc_default_options = {
              'members': True,
              'member-order': 'bysource',
              'special-members': '__init__',
              'undoc-members': True,
              'exclude-members': '__weakref__'
          }
          
          # Napoleon settings for Google/NumPy docstrings
          napoleon_google_docstring = True
          napoleon_numpy_docstring = True
          napoleon_include_init_with_doc = True
          
          # MyST parser configuration
          myst_enable_extensions = [
              "amsmath",
              "colon_fence",
              "deflist",
              "dollarmath",
              "html_image",
          ]
          
          # Templates and static files
          templates_path = ['_templates']
          exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
          
          # HTML output configuration
          html_theme = 'sphinx_rtd_theme'
          html_static_path = ['_static']
          html_theme_options = {
              'navigation_depth': 4,
              'collapse_navigation': False,
              'sticky_navigation': True,
              'includehidden': True,
              'titles_only': False,
              'display_version': True,
              'prev_next_buttons_location': 'bottom',
          }
          
          # Intersphinx mapping for cross-references
          intersphinx_mapping = {
              'python': ('https://docs.python.org/3', None),
              'numpy': ('https://numpy.org/doc/stable/', None),
              'torch': ('https://pytorch.org/docs/stable/', None),
          }
          PYTHON
          fi
          
          # Create index.rst if not exists
          if [ ! -f docs/index.rst ]; then
            cat > docs/index.rst << 'RST'
          AG News Classification Documentation
          ====================================
          
          Academic Text Classification System for AG News Dataset
          
          .. toctree::
             :maxdepth: 2
             :caption: Contents:
             
             getting_started/index
             user_guide/index
             developer_guide/index
             api_reference/index
          
          Overview
          --------
          
          This documentation covers the AG News Classification system, an academic
          implementation of state-of-the-art text classification techniques.
          
          Features
          --------
          
          * Advanced transformer models (DeBERTa, RoBERTa, XLNet)
          * Comprehensive data augmentation techniques
          * Ensemble methods for improved accuracy
          * Production-ready deployment pipeline
          
          Indices and Tables
          ==================
          
          * :ref:`genindex`
          * :ref:`modindex`
          * :ref:`search`
          RST
          fi
          
          # Build HTML documentation
          sphinx-build -b html -W --keep-going docs docs/_build/html || true
          
          echo "Sphinx documentation build completed"
          
      # Step 7: Build MkDocs documentation
      - name: Build MkDocs documentation
        run: |
          echo "Building MkDocs documentation..."
          
          # Create mkdocs.yml if not exists
          if [ ! -f mkdocs.yml ]; then
            cat > mkdocs.yml << 'YAML'
          # MkDocs configuration for AG News Classification
          site_name: AG News Classification
          site_description: Academic Text Classification System
          site_author: Võ Hải Dũng
          site_url: https://github.com/VoHaiDung/ag-news-text-classification
          
          # Repository information
          repo_name: VoHaiDung/ag-news-text-classification
          repo_url: https://github.com/VoHaiDung/ag-news-text-classification
          edit_uri: edit/main/docs/
          
          # Copyright
          copyright: Copyright &copy; 2024 Võ Hải Dũng
          
          # Theme configuration
          theme:
            name: material
            language: en
            palette:
              - scheme: default
                primary: indigo
                accent: indigo
                toggle:
                  icon: material/brightness-7
                  name: Switch to dark mode
              - scheme: slate
                primary: indigo
                accent: indigo
                toggle:
                  icon: material/brightness-4
                  name: Switch to light mode
            font:
              text: Roboto
              code: Roboto Mono
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.top
              - navigation.footer
              - search.suggest
              - search.highlight
              - search.share
              - content.code.annotate
              - content.code.copy
              - content.tabs.link
          
          # Navigation structure
          nav:
            - Home: index.md
            - Getting Started:
                - Installation: getting_started/installation.md
                - Quick Start: getting_started/quickstart.md
                - Configuration: getting_started/configuration.md
            - User Guide:
                - Overview: user_guide/index.md
                - Data Processing: user_guide/data_processing.md
                - Model Training: user_guide/training.md
                - Evaluation: user_guide/evaluation.md
            - Developer Guide:
                - Architecture: developer_guide/architecture.md
                - Contributing: developer_guide/contributing.md
                - API Design: developer_guide/api_design.md
            - API Reference:
                - Overview: api_reference/index.md
                - Data Module: api_reference/data.md
                - Models Module: api_reference/models.md
                - Training Module: api_reference/training.md
          
          # Plugins
          plugins:
            - search:
                lang: en
                separator: '[\s\-\.]+'
            - tags
            - mkdocstrings:
                handlers:
                  python:
                    options:
                      show_source: true
                      show_root_heading: true
          
          # Markdown extensions
          markdown_extensions:
            - abbr
            - admonition
            - attr_list
            - def_list
            - footnotes
            - md_in_html
            - tables
            - toc:
                permalink: true
            - pymdownx.arithmatex:
                generic: true
            - pymdownx.betterem
            - pymdownx.caret
            - pymdownx.details
            - pymdownx.emoji:
                emoji_index: !!python/name:material.extensions.emoji.twemoji
                emoji_generator: !!python/name:material.extensions.emoji.to_svg
            - pymdownx.highlight:
                anchor_linenums: true
                line_spans: __span
                pygments_lang_class: true
            - pymdownx.inlinehilite
            - pymdownx.keys
            - pymdownx.mark
            - pymdownx.smartsymbols
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:pymdownx.superfences.fence_code_format
            - pymdownx.tabbed:
                alternate_style: true
            - pymdownx.tasklist:
                custom_checkbox: true
            - pymdownx.tilde
          
          # Extra configuration
          extra:
            social:
              - icon: fontawesome/brands/github
                link: https://github.com/VoHaiDung
              - icon: fontawesome/brands/linkedin
                link: https://linkedin.com/in/vohaidung
            analytics:
              provider: google
              property: G-XXXXXXXXXX
            version:
              provider: mike
          YAML
          fi
          
          # Create basic markdown files if not exist
          if [ ! -f docs/index.md ]; then
            if [ -f README.md ]; then
              cp README.md docs/index.md
            else
              echo "# AG News Classification" > docs/index.md
              echo "" >> docs/index.md
              echo "Academic Text Classification System" >> docs/index.md
            fi
          fi
          
          # Create placeholder files
          for dir in getting_started user_guide developer_guide api_reference; do
            mkdir -p docs/$dir
            if [ ! -f docs/$dir/index.md ]; then
              echo "# $(echo $dir | tr '_' ' ' | sed 's/\<./\U&/g')" > docs/$dir/index.md
              echo "" >> docs/$dir/index.md
              echo "Documentation for $dir section." >> docs/$dir/index.md
            fi
          done
          
          # Build MkDocs
          mkdocs build --strict || mkdocs build || true
          
          echo "MkDocs documentation build completed"
          
      # Step 8: Generate API documentation
      - name: Generate API documentation
        run: |
          echo "Generating API documentation..."
          
          # Python script to generate API docs
          python - << 'PYTHON'
          """
          API documentation generator for AG News Classification.
          Extracts docstrings and generates documentation.
          """
          import os
          import ast
          import json
          from pathlib import Path
          
          def extract_docstrings(file_path):
              """Extract docstrings from Python file."""
              with open(file_path, 'r', encoding='utf-8') as f:
                  try:
                      tree = ast.parse(f.read())
                      docs = {}
                      
                      for node in ast.walk(tree):
                          if isinstance(node, (ast.FunctionDef, ast.ClassDef)):
                              docstring = ast.get_docstring(node)
                              if docstring:
                                  docs[node.name] = {
                                      'type': 'class' if isinstance(node, ast.ClassDef) else 'function',
                                      'docstring': docstring[:500]  # Limit length
                                  }
                      
                      return docs
                  except Exception as e:
                      print(f"Error parsing {file_path}: {e}")
                      return {}
          
          # Process source files
          src_dir = Path('src')
          api_docs = {}
          
          if src_dir.exists():
              for py_file in src_dir.rglob('*.py'):
                  relative_path = py_file.relative_to(src_dir)
                  module_name = str(relative_path).replace('/', '.').replace('.py', '')
                  
                  docs = extract_docstrings(py_file)
                  if docs:
                      api_docs[module_name] = docs
          
          # Save API documentation
          output_dir = Path('docs/api_reference')
          output_dir.mkdir(parents=True, exist_ok=True)
          
          with open(output_dir / 'api_docs.json', 'w') as f:
              json.dump(api_docs, f, indent=2)
          
          print(f"Generated API documentation for {len(api_docs)} modules")
          PYTHON
          
      # Step 9: Upload documentation artifacts
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/_build/
            site/
          retention-days: 7
          if-no-files-found: warn

  # Deploy documentation to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    needs: build-docs
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' &&
      success()
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Step 2: Download documentation artifacts
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: ./public
        continue-on-error: true
        
      # Step 3: Create index page if not exists
      - name: Prepare deployment
        run: |
          mkdir -p public
          
          # Create index.html if not exists
          if [ ! -f public/index.html ]; then
            cat > public/index.html << 'HTML'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>AG News Classification Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      margin: 0;
                      padding: 40px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                  }
                  .container {
                      max-width: 800px;
                      margin: 0 auto;
                      background: white;
                      border-radius: 10px;
                      padding: 40px;
                      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                  }
                  h1 {
                      color: #333;
                      margin-bottom: 20px;
                  }
                  .links {
                      margin-top: 30px;
                  }
                  .links a {
                      display: inline-block;
                      margin: 10px 20px 10px 0;
                      padding: 12px 24px;
                      background: #667eea;
                      color: white;
                      text-decoration: none;
                      border-radius: 5px;
                      transition: background 0.3s;
                  }
                  .links a:hover {
                      background: #764ba2;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>AG News Classification Documentation</h1>
                  <p>Academic Text Classification System for AG News Dataset</p>
                  
                  <div class="links">
                      <a href="./site/index.html">MkDocs Documentation</a>
                      <a href="./_build/html/index.html">Sphinx Documentation</a>
                      <a href="https://github.com/VoHaiDung/ag-news-text-classification">GitHub Repository</a>
                  </div>
                  
                  <h2>About</h2>
                  <p>This project implements state-of-the-art text classification techniques for the AG News dataset, 
                     featuring advanced transformer models, comprehensive data augmentation, and production-ready deployment.</p>
              </div>
          </body>
          </html>
          HTML
          fi
          
      # Step 4: Setup GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      # Step 5: Upload to Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public
          
      # Step 6: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
