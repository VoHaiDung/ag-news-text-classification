# ============================================================================
# Dependabot Dependency Update Configuration
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Automated dependency update configuration using GitHub Dependabot
#              to maintain security, compatibility, and up-to-date dependencies
#              across Python packages, GitHub Actions, Docker, and Node.js
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# ============================================================================
#
# Academic Rationale:
#   This dependency management configuration implements principles from:
#   - "Software Supply Chain Security" (NIST, 2022)
#   - "Dependency Management Best Practices" (Decan et al., 2019)
#   - "Breaking Bad Dependencies" (Cox et al., 2015)
#   - "Technical Debt in Software Dependencies" (Bavota et al., 2015)
#   - "The Update Framework: Secure Software Updates" (Samuel et al., 2010)
#
# Dependency Management Philosophy:
#   1. Security First: Prioritize security updates over features
#   2. Compatibility: Ensure updates do not break existing functionality
#   3. Reproducibility: Lock versions for research reproducibility
#   4. Transparency: Clear documentation of dependency changes
#   5. Automation: Reduce manual update overhead
#   6. Testing: All updates validated by CI/CD pipeline
#   7. Gradual Updates: Controlled rollout of dependency changes
#   8. Academic Integrity: Maintain version stability for publications
#
# Dependency Categories for AG News Text Classification:
#   
#   1. Python Dependencies (pip)
#     Core ML Libraries:
#       - torch: PyTorch deep learning framework
#       - transformers: Hugging Face Transformers library
#       - datasets: Hugging Face Datasets library
#     
#     Model Training:
#       - peft: Parameter-Efficient Fine-Tuning (LoRA, QLoRA)
#       - accelerate: Distributed training acceleration
#       - bitsandbytes: Quantization library
#     
#     Data Processing:
#       - numpy: Numerical computing
#       - pandas: Data manipulation
#       - scikit-learn: Machine learning utilities
#     
#     Monitoring and Logging:
#       - tensorboard: Training visualization
#       - mlflow: Experiment tracking
#       - wandb: Weights & Biases integration
#     
#     API and Services:
#       - fastapi: REST API framework
#       - uvicorn: ASGI server
#       - pydantic: Data validation
#     
#     Development Tools:
#       - pytest: Testing framework
#       - black: Code formatting
#       - flake8: Linting
#   
#   2. GitHub Actions (github-actions)
#     - actions/checkout: Repository checkout
#     - actions/setup-python: Python environment setup
#     - actions/cache: Dependency caching
#     - actions/upload-artifact: Artifact management
#   
#   3. Docker (docker)
#     - Base images for deployment
#     - GPU-enabled images for training
#   
#   4. Node.js (npm)
#     - commitlint: Commit message linting
#     - husky: Git hooks management
#
# Update Strategy:
#   Security Updates:
#     - Schedule: Daily checks
#     - Auto-merge: Enabled for patch versions
#     - Priority: Critical and high severity
#   
#   Feature Updates:
#     - Schedule: Weekly checks
#     - Auto-merge: Disabled (manual review required)
#     - Testing: Full CI/CD pipeline validation
#   
#   Breaking Changes:
#     - Schedule: Monthly review
#     - Auto-merge: Never
#     - Documentation: Update migration guides
#
# Version Constraints:
#   For Research Reproducibility:
#     - Lock major versions in requirements files
#     - Use exact versions for publications
#     - Document version changes in CHANGELOG.md
#   
#   For Production Deployment:
#     - Allow minor and patch updates
#     - Test thoroughly before deployment
#     - Maintain compatibility matrix
#
# Compatibility Matrix:
#   Python Versions: 3.8, 3.9, 3.10, 3.11
#   PyTorch Versions: 2.0+, 2.1+, 2.2+
#   Transformers Versions: 4.30+, 4.35+, 4.40+
#   CUDA Versions: 11.8, 12.1 (for GPU support)
#
# Academic Considerations:
#   Publication Stability:
#     - Freeze dependencies for published results
#     - Document exact versions in papers
#     - Maintain reproducibility branches
#   
#   Benchmark Consistency:
#     - Lock versions during benchmark runs
#     - Report dependency versions in results
#     - Validate updates against baselines
#
# Security Considerations:
#   Vulnerability Scanning:
#     - Daily security checks
#     - Immediate alerts for critical issues
#     - Automated PRs for security patches
#   
#   Supply Chain Security:
#     - Verify package signatures
#     - Review dependency trees
#     - Monitor for malicious packages
#
# References:
#   - Dependabot Documentation: https://docs.github.com/en/code-security/dependabot
#   - Software Bill of Materials (SBOM): https://www.ntia.gov/sbom
#   - OWASP Dependency-Check: https://owasp.org/www-project-dependency-check/
#   - Python Packaging Authority: https://www.pypa.io/
#
# ============================================================================

version: 2

updates:
  # ==========================================================================
  # Python Dependencies (pip)
  # ==========================================================================
  # Academic Justification:
  #   Python dependencies include critical ML libraries (PyTorch, Transformers)
  #   and require careful version management to ensure reproducibility and
  #   compatibility with research results
  
  - package-ecosystem: "pip"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "monday"
      time: "03:00"
      timezone: "UTC"
    
    # Open pull requests for version updates
    open-pull-requests-limit: 10
    
    # Target branch for pull requests
    target-branch: "develop"
    
    # Versioning strategy
    versioning-strategy: "increase-if-necessary"
    
    # Allow both direct and indirect dependencies
    allow:
      - dependency-type: "direct"
      - dependency-type: "indirect"
    
    # Ignore specific dependencies
    ignore:
      # Ignore major version updates for core ML libraries
      # to maintain research reproducibility
      - dependency-name: "torch"
        update-types: ["version-update:semver-major"]
      - dependency-name: "transformers"
        update-types: ["version-update:semver-major"]
      - dependency-name: "datasets"
        update-types: ["version-update:semver-major"]
      
      # Ignore major version updates for PEFT libraries
      - dependency-name: "peft"
        update-types: ["version-update:semver-major"]
      - dependency-name: "bitsandbytes"
        update-types: ["version-update:semver-major"]
    
    # Commit message configuration
    commit-message:
      prefix: "deps"
      prefix-development: "deps-dev"
      include: "scope"
    
    # Labels for pull requests
    labels:
      - "dependencies"
      - "python"
      - "automated"
    
    # Reviewers for pull requests
    reviewers:
      - "VoHaiDung"
    
    # Pull request branch name prefix
    pull-request-branch-name:
      separator: "/"
    
    # Rebase strategy
    rebase-strategy: "auto"
    
    # Groups for related dependencies
    groups:
      # Core ML framework updates
      ml-core:
        patterns:
          - "torch"
          - "torchvision"
          - "torchaudio"
        update-types:
          - "minor"
          - "patch"
      
      # Transformers ecosystem updates
      transformers-ecosystem:
        patterns:
          - "transformers"
          - "datasets"
          - "tokenizers"
          - "accelerate"
        update-types:
          - "minor"
          - "patch"
      
      # Parameter-efficient fine-tuning libraries
      peft-libraries:
        patterns:
          - "peft"
          - "bitsandbytes"
          - "adapters"
        update-types:
          - "minor"
          - "patch"
      
      # Data processing libraries
      data-processing:
        patterns:
          - "numpy"
          - "pandas"
          - "scikit-learn"
        update-types:
          - "minor"
          - "patch"
      
      # Monitoring and logging
      monitoring:
        patterns:
          - "tensorboard"
          - "mlflow"
          - "wandb"
        update-types:
          - "minor"
          - "patch"
      
      # API framework updates
      api-framework:
        patterns:
          - "fastapi"
          - "uvicorn"
          - "pydantic"
          - "starlette"
        update-types:
          - "minor"
          - "patch"
      
      # Testing framework updates
      testing:
        patterns:
          - "pytest"
          - "pytest-*"
          - "coverage"
        update-types:
          - "minor"
          - "patch"
      
      # Development tools
      dev-tools:
        patterns:
          - "black"
          - "flake8"
          - "mypy"
          - "isort"
        update-types:
          - "minor"
          - "patch"

  # ==========================================================================
  # GitHub Actions
  # ==========================================================================
  # Academic Justification:
  #   GitHub Actions workflows automate CI/CD, testing, and deployment.
  #   Updates ensure access to latest features and security patches while
  #   maintaining pipeline stability
  
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "tuesday"
      time: "03:00"
      timezone: "UTC"
    
    # Open pull requests for version updates
    open-pull-requests-limit: 5
    
    # Target branch for pull requests
    target-branch: "develop"
    
    # Commit message configuration
    commit-message:
      prefix: "ci"
      include: "scope"
    
    # Labels for pull requests
    labels:
      - "dependencies"
      - "github-actions"
      - "ci-cd"
      - "automated"
    
    # Reviewers for pull requests
    reviewers:
      - "VoHaiDung"
    
    # Groups for related actions
    groups:
      # Core GitHub Actions
      github-core-actions:
        patterns:
          - "actions/checkout"
          - "actions/setup-python"
          - "actions/cache"
          - "actions/upload-artifact"
          - "actions/download-artifact"
        update-types:
          - "minor"
          - "patch"
      
      # Testing and quality actions
      testing-actions:
        patterns:
          - "codecov/codecov-action"
          - "dorny/test-reporter"
        update-types:
          - "minor"
          - "patch"

  # ==========================================================================
  # Docker
  # ==========================================================================
  # Academic Justification:
  #   Docker images provide consistent deployment environments across
  #   platforms. Updates ensure security patches and compatibility with
  #   latest runtime environments
  
  - package-ecosystem: "docker"
    directory: "/deployment/docker"
    schedule:
      interval: "weekly"
      day: "wednesday"
      time: "03:00"
      timezone: "UTC"
    
    # Open pull requests for version updates
    open-pull-requests-limit: 5
    
    # Target branch for pull requests
    target-branch: "develop"
    
    # Commit message configuration
    commit-message:
      prefix: "docker"
      include: "scope"
    
    # Labels for pull requests
    labels:
      - "dependencies"
      - "docker"
      - "deployment"
      - "automated"
    
    # Reviewers for pull requests
    reviewers:
      - "VoHaiDung"
    
    # Ignore specific versions
    ignore:
      # Ignore major version updates for base images
      # to maintain deployment consistency
      - dependency-name: "python"
        update-types: ["version-update:semver-major"]
      - dependency-name: "nvidia/cuda"
        update-types: ["version-update:semver-major"]

  # ==========================================================================
  # npm (Node.js)
  # ==========================================================================
  # Academic Justification:
  #   Node.js dependencies support development tools (commitlint, husky)
  #   for maintaining code quality and commit message standards
  
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
      day: "thursday"
      time: "03:00"
      timezone: "UTC"
    
    # Open pull requests for version updates
    open-pull-requests-limit: 5
    
    # Target branch for pull requests
    target-branch: "develop"
    
    # Versioning strategy
    versioning-strategy: "increase-if-necessary"
    
    # Commit message configuration
    commit-message:
      prefix: "deps"
      prefix-development: "deps-dev"
      include: "scope"
    
    # Labels for pull requests
    labels:
      - "dependencies"
      - "npm"
      - "dev-tools"
      - "automated"
    
    # Reviewers for pull requests
    reviewers:
      - "VoHaiDung"
    
    # Groups for related dependencies
    groups:
      # Git hooks and commit linting
      git-tools:
        patterns:
          - "commitlint"
          - "@commitlint/*"
          - "husky"
        update-types:
          - "minor"
          - "patch"

# ============================================================================
# Dependabot Configuration Notes
# ============================================================================
#
# Update Schedule Summary:
#   - Python (pip): Weekly on Monday at 03:00 UTC
#   - GitHub Actions: Weekly on Tuesday at 03:00 UTC
#   - Docker: Weekly on Wednesday at 03:00 UTC
#   - npm: Weekly on Thursday at 03:00 UTC
#
# Automated Workflow:
#   1. Dependabot checks for updates according to schedule
#   2. Creates pull requests for available updates
#   3. Pull requests automatically labeled and assigned
#   4. CI/CD pipeline runs comprehensive tests
#   5. Manual review required before merging
#   6. Updates merged to develop branch first
#   7. Tested in develop before merging to main
#
# Security Updates:
#   - Dependabot creates PRs immediately for security vulnerabilities
#   - Critical security updates should be reviewed and merged promptly
#   - All security updates run through full test suite
#
# Version Pinning for Reproducibility:
#   - requirements/lock/ contains locked versions for reproducibility
#   - requirements/*.txt use version ranges for flexibility
#   - Update lock files after testing dependency updates
#   - Document breaking changes in CHANGELOG.md
#
# Dependency Groups Strategy:
#   - Related dependencies grouped together
#   - Reduces number of individual PRs
#   - Ensures compatible version combinations
#   - Simplifies testing and review process
#
# Academic Reproducibility:
#   - Lock dependencies before publication
#   - Tag releases with exact dependency versions
#   - Maintain compatibility matrix documentation
#   - Test updates against benchmark baselines
#
# Monitoring and Maintenance:
#   - Review Dependabot alerts weekly
#   - Address security vulnerabilities promptly
#   - Test updates thoroughly in CI/CD
#   - Update documentation for breaking changes
#   - Maintain CHANGELOG.md with dependency updates
#
# Best Practices:
#   1. Never ignore security updates
#   2. Test all updates before merging
#   3. Review changelogs for breaking changes
#   4. Update documentation as needed
#   5. Maintain backward compatibility when possible
#   6. Communicate changes to team/users
#   7. Keep dependency tree minimal
#   8. Regularly audit unused dependencies
#
# For questions or issues with dependency management:
#   Author: Võ Hải Dũng
#   Email: vohaidung.work@gmail.com
#   License: MIT
#
# References:
#   - Dependabot Configuration: https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file
#   - Semantic Versioning: https://semver.org/
#   - Python Packaging: https://packaging.python.org/
#   - GitHub Actions Security: https://docs.github.com/en/actions/security-guides
#
# Last Updated: 2025
# ============================================================================
