# AG News Text Classification - Development Environment Configuration
#
# This configuration file defines settings for the development environment of the
# AG News Text Classification project. It is optimized for rapid development,
# experimentation, and debugging rather than production performance or accuracy.
#
# Development Environment Characteristics:
#   - Fast iteration cycles with reduced training time
#   - Enhanced logging and debugging capabilities
#   - Relaxed validation and constraints for flexibility
#   - Smaller dataset samples for quick testing
#   - More verbose error messages and stack traces
#   - Auto-reload and hot-reload features
#   - Integration with development tools and IDEs
#   - Local-first deployment (no cloud dependencies)
#   - Extensive monitoring and profiling
#   - Feature flags for experimental features
#
# Usage:
#   This configuration is automatically loaded when running in development mode:
#     export ENVIRONMENT=dev
#     python train.py
#
#   Or explicitly specify:
#     python train.py --config configs/environments/dev.yaml
#
#   For quick prototyping:
#     python quickstart/train_simple.py --env dev
#
# Design Principles:
#   1. Developer Experience First:
#      - Minimize time from code change to feedback
#      - Clear error messages and debugging information
#      - Hot reload when possible
#      - Fast startup and shutdown
#
#   2. Safety with Flexibility:
#      - Overfitting prevention enabled but less strict
#      - Data validation with warnings instead of errors
#      - Graceful degradation on missing dependencies
#      - Easy override of default settings
#
#   3. Comprehensive Logging:
#      - Detailed logs for all operations
#      - Performance profiling enabled
#      - Memory usage tracking
#      - GPU utilization monitoring
#
#   4. Reproducibility:
#      - Fixed random seeds
#      - Deterministic operations when possible
#      - Version tracking of all dependencies
#      - Configuration versioning
#
# References:
#   Twelve-Factor App Methodology:
#     - Wiggins, A. (2011). "The Twelve-Factor App".
#       https://12factor.net/
#     - Emphasizes environment-specific configuration and development/production parity
#
#   Software Engineering Best Practices:
#     - McConnell, S. (2004). "Code Complete: A Practical Handbook of Software
#       Construction". Microsoft Press.
#     - Martin, R. C. (2008). "Clean Code: A Handbook of Agile Software Craftsmanship".
#       Prentice Hall.
#
#   ML Development Best Practices:
#     - Sculley, D., et al. (2015). "Hidden Technical Debt in Machine Learning Systems".
#       NIPS.
#     - Breck, E., et al. (2017). "The ML Test Score: A Rubric for ML Production
#       Readiness and Technical Debt Reduction". IEEE Big Data.
#
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# Project: AG News Text Classification (ag-news-text-classification)
# Repository: https://github.com/VoHaiDung/ag-news-text-classification

# Metadata section
# Provides information about this configuration file
metadata:
  name: "Development Environment Configuration"
  description: "Configuration for development environment of AG News Text Classification (ag-news-text-classification)"
  project_name: "AG News Text Classification (ag-news-text-classification)"
  project_version: "1.0.0"
  config_version: "1.0.0"
  environment: "dev"
  author: "Võ Hải Dũng"
  email: "vohaidung.work@gmail.com"
  license: "MIT"
  repository: "https://github.com/VoHaiDung/ag-news-text-classification"
  created_date: "2025-09-19"
  last_modified: "2025-09-19"
  
  # Configuration schema validation
  schema_version: "1.0"
  strict_validation: false  # Relaxed validation in dev
  allow_unknown_fields: true
  validate_on_load: true
  
  # Maintenance information
  maintainer: "Võ Hải Dũng"
  support_email: "vohaidung.work@gmail.com"
  documentation_url: "https://github.com/VoHaiDung/ag-news-text-classification/blob/main/docs/"

# Environment-specific settings
# Core environment configuration
environment:
  name: "development"
  mode: "dev"
  debug: true
  verbose: true
  testing: false
  
  # Development flags
  auto_reload: true  # Auto-reload on code changes
  hot_reload_models: false  # Hot reload is experimental
  fail_fast: false  # Continue on non-critical errors
  strict_mode: false  # Allow flexibility for experimentation
  
  # Performance vs Development trade-off
  optimize_for: "development_speed"  # Options: development_speed, accuracy, inference_speed
  enable_profiling: true
  enable_debugging: true
  
  # Data protection
  protect_test_set: true  # Always protect test set even in dev
  allow_data_leakage_warnings: true  # Warn instead of fail
  
  # Reproducibility
  deterministic: true
  seed: 42
  
  # Cleanup
  auto_cleanup: false  # Keep artifacts for debugging
  cleanup_on_exit: false

# Project paths
# All paths relative to project root
paths:
  # Root directories
  project_root: "."
  configs_root: "configs"
  data_root: "data"
  src_root: "src"
  outputs_root: "outputs"
  
  # Data directories
  data:
    raw: "data/raw"
    processed: "data/processed"
    augmented: "data/augmented"
    cache: "data/cache/local_cache"
    test_samples: "data/test_samples"
    metadata: "data/metadata"
  
  # Output directories
  outputs:
    models: "outputs/models"
    checkpoints: "outputs/models/checkpoints"
    results: "outputs/results"
    logs: "outputs/logs/training"
    figures: "outputs/artifacts/figures"
    tensorboard: "outputs/logs/tensorboard"
    mlflow: "outputs/logs/mlflow"
  
  # Development-specific paths
  dev:
    experiments: "outputs/results/experiments/dev"
    quick_tests: "outputs/results/experiments/dev/quick_tests"
    debug_outputs: "outputs/logs/debug"
    profiling: "outputs/profiling"
    temp: "outputs/temp/dev"
  
  # Cache directories
  cache:
    huggingface: "data/cache/huggingface_cache"
    models: "data/cache/model_cache"
    datasets: "data/cache/local_cache"
  
  # Configuration paths
  configs:
    models: "configs/models"
    training: "configs/training"
    data: "configs/data"

# Model configuration
# Development-optimized model settings
model:
  # Quick development model (fast training)
  name: "microsoft/deberta-v3-base"  # Base model for fast iteration
  type: "deberta"
  variant: "base"
  
  # Model parameters
  num_labels: 4  # AG News has 4 classes
  max_length: 256  # Shorter sequences for faster training in dev
  
  # Model loading
  pretrained: true
  use_cache: true
  cache_dir: "data/cache/huggingface_cache"
  trust_remote_code: false
  force_download: false
  resume_download: true
  local_files_only: false
  
  # Dropout (slightly higher for development to prevent quick overfitting)
  hidden_dropout_prob: 0.1
  attention_probs_dropout_prob: 0.1
  classifier_dropout: 0.1
  
  # Development settings
  load_in_8bit: false  # Full precision in dev for better debugging
  load_in_4bit: false
  device_map: "auto"
  low_cpu_mem_usage: true
  
  # Model head configuration
  head:
    type: "classification"
    num_hidden_layers: 0  # Simple head for development
    activation: "gelu"
    pooling_strategy: "cls"
  
  # Alternative models for quick switching
  alternatives:
    fastest: "distilbert-base-uncased"  # For very quick tests
    balanced: "microsoft/deberta-v3-base"  # Default
    accurate: "microsoft/deberta-v3-large"  # For accuracy tests

# PEFT (Parameter-Efficient Fine-Tuning) configuration
# Optional LoRA for faster training of larger models
peft:
  enabled: false  # Disabled by default in dev (full fine-tuning is fine for small models)
  method: "lora"  # Options: lora, qlora, adapter, prefix_tuning, prompt_tuning
  
  # LoRA configuration
  lora:
    rank: 8  # Small rank for fast training
    alpha: 16
    dropout: 0.1
    target_modules: ["query_proj", "value_proj"]
    bias: "none"
    task_type: "SEQ_CLS"
    modules_to_save: ["classifier"]
  
  # Enable for quick testing of large models
  quick_test_mode: true
  allow_override: true

# Training configuration
# Optimized for fast iteration and debugging
training:
  # Training regime
  num_epochs: 3  # Few epochs for quick feedback
  max_steps: -1  # No step limit
  
  # Batch configuration
  batch_size: 16  # Moderate batch size
  eval_batch_size: 32  # Larger batch for faster evaluation
  gradient_accumulation_steps: 1
  
  # Optimization
  optimizer:
    type: "adamw"
    lr: 2e-5  # Standard learning rate
    weight_decay: 0.01
    betas: [0.9, 0.999]
    eps: 1e-8
    amsgrad: false
  
  # Learning rate scheduling
  scheduler:
    type: "linear"
    num_warmup_steps: 0
    warmup_ratio: 0.1
  
  # Mixed precision
  mixed_precision: "no"  # Disabled in dev for better debugging
  fp16: false
  bf16: false
  fp16_opt_level: "O1"
  fp16_backend: "auto"
  
  # Gradient control
  max_grad_norm: 1.0
  gradient_checkpointing: false  # Disabled in dev (uses more memory but faster)
  
  # Training strategy
  evaluation_strategy: "epoch"  # Evaluate every epoch
  save_strategy: "epoch"  # Save every epoch
  logging_strategy: "steps"
  
  # Logging
  logging_steps: 10  # Frequent logging for development
  logging_first_step: true
  logging_nan_inf_filter: true
  
  # Evaluation
  eval_steps: 100
  eval_delay: 0
  eval_on_start: false  # Skip initial evaluation for speed
  
  # Checkpointing
  save_steps: 500
  save_total_limit: 3  # Keep only recent checkpoints
  save_on_each_node: false
  load_best_model_at_end: true
  
  # Metrics
  metric_for_best_model: "eval_loss"
  greater_is_better: false
  
  # Early stopping (relaxed in dev)
  early_stopping:
    enabled: true
    patience: 5  # More patience in dev
    min_delta: 0.001
    monitor: "val_loss"
    mode: "min"
    restore_best_weights: true
    baseline: null
  
  # Regularization
  regularization:
    dropout: 0.1
    attention_dropout: 0.1
    hidden_dropout: 0.1
    weight_decay: 0.01
    label_smoothing: 0.0  # Disabled in dev
    mixup_alpha: 0.0  # Disabled in dev
    cutmix_alpha: 0.0  # Disabled in dev
  
  # Data loading
  dataloader_num_workers: 0  # Single worker for easier debugging
  dataloader_pin_memory: true
  dataloader_drop_last: false
  dataloader_prefetch_factor: 2
  
  # Reproducibility
  seed: 42
  data_seed: 42
  deterministic: true
  
  # Development-specific
  skip_memory_metrics: false
  report_to: ["tensorboard"]  # Simple reporting in dev
  run_name: "dev_run"
  
  # Quick test mode
  quick_test:
    enabled: false  # Enable for very quick tests
    max_train_samples: 1000
    max_eval_samples: 500
    max_test_samples: 500
    num_epochs: 1

# Data configuration
# Development-optimized data settings
data:
  # Dataset
  dataset_name: "ag_news"
  dataset_config: null
  
  # Data paths
  data_dir: "data/raw/ag_news"
  cache_dir: "data/cache/local_cache"
  
  # Data splits
  train_file: null
  validation_file: null
  test_file: null
  
  # Split ratios
  train_ratio: 0.8
  val_ratio: 0.1
  test_ratio: 0.1
  
  # Split strategy
  stratify: true
  shuffle: true
  random_seed: 42
  
  # Sampling (for quick development testing)
  max_samples:
    train: null  # null = use all data, set number for quick tests
    validation: null
    test: null
  
  # Quick test mode
  quick_test_samples:
    train: 1000
    validation: 200
    test: 200
  
  # Text preprocessing
  preprocessing:
    lowercase: false
    remove_html: true
    remove_urls: false
    remove_special_chars: false
    normalize_whitespace: true
    strip: true
  
  # Tokenization
  tokenization:
    max_length: 256  # Shorter in dev
    padding: "max_length"
    truncation: true
    return_tensors: "pt"
    return_attention_mask: true
    return_token_type_ids: false
  
  # Data augmentation (disabled in dev by default)
  augmentation:
    enabled: false
    methods: []
    augmentation_ratio: 0.0
    augmentation_per_sample: 1
  
  # Data validation
  validation:
    check_labels: true
    check_text_lengths: true
    check_duplicates: false  # Slow, disable in dev
    remove_invalid: true
    log_invalid: true
  
  # Caching
  use_cache: true
  cache_processed_data: true
  overwrite_cache: false
  
  # Data loading
  num_proc: 1  # Single process for easier debugging
  keep_in_memory: false  # Don't keep in memory to save RAM

# API configuration
# Development API settings
api:
  # Server configuration
  host: "127.0.0.1"  # Localhost only in dev
  port: 8000
  workers: 1  # Single worker for debugging
  reload: true  # Auto-reload on code changes
  debug: true
  log_level: "debug"
  
  # CORS (permissive in dev)
  cors_enabled: true
  cors_origins: ["*"]
  cors_methods: ["*"]
  cors_headers: ["*"]
  cors_credentials: true
  
  # Rate limiting (relaxed in dev)
  rate_limit:
    enabled: false  # Disabled for development
    requests_per_minute: 1000
    burst: 100
  
  # Authentication (disabled in dev)
  auth:
    enabled: false
    type: "none"
  
  # Request/Response
  max_request_size: 10485760  # 10MB
  request_timeout: 300  # 5 minutes
  
  # API endpoints
  endpoints:
    predict: "/predict"
    batch_predict: "/batch_predict"
    health: "/health"
    metrics: "/metrics"
    docs: "/docs"
    redoc: "/redoc"
  
  # Response format
  response_format: "json"
  include_metadata: true
  include_timing: true
  
  # Development features
  enable_playground: true
  enable_api_docs: true
  enable_metrics: true

# Deployment configuration
# Local development deployment
deployment:
  type: "local"
  platform: "local"
  
  # Docker (optional for dev)
  docker:
    enabled: false
    image_name: "ag-news-dev"
    image_tag: "latest"
    dockerfile: "deployment/docker/Dockerfile.local"
  
  # Model serving
  model_serving:
    framework: "pytorch"
    optimization: "none"  # No optimization in dev
    quantization: false
    pruning: false
    onnx_export: false
  
  # Resources
  resources:
    cpu_limit: null
    memory_limit: null
    gpu_limit: null

# Monitoring configuration
# Development monitoring settings
monitoring:
  enabled: true
  
  # TensorBoard
  tensorboard:
    enabled: true
    log_dir: "outputs/logs/tensorboard"
    update_freq: "batch"
    profile_batch: "10, 20"  # Profile batches 10-20
    histogram_freq: 1
    write_graph: true
    write_images: false
  
  # MLflow
  mlflow:
    enabled: false  # Disabled by default in dev (can be enabled)
    tracking_uri: "outputs/logs/mlflow"
    experiment_name: "ag_news_dev"
    run_name: null  # Auto-generated
    log_artifacts: true
    log_models: false  # Don't log models in dev
  
  # Weights & Biases
  wandb:
    enabled: false  # Disabled in dev (requires account)
    project: "ag-news-text-classification"
    entity: null
    group: "development"
    tags: ["dev", "experiment"]
    notes: "Development run"
  
  # Local metrics
  local_metrics:
    enabled: true
    save_dir: "outputs/logs/local"
    save_interval: 100
    metrics_to_track:
      - "loss"
      - "accuracy"
      - "f1"
      - "learning_rate"
      - "memory_usage"
      - "gpu_utilization"
  
  # Performance monitoring
  performance:
    track_memory: true
    track_gpu: true
    track_time: true
    profile_training: true
    profile_inference: false
  
  # Overfitting monitoring
  overfitting:
    track_train_val_gap: true
    gap_threshold: 0.05
    alert_on_overfitting: true
    log_train_val_comparison: true

# Logging configuration
# Comprehensive logging for development
logging:
  # Log level
  level: "DEBUG"  # Most verbose
  
  # Log format
  format: "%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s"
  date_format: "%Y-%m-%d %H:%M:%S"
  
  # Log outputs
  console:
    enabled: true
    level: "INFO"
    colored: true
  
  file:
    enabled: true
    level: "DEBUG"
    path: "outputs/logs/training/dev.log"
    max_bytes: 10485760  # 10MB
    backup_count: 5
    encoding: "utf-8"
  
  # Component-specific logging
  components:
    data: "DEBUG"
    model: "DEBUG"
    training: "DEBUG"
    evaluation: "INFO"
    api: "DEBUG"
    monitoring: "INFO"
  
  # Third-party library logging
  libraries:
    transformers: "INFO"
    datasets: "INFO"
    torch: "WARNING"
    tensorflow: "WARNING"
  
  # Development features
  log_gpu_stats: true
  log_memory_stats: true
  log_system_stats: true
  log_hyperparameters: true
  log_model_summary: true

# Debugging configuration
# Enhanced debugging for development
debugging:
  enabled: true
  
  # Breakpoint support
  allow_breakpoints: true
  
  # Error handling
  verbose_errors: true
  full_stack_traces: true
  interactive_debugger: false  # Set true to drop into debugger on error
  
  # Gradient debugging
  detect_anomaly: true  # PyTorch autograd anomaly detection
  check_gradients: true
  log_gradient_norms: true
  
  # Numerical stability
  check_numerics: true
  nan_detection: true
  inf_detection: true
  
  # Performance debugging
  profile_memory: true
  profile_time: true
  trace_malloc: false  # Very detailed memory tracing (slow)
  
  # Model debugging
  print_model_summary: true
  save_model_graph: true
  visualize_attention: false  # Can be slow
  
  # Development helpers
  save_failed_batches: true
  log_sample_predictions: true
  log_sample_inputs: true

# Testing configuration
# Settings for running tests in development
testing:
  # Test mode
  enabled: false  # Not in test mode by default
  
  # Test data
  use_test_data: false
  test_data_dir: "data/test_samples"
  
  # Test coverage
  measure_coverage: false
  coverage_threshold: 80
  
  # Unit tests
  unit_tests:
    enabled: true
    test_dir: "tests/unit"
    pattern: "test_*.py"
  
  # Integration tests
  integration_tests:
    enabled: true
    test_dir: "tests/integration"
    pattern: "test_*.py"
  
  # Performance tests
  performance_tests:
    enabled: false
    test_dir: "tests/performance"
  
  # Quick test mode
  quick_test_mode: false
  skip_slow_tests: false

# Overfitting prevention configuration
# Relaxed settings for development
overfitting_prevention:
  enabled: true
  strict_mode: false  # Relaxed in dev
  
  # Test set protection
  test_set_protection:
    enabled: true
    hash_verification: true
    access_logging: true
    max_accesses: null  # Unlimited in dev
  
  # Monitoring
  monitoring:
    track_train_val_gap: true
    gap_threshold: 0.1  # More lenient in dev
    alert_on_overfitting: true
    fail_on_overfitting: false  # Warn only
  
  # Constraints (relaxed in dev)
  constraints:
    max_model_complexity: null  # No limit
    min_validation_size: 0.05  # Minimum 5%
    required_regularization: false
    max_epochs_without_improvement: 10
  
  # Validation strategy
  validation:
    strategy: "holdout"  # Simple holdout in dev
    k_folds: null
    stratified: true
  
  # Recommendations
  recommendations:
    enabled: true
    auto_apply: false  # Manual application in dev
    suggest_regularization: true
    suggest_early_stopping: true

# Security configuration
# Relaxed security for development
security:
  # Authentication
  authentication:
    enabled: false
    type: "none"
  
  # Authorization
  authorization:
    enabled: false
  
  # API security
  api_key_required: false
  token_required: false
  
  # Data privacy
  data_privacy:
    pii_detection: false  # Disabled in dev
    data_masking: false
  
  # Model security
  model_security:
    checksum_verification: false
    signature_verification: false
  
  # Network security
  https_only: false
  ssl_cert: null
  ssl_key: null

# Feature flags
# Enable/disable experimental features
features:
  # Experimental features
  experimental:
    flash_attention: false  # Requires specific GPU
    gradient_checkpointing: false
    model_parallelism: false
    pipeline_parallelism: false
  
  # Advanced features
  advanced:
    ensemble_models: false
    knowledge_distillation: false
    multi_task_learning: false
    curriculum_learning: false
  
  # Optimization features
  optimization:
    mixed_precision: false
    gradient_accumulation: true
    dynamic_batching: false
  
  # Data features
  data:
    augmentation: false
    back_translation: false
    synthetic_generation: false
  
  # Platform features
  platform:
    auto_platform_detection: true
    platform_optimization: true
    quota_tracking: false  # Not needed in local dev
  
  # Development features
  development:
    hot_reload: true
    auto_profiling: true
    interactive_mode: false

# Platform-specific configuration
# Settings for different platforms (dev is typically local)
platform:
  type: "local"
  auto_detect: false  # Explicitly set to local
  
  # Local configuration
  local:
    gpu_enabled: true
    multi_gpu: false
    cpu_fallback: true
    
    # Resource limits
    max_memory_gb: null
    max_gpu_memory_gb: null
    max_cpus: null
  
  # Optimization
  optimization:
    auto_batch_size: false  # Manual control in dev
    auto_precision: false
    memory_efficient: false

# Performance configuration
# Development performance settings
performance:
  # Training performance
  training:
    compile_model: false  # PyTorch 2.0 compile (experimental)
    use_better_transformer: false
    channels_last: false
  
  # Inference performance
  inference:
    batch_size: 32
    num_workers: 1
    use_half_precision: false
  
  # Memory management
  memory:
    gradient_checkpointing: false
    cpu_offload: false
    empty_cache_steps: 100

# Miscellaneous settings
misc:
  # Timezone
  timezone: "UTC"
  
  # Locale
  locale: "en_US.UTF-8"
  
  # Temporary files
  temp_dir: "outputs/temp/dev"
  cleanup_temp: false  # Keep for debugging
  
  # Notifications
  notifications:
    enabled: false
    on_completion: false
    on_error: false
  
  # Backup
  backup:
    enabled: false
    backup_dir: "backup/dev"
  
  # Version control
  git:
    track_changes: true
    commit_on_checkpoint: false

# Validation rules
# Configuration validation settings
validation:
  # Schema validation
  validate_schema: true
  strict_schema: false
  
  # Type checking
  strict_types: false
  coerce_types: true
  
  # Required fields
  check_required_fields: true
  fail_on_missing: false  # Warn only in dev
  
  # Value ranges
  check_ranges: true
  fail_on_invalid_range: false  # Warn only
  
  # Dependencies
  check_dependencies: true
  warn_on_missing_dependencies: true

# Documentation
# Inline documentation for this configuration
documentation:
  description: |
    Development environment configuration for AG News Text Classification.
    
    This configuration is optimized for:
    - Fast iteration and experimentation
    - Comprehensive debugging and logging
    - Local development and testing
    - Flexibility and ease of use
    
    Not suitable for:
    - Production deployment
    - Final accuracy benchmarks
    - Large-scale training
    - Performance optimization
  
  usage: |
    To use this configuration:
    
    1. Set environment variable:
       export ENVIRONMENT=dev
    
    2. Run training:
       python train.py
    
    3. Or specify explicitly:
       python train.py --config configs/environments/dev.yaml
    
    4. For quick tests:
       python train.py --quick-test
  
  tips: |
    Development tips:
    
    - Use smaller batch sizes for faster GPU memory feedback
    - Enable logging.level=DEBUG for detailed logs
    - Set training.num_epochs=1 for very quick tests
    - Use data.quick_test_samples for rapid iteration
    - Enable debugging.detect_anomaly for gradient issues
    - Check outputs/logs/tensorboard for training progress
  
  notes: |
    Important notes:
    
    - Test set is always protected even in dev mode
    - Reproducibility is maintained with fixed seeds
    - Auto-reload may not work with all code changes
    - GPU memory usage may vary based on model size
    - Some features require specific hardware/software

# End of development environment configuration
# Last updated: 2025-09-19
# Maintainer: Võ Hải Dũng (vohaidung.work@gmail.com)
