# AG News Text Classification - Development Environment Configuration
#
# This configuration file defines comprehensive settings for the development
# environment of the AG News Text Classification project. The configuration is
# meticulously optimized for rapid development iteration, experimental research,
# comprehensive debugging, and local-first deployment rather than production
# performance or cloud-based training.
#
# Development Environment Characteristics:
#   Purpose and Scope:
#     - Rapid prototyping and experimentation workflows
#     - Local development with comprehensive debugging capabilities
#     - Research experimentation with relaxed constraints
#     - Code quality validation and integration testing
#     - IDE integration and developer tooling support
#     - Academic research methodology development
#
#   Performance Characteristics:
#     - Fast iteration cycles prioritized over training speed
#     - Reduced dataset sizes for quick feedback loops
#     - Minimal epochs for rapid experimentation
#     - Single-worker data loading for deterministic debugging
#     - No distributed training overhead
#     - Immediate error feedback and stack traces
#
#   Development Features:
#     - Hot code reloading for Python modules
#     - Comprehensive logging at DEBUG level
#     - Enhanced error messages with full stack traces
#     - Memory and GPU profiling enabled by default
#     - TensorBoard integration for real-time monitoring
#     - Interactive debugging support
#     - Automated testing integration
#
#   Resource Allocation:
#     - Local GPU utilization (if available)
#     - CPU fallback for non-GPU environments
#     - Moderate memory footprint for laptop development
#     - Flexible batch sizes for various hardware
#     - No quota constraints or session timeouts
#     - Persistent local storage for all artifacts
#
#   Safety and Validation:
#     - Test set protection maintained (academic integrity)
#     - Overfitting prevention with relaxed thresholds
#     - Data validation with warnings instead of failures
#     - Graceful degradation on missing dependencies
#     - Configuration validation with permissive rules
#     - Reproducibility through deterministic seeding
#
# Project Structure Integration:
#   This configuration integrates with the following project components:
#
#   Core Modules:
#     - src/core/health/health_checker.py: System health validation
#     - src/core/auto_fix/: Automatic configuration fixing
#     - src/deployment/platform_detector.py: Local platform detection
#     - src/deployment/cache_manager.py: Local cache management
#     - src/utils/logging_config.py: Comprehensive logging setup
#
#   Configuration System:
#     - configs/config_loader.py: Dynamic configuration loading
#     - configs/config_validator.py: Schema validation with relaxed mode
#     - configs/smart_defaults.py: Development-aware default values
#     - configs/compatibility_matrix.yaml: Version compatibility
#
#   Training Infrastructure:
#     - src/training/trainers/auto_trainer.py: Quick training workflows
#     - src/training/callbacks/: Comprehensive callback system
#     - src/training/strategies/: Advanced training strategies
#     - src/evaluation/: Detailed evaluation and analysis
#
#   Data Management:
#     - src/data/loaders/dataloader.py: Flexible data loading
#     - src/data/preprocessing/: Complete preprocessing pipeline
#     - src/data/augmentation/: Optional augmentation (disabled in dev)
#     - src/data/validation/: Data quality checks
#
#   Monitoring Systems:
#     - monitoring/local/: Local monitoring infrastructure
#     - monitoring/dashboards/: Real-time dashboards
#     - src/services/monitoring/tensorboard_service.py: TensorBoard
#     - src/services/monitoring/local_metrics_service.py: Metrics tracking
#
#   Development Tools:
#     - tools/profiling/: Performance profiling utilities
#     - tools/debugging/: Debugging helpers
#     - tools/visualization/: Result visualization
#     - tools/config_tools/: Configuration management
#
#   Testing Framework:
#     - tests/unit/: Unit tests for all components
#     - tests/integration/: Integration testing
#     - tests/performance/: Performance benchmarks
#     - tests/e2e/: End-to-end workflows
#
#   Scripts:
#     - scripts/setup/verify_installation.py: Environment validation
#     - scripts/training/train_single_model.py: Quick training
#     - scripts/evaluation/: Evaluation scripts
#     - scripts/local/: Local development utilities
#
#   Quickstart:
#     - quickstart/train_simple.py: Minimal training example
#     - quickstart/evaluate_simple.py: Quick evaluation
#     - quickstart/demo_app.py: Interactive demonstration
#
# Usage Patterns:
#
#   Environment Activation:
#     The development environment is activated automatically when running
#     locally without platform-specific detection.
#
#   Explicit Configuration:
#     export ENVIRONMENT=dev
#     python train.py
#
#   CLI-Based Training:
#     python src/cli.py train --env dev --model deberta-base
#
#   Quick Prototyping:
#     python quickstart/train_simple.py --quick-test
#
#   Interactive Development:
#     python -m src.cli train --env dev --debug
#
# Design Principles and Development Strategies:
#
#   1. Developer Experience First:
#      Strategy: Minimize time from code change to feedback
#      Implementation:
#        - Hot module reloading for Python source files
#        - Immediate error messages with actionable suggestions
#        - Fast training with minimal epochs (3 epochs default)
#        - Quick dataset sampling for rapid iteration
#        - TensorBoard auto-launch on training start
#      Rationale: Developer productivity directly correlates with iteration
#                 speed; faster feedback enables more experimentation
#
#   2. Comprehensive Debugging:
#      Strategy: Provide maximum visibility into system behavior
#      Implementation:
#        - DEBUG-level logging for all components
#        - Full stack traces with local variable inspection
#        - PyTorch autograd anomaly detection enabled
#        - Memory profiling for leak detection
#        - GPU utilization monitoring
#        - Gradient norm tracking
#      Rationale: Deep learning debugging is notoriously difficult; comprehensive
#                 instrumentation accelerates problem diagnosis
#
#   3. Academic Rigor with Flexibility:
#      Strategy: Maintain scientific validity while allowing experimentation
#      Implementation:
#        - Test set protection always enabled (immutable)
#        - Overfitting monitoring with relaxed thresholds (0.1 vs 0.05)
#        - Data leakage warnings instead of failures
#        - Reproducibility through fixed seeds (seed: 42)
#        - Configuration versioning for experiment tracking
#      Rationale: Development requires flexibility but must not compromise
#                 research integrity; test set remains sacred
#
#   4. Local-First Architecture:
#      Strategy: No cloud dependencies or network requirements
#      Implementation:
#        - All data cached locally in data/cache
#        - Models downloaded once and reused
#        - Checkpoints saved to local outputs/
#        - TensorBoard logs accessible offline
#        - No API keys or authentication required
#      Rationale: Developers need consistent environment regardless of network;
#                 local-first enables offline development
#
#   5. Rapid Prototyping Support:
#      Strategy: Enable quick testing of ideas with minimal overhead
#      Implementation:
#        - Quick test mode: 1000 train / 200 val / 200 test samples
#        - Small base model (DeBERTa-base vs large)
#        - Short sequences (256 vs 512 tokens)
#        - Single-worker dataloading for simplicity
#        - No distributed training complexity
#      Rationale: Many experiments fail quickly; optimize for fast failure
#                 and rapid iteration over training time
#
#   6. Progressive Complexity:
#      Strategy: Start simple, add complexity incrementally
#      Implementation:
#        - LoRA disabled by default (full fine-tuning on small model)
#        - No data augmentation initially
#        - Simple holdout validation (no k-fold)
#        - Single-GPU training (no multi-GPU)
#        - Linear learning rate schedule (no complex schedules)
#      Rationale: Complexity should be added only when needed; simpler
#                 configurations are easier to debug and understand
#
#   7. Comprehensive Testing Integration:
#      Strategy: Enable continuous validation during development
#      Implementation:
#        - Unit test execution before training
#        - Integration test suite available
#        - Performance regression detection
#        - Configuration validation on load
#        - Dependency version checking
#      Rationale: Catch errors early before expensive training; automated
#                 testing reduces debugging time
#
# Development Best Practices and References:
#
#   Software Engineering Principles:
#     McConnell, S. (2004). Code Complete: A Practical Handbook of Software
#     Construction (2nd ed.). Microsoft Press.
#     - Emphasizes iterative development and rapid feedback
#     - Advocates for comprehensive error handling
#
#     Martin, R. C. (2008). Clean Code: A Handbook of Agile Software
#     Craftsmanship. Prentice Hall.
#     - Principles of readable and maintainable code
#     - Importance of good naming and documentation
#
#   Twelve-Factor App Methodology:
#     Wiggins, A. (2011). The Twelve-Factor App.
#     https://12factor.net/
#     - Environment-specific configuration (Factor III)
#     - Development/production parity (Factor X)
#     - Logs as event streams (Factor XI)
#
#   Machine Learning Engineering:
#     Sculley, D., Holt, G., Golovin, D., Davydov, E., Phillips, T., Ebner, D.,
#     Chaudhary, V., Young, M., Crespo, J. F., & Dennison, D. (2015). Hidden
#     technical debt in machine learning systems. Advances in Neural Information
#     Processing Systems, 28, 2503-2511.
#     - Technical debt in ML systems
#     - Importance of testing and monitoring
#
#   ML Testing and Validation:
#     Breck, E., Cai, S., Nielsen, E., Salib, M., & Sculley, D. (2017). The ML
#     test score: A rubric for ML production readiness and technical debt
#     reduction. IEEE International Conference on Big Data, 1123-1132.
#     https://doi.org/10.1109/BigData.2017.8258038
#     - Comprehensive testing for ML systems
#     - Production readiness checklist
#
#   Reproducible Research:
#     Peng, R. D. (2011). Reproducible research in computational science.
#     Science, 334(6060), 1226-1227.
#     https://doi.org/10.1126/science.1213847
#     - Importance of reproducibility in computational research
#
#     Stodden, V., & Miguez, S. (2014). Best practices for computational
#     science: Software infrastructure and environments for reproducible and
#     extensible research. Journal of Open Research Software, 2(1).
#     https://doi.org/10.5334/jors.ay
#     - Best practices for reproducible computational research
#
#   Deep Learning Debugging:
#     Raschka, S., Patterson, J., & Nolet, C. (2020). Machine Learning in
#     Python: Main developments and technology trends in data science, machine
#     learning, and artificial intelligence. Information, 11(4), 193.
#     https://doi.org/10.3390/info11040193
#     - Modern ML development practices
#     - Tools and frameworks for ML engineering
#
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT License
# Project: AG News Text Classification (ag-news-text-classification)
# Repository: https://github.com/VoHaiDung/ag-news-text-classification
# Documentation: https://github.com/VoHaiDung/ag-news-text-classification/blob/main/docs/

metadata:
  name: "Development Environment Configuration"
  description: "Production-grade configuration for local development of AG News Text Classification"
  
  project:
    name_display: "AG News Text Classification"
    name_full: "AG News Text Classification (ag-news-text-classification)"
    name_slug: "ag-news-text-classification"
    name_package: "ag_news_text_classification"
    abbreviation: "AGNTC"
  
  version:
    config_version: "1.0.0"
    project_version: "1.0.0"
    schema_version: "1.0.0"
    api_version: "v1"
  
  environment:
    type: "dev"
    platform: "local_development"
    tier: "development"
    mode: "local_machine"
    deployment_type: "development_research"
  
  authorship:
    author: "Võ Hải Dũng"
    email: "vohaidung.work@gmail.com"
    affiliation: null
    orcid: null
  
  legal:
    license: "MIT"
    copyright: "Copyright (c) 2025 Võ Hải Dũng"
    terms_of_use: "https://github.com/VoHaiDung/ag-news-text-classification/blob/main/LICENSE"
  
  repository:
    url: "https://github.com/VoHaiDung/ag-news-text-classification"
    branch: "main"
    commit: null
    documentation: "https://github.com/VoHaiDung/ag-news-text-classification/blob/main/docs/"
    issues: "https://github.com/VoHaiDung/ag-news-text-classification/issues"
  
  timestamps:
    created: "2025-09-19"
    modified: "2025-09-19"
    reviewed: "2025-09-19"
    expires: null
  
  validation:
    schema_validation: true
    strict_mode: false
    allow_unknown_fields: true
    validate_on_load: true
    fail_on_error: false
  
  maintenance:
    maintainer: "Võ Hải Dũng"
    support_email: "vohaidung.work@gmail.com"
    status: "stable"
    stability_level: "development"
  
  development_specifications:
    purpose: "rapid_iteration"
    optimization_target: "developer_experience"
    iteration_speed: "fast"
    debugging_level: "comprehensive"
    logging_verbosity: "debug"
    constraint_strictness: "relaxed"

environment:
  name: "development"
  type: "local"
  mode: "development"
  
  runtime:
    debug: true
    verbose: true
    testing: false
    profiling: true
  
  features:
    auto_reload: true
    hot_reload: true
    fail_fast: false
    strict_mode: false
    warnings_as_errors: false
  
  optimization:
    optimize_for: "development_speed"
    performance_profile: "debugging"
    resource_priority: "developer_experience"
    memory_strategy: "moderate"
  
  protection:
    protect_test_set: true
    prevent_data_leakage: true
    enforce_overfitting_constraints: true
    validate_checkpoints: true
  
  reproducibility:
    deterministic: true
    seed: 42
    enable_cudnn_deterministic: false
    enable_cudnn_benchmark: true
  
  cleanup:
    auto_cleanup: false
    cleanup_on_exit: false
    cleanup_interval_seconds: null
    clear_cuda_cache: false
    garbage_collect: false
  
  development:
    quick_iteration: true
    enable_debugging: true
    enable_profiling: true
    save_debug_artifacts: true
    interactive_mode: false

platform:
  detector:
    module: "src.deployment.platform_detector"
    class: "PlatformDetector"
    auto_detect: true
    detection_method: "environment_inspection"
    fallback_platform: "local"
  
  identifier:
    platform_type: "local"
    platform_name: "Local Development"
    platform_version: "auto"
    cloud_provider: null
    region: "local"
  
  capabilities:
    gpu_available: true
    tpu_available: false
    multi_gpu: false
    distributed_training: false
    mixed_precision: true
    gradient_checkpointing: true
  
  resources:
    tier: "local"
    gpu:
      type: "auto_detect"
      count: 1
      vram_gb: "auto_detect"
      architecture: "auto_detect"
      compute_capability: "auto_detect"
      tensor_cores: "auto_detect"
      fp16_supported: true
      bf16_supported: "auto_detect"
      tf32_supported: "auto_detect"
    
    cpu:
      cores: "auto_detect"
      threads: "auto_detect"
      architecture: "auto_detect"
      model: "auto_detect"
      frequency_ghz: "auto_detect"
    
    memory:
      ram_gb: "auto_detect"
      swap_gb: "auto_detect"
      shared_memory_gb: "auto_detect"
    
    storage:
      available_gb: "auto_detect"
      type: "local_ssd"
      iops: "auto_detect"
      throughput_mbps: "auto_detect"
    
    network:
      bandwidth_mbps: "auto_detect"
      latency_ms: "auto_detect"
      egress_limited: false
  
  limitations:
    session_timeout_hours: null
    idle_timeout_minutes: null
    gpu_quota_limited: false
    storage_ephemeral: false
    ip_changes: false
    network_restrictions: false
  
  optimization:
    auto_detect_capabilities: true
    optimize_for_hardware: true
    enable_platform_specific: false

paths:
  project_root: "."
  
  source:
    root: "src"
    configs: "configs"
    scripts: "scripts"
    notebooks: "notebooks"
    tests: "tests"
    docs: "docs"
  
  data:
    root: "data"
    
    raw:
      root: "data/raw"
      ag_news: "data/raw/ag_news"
    
    processed:
      root: "data/processed"
      train: "data/processed/train"
      validation: "data/processed/validation"
      test: "data/processed/test"
      stratified_folds: "data/processed/stratified_folds"
    
    augmented:
      root: "data/augmented"
      back_translated: "data/augmented/back_translated"
      paraphrased: "data/augmented/paraphrased"
      synthetic: "data/augmented/synthetic"
    
    metadata:
      root: "data/metadata"
      split_info: "data/metadata/split_info.json"
      statistics: "data/metadata/statistics.json"
      test_set_hash: "data/processed/.test_set_hash"
    
    platform_cache:
      root: "data/platform_cache"
      local_cache: "data/platform_cache/local_cache"
    
    quota_tracking:
      root: "data/quota_tracking"
      quota_history: "data/quota_tracking/quota_history.json"
      session_logs: "data/quota_tracking/session_logs.json"
      platform_usage_db: "data/quota_tracking/platform_usage.db"
  
  outputs:
    root: "outputs"
    
    models:
      root: "outputs/models"
      checkpoints: "outputs/models/checkpoints"
      fine_tuned: "outputs/models/fine_tuned"
      lora_adapters: "outputs/models/lora_adapters"
      exported: "outputs/models/exported"
    
    results:
      root: "outputs/results"
      experiments: "outputs/results/experiments"
      benchmarks: "outputs/results/benchmarks"
      overfitting_reports: "outputs/results/overfitting_reports"
      reports: "outputs/results/reports"
    
    logs:
      root: "outputs/logs"
      training: "outputs/logs/training"
      tensorboard: "outputs/logs/tensorboard"
      mlflow: "outputs/logs/mlflow"
      local: "outputs/logs/local"
    
    artifacts:
      root: "outputs/artifacts"
      figures: "outputs/artifacts/figures"
      tables: "outputs/artifacts/tables"
    
    profiling:
      root: "outputs/profiling"
      memory: "outputs/profiling/memory"
      speed: "outputs/profiling/speed"
      traces: "outputs/profiling/traces"
  
  cache:
    root: "cache"
    
    huggingface:
      root: "cache/huggingface"
      models: "cache/huggingface/models"
      datasets: "cache/huggingface/datasets"
      transformers: "cache/huggingface/transformers"
    
    local:
      root: "cache/local"
      preprocessing: "cache/local/preprocessing"
      tokenization: "cache/local/tokenization"
    
    models:
      root: "cache/models"
      pretrained: "cache/models/pretrained"
      temporary: "cache/models/temporary"
  
  temp:
    root: "temp"
    processing: "temp/processing"
    downloads: "temp/downloads"
    extraction: "temp/extraction"
  
  development:
    experiments: "outputs/results/experiments/dev"
    quick_tests: "outputs/results/experiments/dev/quick_tests"
    debug: "outputs/logs/debug"
    profiling_dev: "outputs/profiling/dev"

model:
  selection:
    strategy: "development_optimized"
    tier: "baseline"
    config_source: "configs/models/single/transformers/deberta/deberta_v3_base.yaml"
    fallback_config: "configs/models/single/transformers/roberta/roberta_base.yaml"
  
  architecture:
    base_model: "microsoft/deberta-v3-base"
    model_type: "deberta"
    model_family: "transformers"
    variant: "v3-base"
    
    parameters:
      total_params: 183000000
      trainable_params: 183000000
      frozen_params: 0
      trainable_ratio: 1.0
    
    specifications:
      num_labels: 4
      num_hidden_layers: 12
      hidden_size: 768
      num_attention_heads: 12
      intermediate_size: 3072
      max_position_embeddings: 512
      vocab_size: 128100
  
  tokenizer:
    name: "microsoft/deberta-v3-base"
    type: "DebertaV2Tokenizer"
    
    configuration:
      max_length: 256
      padding: "max_length"
      truncation: true
      truncation_strategy: "longest_first"
      return_tensors: "pt"
      return_attention_mask: true
      return_token_type_ids: false
      add_special_tokens: true
    
    special_tokens:
      cls_token: "[CLS]"
      sep_token: "[SEP]"
      pad_token: "[PAD]"
      unk_token: "[UNK]"
      mask_token: "[MASK]"
  
  loading:
    pretrained: true
    cache_dir: "cache/huggingface/models"
    
    options:
      trust_remote_code: false
      force_download: false
      resume_download: true
      local_files_only: false
      use_auth_token: false
      revision: "main"
    
    memory:
      device_map: "auto"
      low_cpu_mem_usage: true
      torch_dtype: "auto"
      load_in_8bit: false
      load_in_4bit: false
  
  configuration:
    hidden_dropout_prob: 0.1
    attention_probs_dropout_prob: 0.1
    classifier_dropout: 0.1
    
    pooling:
      type: "cls"
      mean_pooling: false
      max_pooling: false
      attention_pooling: false
    
    head:
      type: "classification"
      num_layers: 1
      hidden_size: 768
      activation: "gelu"
      dropout: 0.1
      initializer_range: 0.02

peft:
  enabled: false
  method: "lora"
  config_source: "configs/training/efficient/lora/lora_config.yaml"
  
  lora:
    rank: 8
    alpha: 16
    dropout: 0.1
    
    target_modules:
      - "query_proj"
      - "value_proj"
    
    configuration:
      bias: "none"
      task_type: "SEQ_CLS"
      inference_mode: false
      r: 8
      lora_alpha: 16
      lora_dropout: 0.1
      fan_in_fan_out: false
      merge_weights: false
    
    modules_to_save:
      - "classifier"
    
    init_lora_weights: true
    
    constraints:
      max_rank: 64
      min_rank: 4
      recommended_rank_range: [4, 16]
      rank_selection_strategy: "development_speed"
  
  development:
    enable_for_testing: true
    quick_switch: true

training:
  trainer:
    module: "src.training.trainers.auto_trainer"
    class: "AutoTrainer"
    backend: "huggingface"
    strategy: "development_optimized"
  
  regime:
    num_epochs: 3
    max_steps: -1
    total_steps: null
    warmup_steps: null
    
    evaluation_strategy: "epoch"
    save_strategy: "epoch"
    logging_strategy: "steps"
    
    logging_steps: 10
    eval_steps: null
    save_steps: null
    
    logging_first_step: true
    eval_on_start: false
    save_on_each_node: false
  
  batching:
    per_device_train_batch_size: 16
    per_device_eval_batch_size: 32
    gradient_accumulation_steps: 1
    
    effective_batch_size: 16
    auto_find_batch_size: false
    
    dataloader_num_workers: 0
    dataloader_pin_memory: true
    dataloader_drop_last: false
    dataloader_prefetch_factor: 2
    dataloader_persistent_workers: false
  
  optimization:
    optimizer:
      type: "adamw_torch"
      
      parameters:
        lr: 0.00002
        betas: [0.9, 0.999]
        eps: 0.00000001
        weight_decay: 0.01
        amsgrad: false
      
      clip_grad_norm: 1.0
      clip_grad_value: null
    
    scheduler:
      type: "linear"
      
      parameters:
        num_warmup_steps: 0
        warmup_ratio: 0.1
        min_lr_ratio: 0.0
      
      warmup_strategy: "linear"
  
  precision:
    mixed_precision: "no"
    fp16: false
    bf16: false
    fp16_opt_level: "O1"
    fp16_backend: "auto"
    fp16_full_eval: false
    
    half_precision_backend: "auto"
    
    loss_scaling:
      enabled: false
  
  memory:
    gradient_checkpointing: false
    gradient_checkpointing_kwargs:
      use_reentrant: false
    
    max_grad_norm: 1.0
    
    optimization:
      empty_cache_steps: 100
      garbage_collect_steps: 200
      low_memory_mode: false
  
  checkpointing:
    save_total_limit: 3
    save_safetensors: true
    load_best_model_at_end: true
    
    checkpoint_manager:
      module: "src.deployment.checkpoint_manager"
      class: "CheckpointManager"
      
      strategy: "epoch_based"
      interval_minutes: null
      save_on_interrupt: true
      verify_integrity: true
      compress_checkpoints: false
    
    recovery:
      resume_from_checkpoint: true
      auto_resume: true
      ignore_data_skip: false
      strict_loading: false
  
  metrics:
    metric_for_best_model: "eval_loss"
    greater_is_better: false
    
    metrics_to_compute:
      - "accuracy"
      - "precision"
      - "recall"
      - "f1"
      - "loss"
    
    evaluation:
      prediction_loss_only: false
      include_inputs_for_metrics: false
  
  early_stopping:
    enabled: true
    
    callback:
      module: "src.training.callbacks.early_stopping"
      class: "EarlyStoppingCallback"
    
    parameters:
      patience: 5
      min_delta: 0.001
      monitor: "eval_loss"
      mode: "min"
      restore_best_weights: true
      verbose: true
  
  regularization:
    dropout:
      hidden_dropout: 0.1
      attention_dropout: 0.1
      classifier_dropout: 0.1
      lora_dropout: 0.1
    
    weight_decay: 0.01
    
    label_smoothing: 0.0
    label_smoothing_factor: 0.0
    
    gradient_clipping:
      enabled: true
      max_norm: 1.0
      norm_type: 2
  
  reproducibility:
    seed: 42
    data_seed: 42
    full_determinism: false
    
    torch_deterministic: true
    cudnn_deterministic: false
    cudnn_benchmark: true
  
  callbacks:
    enabled_callbacks:
      - module: "src.training.callbacks.overfitting_monitor"
        class: "OverfittingMonitorCallback"
        priority: 1
      
      - module: "src.training.callbacks.memory_monitor_callback"
        class: "MemoryMonitorCallback"
        priority: 2
      
      - module: "transformers.trainer_callback"
        class: "PrinterCallback"
        priority: 10
    
    disable_default_callbacks: false
  
  reporting:
    report_to:
      - "tensorboard"
    
    run_name: "dev_run"
    output_dir: "outputs/models/checkpoints"
    logging_dir: "outputs/logs/tensorboard"
    
    push_to_hub: false
    hub_model_id: null
    hub_strategy: "every_save"
    hub_token: null
    hub_private_repo: false
  
  quick_test_mode:
    enabled: false
    max_train_samples: 1000
    max_eval_samples: 200
    max_test_samples: 200
    num_epochs: 1

data:
  dataset:
    name: "ag_news"
    source: "huggingface"
    dataset_name: "ag_news"
    dataset_config: null
    
    loader:
      module: "src.data.datasets.ag_news"
      class: "AGNewsDataset"
    
    cache:
      use_cache: true
      cache_dir: "data/cache/local_cache"
      overwrite_cache: false
      download_mode: "reuse_cache_if_exists"
  
  splits:
    strategy: "stratified"
    
    ratios:
      train: 0.8
      validation: 0.1
      test: 0.1
    
    configuration:
      stratify: true
      shuffle: true
      random_seed: 42
    
    validator:
      module: "src.core.overfitting_prevention.validators.split_validator"
      class: "SplitValidator"
      
      checks:
        - "minimum_split_size"
        - "label_distribution"
        - "no_data_leakage"
  
  sampling:
    max_samples:
      train: null
      validation: null
      test: null
    
    quick_test_mode:
      enabled: false
      samples:
        train: 1000
        validation: 200
        test: 200
  
  preprocessing:
    pipeline:
      module: "src.data.preprocessing.text_cleaner"
      steps:
        - name: "normalize_whitespace"
          enabled: true
        - name: "strip"
          enabled: true
        - name: "remove_html"
          enabled: true
        - name: "lowercase"
          enabled: false
    
    configuration:
      lowercase: false
      remove_html: true
      remove_urls: false
      remove_special_chars: false
      normalize_whitespace: true
      strip: true
    
    cache_processed: true
  
  augmentation:
    enabled: false
    
    methods: []
    
    constraints:
      module: "src.core.overfitting_prevention.constraints.augmentation_constraints"
      max_augmentation_ratio: 2.0
      preserve_label_distribution: true
  
  validation:
    checks:
      - "label_validity"
      - "text_length"
      - "encoding_validity"
    
    actions:
      remove_invalid: true
      log_invalid: true
      fail_on_invalid: false
    
    validator:
      module: "src.data.validation.split_strategies"
      class: "DataValidator"
  
  loading:
    num_proc: 1
    keep_in_memory: false
    streaming: false
    
    batch_size: 1000
    writer_batch_size: 1000

monitoring:
  enabled: true
  
  tensorboard:
    enabled: true
    
    service:
      module: "src.services.monitoring.tensorboard_service"
      class: "TensorBoardService"
    
    configuration:
      log_dir: "outputs/logs/tensorboard"
      update_freq: "batch"
      profile_batch: "10,20"
      histogram_freq: 1
      write_graph: true
      write_images: false
      embeddings_freq: 0
    
    development:
      auto_launch: false
      port: 6006
  
  mlflow:
    enabled: false
    
    configuration:
      tracking_uri: "outputs/logs/mlflow"
      experiment_name: "ag_news_dev"
      run_name: "dev_run"
  
  wandb:
    enabled: false
    
    configuration:
      project: "ag-news-text-classification"
      entity: null
      group: "development"
      job_type: "train"
      tags:
        - "dev"
        - "local"
        - "experiment"
      notes: "Development training run"
  
  local_metrics:
    enabled: true
    
    service:
      module: "src.services.monitoring.local_metrics_service"
      class: "LocalMetricsService"
    
    configuration:
      save_dir: "outputs/logs/local"
      save_interval_steps: 10
      
      metrics_to_track:
        - "train_loss"
        - "eval_loss"
        - "eval_accuracy"
        - "eval_f1"
        - "learning_rate"
        - "epoch"
        - "step"
        - "gpu_memory_allocated"
        - "gpu_memory_reserved"
        - "training_time"
  
  overfitting:
    monitor:
      module: "src.core.overfitting_prevention.monitors.training_monitor"
      class: "TrainingMonitor"
    
    configuration:
      track_train_val_gap: true
      gap_threshold: 0.1
      gap_metric: "loss"
      
      alert_on_overfitting: true
      alert_threshold_consecutive: 3
      
      generate_reports: true
      report_frequency_steps: 100
  
  performance:
    track_memory: true
    track_gpu_utilization: true
    track_training_speed: true
    track_system_stats: true
    
    alerts:
      memory_threshold_percent: 90
      gpu_memory_threshold_percent: 90

overfitting_prevention:
  enabled: true
  
  system:
    module: "src.core.overfitting_prevention"
    strict_mode: false
    config_source: "configs/overfitting_prevention"
  
  test_set_protection:
    enabled: true
    
    guard:
      module: "src.core.overfitting_prevention.guards.test_set_guard"
      class: "TestSetGuard"
    
    configuration:
      hash_verification: true
      hash_algorithm: "sha256"
      hash_file: "data/metadata/.test_set_hash"
      
      access_logging: true
      log_file: "data/test_access_log.json"
      
      prevent_access_during_training: true
      allow_final_evaluation: true
  
  monitoring:
    real_time:
      module: "src.core.overfitting_prevention.monitors.overfitting_detector"
      class: "OverfittingDetector"
    
    configuration:
      track_train_val_gap: true
      gap_metrics:
        - "loss"
        - "accuracy"
        - "f1"
      
      thresholds:
        loss_gap: 0.1
        accuracy_gap: 0.05
        f1_gap: 0.05
      
      consecutive_violations: 3
      
      actions:
        alert: true
        log: true
        stop_training: false
        recommend_adjustments: true
  
  constraints:
    enforcer:
      module: "src.core.overfitting_prevention.constraints.constraint_enforcer"
      class: "ConstraintEnforcer"
    
    model_constraints:
      max_model_parameters: null
      max_trainable_parameters: null
      min_parameter_efficiency_ratio: 0.0
      
      lora_constraints:
        max_rank: 64
        recommended_rank: 8
        max_alpha: 64
    
    training_constraints:
      min_validation_ratio: 0.05
      max_epochs_without_improvement: 10
      
      required_regularization: []
    
    data_constraints:
      min_train_samples: 100
      min_validation_samples: 50
      prevent_data_augmentation_in_validation: true
  
  validation:
    data_leakage:
      detector:
        module: "src.core.overfitting_prevention.validators.data_leakage_detector"
        class: "DataLeakageDetector"
      
      checks:
        - "train_val_overlap"
        - "train_test_overlap"
        - "val_test_overlap"
        - "duplicate_samples"
    
    hyperparameter:
      validator:
        module: "src.core.overfitting_prevention.validators.hyperparameter_validator"
        class: "HyperparameterValidator"
      
      rules:
        prevent_tuning_on_test: true
        limit_tuning_iterations: null
        track_tuning_history: true
  
  recommendations:
    recommender:
      module: "src.core.overfitting_prevention.recommendations.config_recommender"
      class: "ConfigRecommender"
    
    generation:
      auto_recommend: true
      recommend_on_overfitting: true
      
      suggestions:
        - "increase_dropout"
        - "increase_weight_decay"
        - "reduce_model_complexity"
        - "increase_data_augmentation"
        - "early_stopping"
  
  reporting:
    reporter:
      module: "src.core.overfitting_prevention.reporting.overfitting_reporter"
      class: "OverfittingReporter"
    
    configuration:
      generate_reports: true
      report_frequency_steps: 100
      output_dir: "outputs/results/overfitting_reports"
      
      report_format: "html"
      include_visualizations: true
      include_recommendations: true

logging:
  configuration:
    version: 1
    disable_existing_loggers: false
  
  formatters:
    standard:
      format: "[%(asctime)s] [%(name)s] [%(levelname)s] %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    
    detailed:
      format: "[%(asctime)s] [%(name)s] [%(levelname)s] [%(filename)s:%(lineno)d] %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    
    simple:
      format: "%(levelname)s - %(message)s"
  
  handlers:
    console:
      class: "logging.StreamHandler"
      level: "INFO"
      formatter: "simple"
      stream: "ext://sys.stdout"
    
    file:
      class: "logging.handlers.RotatingFileHandler"
      level: "DEBUG"
      formatter: "detailed"
      filename: "outputs/logs/local/dev.log"
      maxBytes: 10485760
      backupCount: 5
      encoding: "utf8"
    
    error_file:
      class: "logging.handlers.RotatingFileHandler"
      level: "ERROR"
      formatter: "detailed"
      filename: "outputs/logs/local/dev_errors.log"
      maxBytes: 10485760
      backupCount: 3
      encoding: "utf8"
  
  loggers:
    ag_news_text_classification:
      level: "DEBUG"
      handlers:
        - "console"
        - "file"
        - "error_file"
      propagate: false
    
    ag_news_text_classification.data:
      level: "DEBUG"
    
    ag_news_text_classification.models:
      level: "DEBUG"
    
    ag_news_text_classification.training:
      level: "DEBUG"
    
    ag_news_text_classification.deployment:
      level: "DEBUG"
    
    transformers:
      level: "INFO"
    
    datasets:
      level: "INFO"
    
    torch:
      level: "WARNING"
  
  root:
    level: "INFO"
    handlers:
      - "console"
      - "file"

debugging:
  enabled: true
  
  error_handling:
    verbose_errors: true
    full_stack_traces: true
    interactive_debugger: false
    save_error_state: true
  
  gradient_debugging:
    detect_anomaly: true
    check_gradients: true
    log_gradient_norms: true
  
  numerical_stability:
    check_numerics: true
    nan_detection: true
    inf_detection: true
  
  profiling:
    profile_memory: true
    profile_time: true
    trace_malloc: false
  
  model_debugging:
    print_model_summary: true
    save_model_graph: true
    visualize_attention: false
  
  development_helpers:
    save_failed_batches: true
    log_sample_predictions: true
    log_sample_inputs: true

testing:
  enabled: false
  
  unit_tests:
    enabled: true
    test_dir: "tests/unit"
    pattern: "test_*.py"
  
  integration_tests:
    enabled: true
    test_dir: "tests/integration"
    pattern: "test_*.py"
  
  performance_tests:
    enabled: false
    test_dir: "tests/performance"
  
  quick_test_mode:
    enabled: false
    skip_slow_tests: false

api:
  enabled: false
  
  server:
    host: "127.0.0.1"
    port: 8000
    workers: 1
    reload: true
    debug: true
  
  cors:
    enabled: true
    origins: ["*"]
    methods: ["*"]
    headers: ["*"]
  
  rate_limit:
    enabled: false
  
  authentication:
    enabled: false

performance:
  training:
    optimization_level: "none"
    
    compiler:
      torch_compile: false
      compile_mode: null
      compile_backend: null
    
    transformers:
      use_better_transformer: false
      flash_attention: false
    
    cuda:
      enable_tf32: false
      cudnn_benchmark: true
      cudnn_deterministic: false
    
    dataloader:
      pin_memory: true
      non_blocking: true
      prefetch_factor: 2
      persistent_workers: false
  
  inference:
    batch_size: 32
    precision: "fp32"
    optimization: "none"
  
  profiling:
    enabled: true
    
    configuration:
      profile_memory: true
      profile_time: true
      with_stack: false
      record_shapes: false

features:
  experimental:
    flash_attention: false
    torch_compile: false
    better_transformer: false
  
  advanced:
    ensemble_models: false
    knowledge_distillation: false
    multi_task_learning: false
  
  optimization:
    mixed_precision: false
    gradient_accumulation: true
    gradient_checkpointing: false
    dynamic_batching: false
  
  data:
    augmentation: false
    streaming: false
    caching: true
  
  platform:
    auto_detection: true
    platform_optimization: false
    quota_tracking: false
  
  development:
    hot_reload: true
    auto_profiling: true
    interactive_mode: false

security:
  authentication:
    enabled: false
  
  data_privacy:
    pii_detection: false
    data_masking: false
  
  model_security:
    verify_checksums: false
    trusted_sources_only: true

validation:
  schema:
    validate_on_load: true
    strict_schema: false
    allow_unknown_fields: true
  
  dependencies:
    check_versions: true
    check_gpu: true
    check_cuda: true
  
  paths:
    verify_existence: false
    create_missing: true

documentation:
  description: |
    Development environment configuration for AG News Text Classification.
    Optimized for rapid iteration, comprehensive debugging, and local development.
    
    Features:
    - Fast training with DeBERTa-base model
    - Comprehensive DEBUG-level logging
    - Full error stack traces
    - Memory and GPU profiling
    - TensorBoard integration
    - Test set protection maintained
    - Relaxed overfitting constraints
  
  quickstart: |
    Quick development workflow:
    
    # Standard training
    python src/cli.py train --env dev
    
    # Quick test mode (1000 samples)
    python src/cli.py train --env dev --quick-test
    
    # With TensorBoard
    tensorboard --logdir outputs/logs/tensorboard
    
    # Simple training script
    python quickstart/train_simple.py --env dev
  
  references:
    project_documentation: "https://github.com/VoHaiDung/ag-news-text-classification/blob/main/docs/"
    troubleshooting: "https://github.com/VoHaiDung/ag-news-text-classification/blob/main/TROUBLESHOOTING.md"
  
  related_configs:
    - "configs/models/single/transformers/deberta/deberta_v3_base.yaml"
    - "configs/training/standard/base_training.yaml"
    - "configs/overfitting_prevention/safe_defaults/beginner_safe_defaults.yaml"

maintainer:
  name: "Võ Hải Dũng"
  email: "vohaidung.work@gmail.com"
  last_updated: "2025-09-19"
  version: "1.0.0"
