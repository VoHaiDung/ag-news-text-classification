# Orchestration Service Configuration for AG News Text Classification
# ================================================================================
# This configuration file defines settings for service orchestration including
# workflow management, pipeline coordination, and service discovery.
#
# References:
#   - Microservices Architecture: Aligning Principles, Practices, and Culture (2016)
#   - Building Microservices: Designing Fine-Grained Systems (Newman, 2021)
#
# Author: Võ Hải Dũng
# License: MIT

# Service Metadata
service:
  name: "orchestration-service"
  version: "1.0.0"
  description: "Service orchestration and workflow management"
  namespace: "agnews"
  
# Workflow Management
workflow:
  # Workflow engine
  engine:
    type: "airflow"  # airflow, prefect, argo, temporal
    
    # Airflow configuration
    airflow:
      dag_directory: "${AIRFLOW_DAG_DIR:/dags}"
      executor: "celery"  # local, celery, kubernetes
      parallelism: 32
      dag_concurrency: 16
      max_active_runs: 3
      
  # Workflow definitions
  definitions:
    # Training pipeline
    training_pipeline:
      enabled: true
      schedule: "0 0 * * *"  # Daily at midnight
      steps:
        - name: "data_preparation"
          service: "data-service"
          timeout_minutes: 30
        - name: "model_training"
          service: "training-service"
          timeout_minutes: 360
        - name: "model_evaluation"
          service: "evaluation-service"
          timeout_minutes: 60
        - name: "model_deployment"
          service: "deployment-service"
          timeout_minutes: 30
          
    # Inference pipeline
    inference_pipeline:
      enabled: true
      trigger: "event"  # schedule, event, manual
      steps:
        - name: "preprocessing"
          service: "data-service"
        - name: "prediction"
          service: "prediction-service"
        - name: "postprocessing"
          service: "data-service"
          
    # Monitoring pipeline
    monitoring_pipeline:
      enabled: true
      schedule: "*/5 * * * *"  # Every 5 minutes
      steps:
        - name: "collect_metrics"
          service: "monitoring-service"
        - name: "analyze_drift"
          service: "monitoring-service"
        - name: "generate_alerts"
          service: "alerting-service"
          
# Service Discovery
service_discovery:
  # Discovery mechanism
  mechanism: "consul"  # consul, eureka, etcd, kubernetes
  
  # Consul configuration
  consul:
    host: "${CONSUL_HOST:localhost}"
    port: 8500
    datacenter: "dc1"
    
    # Service registration
    registration:
      enabled: true
      health_check_interval: "10s"
      deregister_critical_after: "1m"
      
    # Service discovery
    discovery:
      cache_ttl_seconds: 30
      retry_attempts: 3
      
# Load Balancing
load_balancing:
  # Strategy
  strategy: "round_robin"  # round_robin, least_connections, weighted, ip_hash
  
  # Health checks
  health_checks:
    enabled: true
    interval_seconds: 10
    timeout_seconds: 5
    unhealthy_threshold: 3
    healthy_threshold: 2
    
  # Circuit breaker
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    recovery_timeout_seconds: 60
    
# Pipeline Coordination
pipeline:
  # Execution engine
  execution:
    mode: "async"  # sync, async
    max_parallel_tasks: 10
    task_timeout_seconds: 300
    
  # State management
  state_management:
    backend: "redis"  # redis, postgresql, dynamodb
    
    # Redis configuration
    redis:
      host: "${REDIS_HOST:localhost}"
      port: 6379
      db: 1
      
  # Error handling
  error_handling:
    retry_policy:
      max_attempts: 3
      backoff_multiplier: 2
      max_backoff_seconds: 60
      
    # Dead letter queue
    dlq:
      enabled: true
      max_retention_days: 7
      
# Message Queue Configuration
message_queue:
  # Queue system
  system: "rabbitmq"  # rabbitmq, kafka, redis, sqs
  
  # RabbitMQ configuration
  rabbitmq:
    host: "${RABBITMQ_HOST:localhost}"
    port: 5672
    username: "${RABBITMQ_USER:guest}"
    password: "${RABBITMQ_PASSWORD:guest}"
    virtual_host: "/"
    
    # Exchange configuration
    exchanges:
      - name: "training"
        type: "topic"
        durable: true
      - name: "inference"
        type: "direct"
        durable: true
        
    # Queue configuration
    queues:
      - name: "training.requests"
        durable: true
        auto_delete: false
      - name: "inference.requests"
        durable: true
        auto_delete: false
        
# Event Bus Configuration
event_bus:
  # Event streaming
  streaming:
    enabled: true
    platform: "kafka"  # kafka, pulsar, nats
    
    # Kafka configuration
    kafka:
      bootstrap_servers: "${KAFKA_BROKERS:localhost:9092}"
      
      # Topics
      topics:
        - name: "model.events"
          partitions: 3
          replication_factor: 1
        - name: "training.events"
          partitions: 3
          replication_factor: 1
          
# Monitoring and Observability
monitoring:
  # Distributed tracing
  tracing:
    enabled: true
    backend: "jaeger"  # jaeger, zipkin, datadog
    sampling_rate: 0.1
    
  # Metrics aggregation
  metrics:
    enabled: true
    backend: "prometheus"
    scrape_interval_seconds: 15
    
  # Logging aggregation
  logging:
    enabled: true
    backend: "elasticsearch"  # elasticsearch, loki, cloudwatch
    
    # Log shipping
    shipping:
      type: "fluentd"  # fluentd, logstash, filebeat
      
# Resource Orchestration
resources:
  # Container orchestration
  container_orchestration:
    platform: "kubernetes"  # kubernetes, docker-swarm, nomad
    
    # Kubernetes configuration
    kubernetes:
      namespace: "agnews"
      
      # Autoscaling
      autoscaling:
        enabled: true
        min_replicas: 2
        max_replicas: 10
        target_cpu_utilization: 70
        
# Security Configuration
security:
  # Service mesh
  service_mesh:
    enabled: false
    platform: "istio"  # istio, linkerd, consul-connect
    
  # Mutual TLS
  mtls:
    enabled: false
    cert_rotation_days: 90
    
  # API Gateway
  api_gateway:
    enabled: true
    type: "kong"  # kong, zuul, tyk
    rate_limiting: true
    authentication: true
