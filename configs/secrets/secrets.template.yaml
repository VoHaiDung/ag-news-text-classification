# System Secrets Configuration Template
# =====================================
#
# This template defines all sensitive configuration values required for the system.
# Copy this file to secrets.yaml and populate with actual values.
# NEVER commit secrets.yaml to version control.
#
# Security best practices:
# - Use environment variables for production deployments
# - Rotate secrets regularly (90 days recommended)
# - Use secret management services (Vault, AWS Secrets Manager, etc.)
# - Implement least privilege access control
#
# References:
# - OWASP Secret Management Cheat Sheet
# - NIST SP 800-57: Key Management Best Practices
#
# Author: Võ Hải Dũng
# License: MIT

# System identification
system:
  environment: "development"  # development | staging | production
  deployment_id: "DEPLOYMENT_ID_PLACEHOLDER"
  instance_id: "INSTANCE_ID_PLACEHOLDER"

# Authentication secrets
authentication:
  # JWT configuration
  jwt:
    secret_key: "JWT_SECRET_KEY_PLACEHOLDER"  # Min 256 bits recommended
    refresh_secret_key: "JWT_REFRESH_SECRET_PLACEHOLDER"
    algorithm: "HS256"
    access_token_expire_minutes: 30
    refresh_token_expire_days: 7
    
  # OAuth2 providers
  oauth2:
    google:
      client_id: "GOOGLE_CLIENT_ID_PLACEHOLDER"
      client_secret: "GOOGLE_CLIENT_SECRET_PLACEHOLDER"
      redirect_uri: "http://localhost:8000/auth/google/callback"
      
    github:
      client_id: "GITHUB_CLIENT_ID_PLACEHOLDER"
      client_secret: "GITHUB_CLIENT_SECRET_PLACEHOLDER"
      redirect_uri: "http://localhost:8000/auth/github/callback"
      
  # API authentication
  api_auth:
    master_key: "MASTER_API_KEY_PLACEHOLDER"
    service_keys:
      prediction_service: "PREDICTION_SERVICE_KEY_PLACEHOLDER"
      training_service: "TRAINING_SERVICE_KEY_PLACEHOLDER"
      data_service: "DATA_SERVICE_KEY_PLACEHOLDER"
      monitoring_service: "MONITORING_SERVICE_KEY_PLACEHOLDER"

# Database credentials
database:
  # Primary database
  primary:
    host: "localhost"
    port: 5432
    database: "ag_news_db"
    username: "DB_USERNAME_PLACEHOLDER"
    password: "DB_PASSWORD_PLACEHOLDER"
    ssl_mode: "require"
    connection_pool_size: 20
    
  # Read replica
  replica:
    host: "localhost"
    port: 5433
    database: "ag_news_db_replica"
    username: "DB_REPLICA_USERNAME_PLACEHOLDER"
    password: "DB_REPLICA_PASSWORD_PLACEHOLDER"
    ssl_mode: "require"
    
  # Vector database (for embeddings)
  vector_db:
    host: "localhost"
    port: 6333
    api_key: "QDRANT_API_KEY_PLACEHOLDER"
    collection_name: "ag_news_embeddings"

# Cache credentials
cache:
  # Redis configuration
  redis:
    host: "localhost"
    port: 6379
    password: "REDIS_PASSWORD_PLACEHOLDER"
    db: 0
    ssl: true
    ssl_cert_path: "/path/to/redis.crt"
    ssl_key_path: "/path/to/redis.key"
    
  # Memcached configuration
  memcached:
    servers:
      - "localhost:11211"
    username: "MEMCACHED_USERNAME_PLACEHOLDER"
    password: "MEMCACHED_PASSWORD_PLACEHOLDER"

# Message queue credentials
message_queue:
  # RabbitMQ
  rabbitmq:
    host: "localhost"
    port: 5672
    username: "RABBITMQ_USERNAME_PLACEHOLDER"
    password: "RABBITMQ_PASSWORD_PLACEHOLDER"
    vhost: "/"
    ssl: true
    
  # Kafka
  kafka:
    bootstrap_servers: "localhost:9092"
    security_protocol: "SASL_SSL"
    sasl_mechanism: "PLAIN"
    sasl_username: "KAFKA_USERNAME_PLACEHOLDER"
    sasl_password: "KAFKA_PASSWORD_PLACEHOLDER"

# Cloud storage credentials
storage:
  # AWS S3
  aws:
    access_key_id: "AWS_ACCESS_KEY_ID_PLACEHOLDER"
    secret_access_key: "AWS_SECRET_ACCESS_KEY_PLACEHOLDER"
    region: "us-west-2"
    bucket_name: "ag-news-models"
    kms_key_id: "KMS_KEY_ID_PLACEHOLDER"
    
  # Google Cloud Storage
  gcp:
    project_id: "PROJECT_ID_PLACEHOLDER"
    credentials_path: "/path/to/gcp-credentials.json"
    bucket_name: "ag-news-models-gcp"
    
  # Azure Blob Storage
  azure:
    account_name: "AZURE_ACCOUNT_NAME_PLACEHOLDER"
    account_key: "AZURE_ACCOUNT_KEY_PLACEHOLDER"
    container_name: "ag-news-models"

# Monitoring and logging
monitoring:
  # Datadog
  datadog:
    api_key: "DATADOG_API_KEY_PLACEHOLDER"
    app_key: "DATADOG_APP_KEY_PLACEHOLDER"
    
  # Sentry
  sentry:
    dsn: "SENTRY_DSN_PLACEHOLDER"
    environment: "development"
    
  # New Relic
  new_relic:
    license_key: "NEW_RELIC_LICENSE_KEY_PLACEHOLDER"
    app_name: "ag-news-classifier"

# Notification services
notifications:
  # Email (SMTP)
  smtp:
    host: "smtp.gmail.com"
    port: 587
    username: "SMTP_USERNAME_PLACEHOLDER"
    password: "SMTP_PASSWORD_PLACEHOLDER"
    use_tls: true
    from_email: "noreply@example.com"
    
  # Slack
  slack:
    webhook_url: "SLACK_WEBHOOK_URL_PLACEHOLDER"
    bot_token: "SLACK_BOT_TOKEN_PLACEHOLDER"
    channel: "#ag-news-alerts"
    
  # Twilio (SMS)
  twilio:
    account_sid: "TWILIO_ACCOUNT_SID_PLACEHOLDER"
    auth_token: "TWILIO_AUTH_TOKEN_PLACEHOLDER"
    from_number: "+1234567890"

# Machine Learning platforms
ml_platforms:
  # Weights & Biases
  wandb:
    api_key: "WANDB_API_KEY_PLACEHOLDER"
    entity: "your-entity"
    project: "ag-news-classification"
    
  # MLflow
  mlflow:
    tracking_uri: "http://localhost:5000"
    username: "MLFLOW_USERNAME_PLACEHOLDER"
    password: "MLFLOW_PASSWORD_PLACEHOLDER"
    
  # Neptune
  neptune:
    api_token: "NEPTUNE_API_TOKEN_PLACEHOLDER"
    project: "your-workspace/ag-news"

# Encryption keys
encryption:
  # Master encryption key (for data at rest)
  master_key: "MASTER_ENCRYPTION_KEY_PLACEHOLDER"  # 256-bit key
  
  # Field-level encryption keys
  field_encryption:
    pii_key: "PII_ENCRYPTION_KEY_PLACEHOLDER"
    sensitive_key: "SENSITIVE_ENCRYPTION_KEY_PLACEHOLDER"
    
  # Key rotation
  key_rotation:
    enabled: true
    rotation_days: 90
    old_keys:  # Keep for decryption of old data
      - key: "OLD_KEY_1_PLACEHOLDER"
        valid_until: "2024-01-01"

# SSL/TLS certificates
certificates:
  # Server certificate
  server:
    cert_path: "/path/to/server.crt"
    key_path: "/path/to/server.key"
    ca_path: "/path/to/ca.crt"
    
  # Client certificates
  client:
    cert_path: "/path/to/client.crt"
    key_path: "/path/to/client.key"

# Security configurations
security:
  # CORS settings
  cors:
    allowed_origins:
      - "http://localhost:3000"
      - "https://app.example.com"
    allowed_methods: ["GET", "POST", "PUT", "DELETE"]
    allowed_headers: ["*"]
    
  # Rate limiting
  rate_limiting:
    enabled: true
    requests_per_minute: 60
    requests_per_hour: 1000
    
  # Session management
  session:
    secret_key: "SESSION_SECRET_KEY_PLACEHOLDER"
    cookie_name: "ag_news_session"
    secure: true
    httponly: true
    samesite: "lax"
    max_age: 86400  # 24 hours

# Backup and recovery
backup:
  # Backup storage
  storage:
    provider: "s3"  # s3 | gcs | azure
    bucket: "ag-news-backups"
    encryption_key: "BACKUP_ENCRYPTION_KEY_PLACEHOLDER"
    
  # Database backup
  database:
    schedule: "0 2 * * *"  # Daily at 2 AM
    retention_days: 30
    
# Compliance and audit
compliance:
  # GDPR compliance
  gdpr:
    data_retention_days: 365
    anonymization_key: "ANONYMIZATION_KEY_PLACEHOLDER"
    
  # Audit logging
  audit:
    enabled: true
    log_level: "INFO"
    retention_days: 90

# Development and testing
development:
  # Test database
  test_db:
    host: "localhost"
    port: 5434
    database: "ag_news_test"
    username: "test_user"
    password: "TEST_PASSWORD_PLACEHOLDER"
    
  # Mock services
  mock_services:
    enabled: false
    api_key: "MOCK_API_KEY_PLACEHOLDER"

# Secret rotation schedule
rotation_schedule:
  api_keys: 90  # days
  database_passwords: 60
  encryption_keys: 180
  certificates: 365
  oauth_secrets: 120

# Validation rules
validation:
  min_password_length: 16
  require_special_chars: true
  require_numbers: true
  require_uppercase: true
  key_complexity: "high"  # low | medium | high

# Notes
notes: |
  Security Checklist:
  1. Never commit actual secrets to version control
  2. Use environment variables in production
  3. Implement secret rotation
  4. Monitor secret usage
  5. Use hardware security modules (HSM) for critical keys
  6. Implement break-glass procedures
  7. Regular security audits
  8. Encrypt secrets at rest and in transit
