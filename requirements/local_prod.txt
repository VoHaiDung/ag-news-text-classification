# ============================================================================
# Local Production Requirements for AG News Text Classification
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Dependencies for local production deployment and serving
# Author: Võ Hải Dũng
# License: MIT
# Python: >=3.8,<3.12
# ============================================================================
# This file contains packages required for:
# - Local production API serving (FastAPI, Uvicorn)
# - Model inference optimization (ONNX, quantization)
# - Local monitoring and logging (TensorBoard, MLflow)
# - Caching and performance optimization
# - Background task processing
# - Health checks and readiness probes
# - Local authentication and security
# - Docker deployment support
# - Systemd service integration
# ============================================================================

# Include ML requirements for model loading
-r ml.txt

# ----------------------------------------------------------------------------
# API Framework and Serving
# ----------------------------------------------------------------------------
# FastAPI for REST API
fastapi>=0.109.0,<0.112.0

# Uvicorn ASGI server with standard extras
uvicorn[standard]>=0.27.0,<0.30.0

# Gunicorn for production WSGI
gunicorn>=21.2.0,<22.1.0

# Starlette (included with FastAPI, but explicit version)
starlette>=0.36.0,<0.38.0

# Pydantic for request/response validation
pydantic>=2.5.0,<2.8.0
pydantic-settings>=2.1.0,<2.3.0

# Python-multipart for file uploads
python-multipart>=0.0.6,<0.0.10

# ----------------------------------------------------------------------------
# CORS and Security
# ----------------------------------------------------------------------------
# CORS middleware (built-in to Starlette)

# Security utilities
python-jose[cryptography]>=3.3.0,<3.4.0
passlib[bcrypt]>=1.7.4,<1.8.0
python-multipart>=0.0.6,<0.0.10

# Rate limiting
slowapi>=0.1.9,<0.2.0

# ----------------------------------------------------------------------------
# API Documentation
# ----------------------------------------------------------------------------
# OpenAPI documentation (built-in to FastAPI)

# ----------------------------------------------------------------------------
# HTTP Client for Health Checks
# ----------------------------------------------------------------------------
# Requests for HTTP calls
requests>=2.31.0,<2.33.0

# HTTPX for async HTTP
httpx>=0.25.0,<0.28.0

# ----------------------------------------------------------------------------
# WebSocket Support
# ----------------------------------------------------------------------------
# WebSockets
websockets>=12.0,<13.0

# Python-socketio
python-socketio>=5.10.0,<5.12.0

# ----------------------------------------------------------------------------
# Server-Sent Events
# ----------------------------------------------------------------------------
# SSE for streaming responses
sse-starlette>=1.8.0,<2.2.0

# ----------------------------------------------------------------------------
# Background Task Processing
# ----------------------------------------------------------------------------
# Celery for distributed task queue
celery>=5.3.0,<5.4.0
celery[redis]>=5.3.0,<5.4.0

# Redis client
redis>=5.0.0,<5.1.0
hiredis>=2.3.0,<2.4.0

# APScheduler for scheduled tasks
apscheduler>=3.10.0,<3.11.0

# ----------------------------------------------------------------------------
# Caching
# ----------------------------------------------------------------------------
# Redis for caching (already included above)
redis>=5.0.0,<5.1.0

# Diskcache for local file-based caching
diskcache>=5.6.3,<5.7.0

# Cachetools for in-memory caching
cachetools>=5.3.0,<5.4.0

# ----------------------------------------------------------------------------
# Database (for local metadata storage)
# ----------------------------------------------------------------------------
# SQLAlchemy ORM
sqlalchemy>=2.0.0,<2.1.0

# SQLite utilities
sqlite-utils>=3.36.0,<3.37.0

# Alembic for migrations
alembic>=1.13.0,<1.14.0

# ----------------------------------------------------------------------------
# Local Monitoring
# ----------------------------------------------------------------------------
# TensorBoard for visualization
tensorboard>=2.15.0,<2.17.0

# MLflow for experiment tracking
mlflow>=2.9.0,<2.15.0

# Prometheus client for metrics
prometheus-client>=0.19.0,<0.21.0

# Statsd client
statsd>=4.0.0,<4.1.0

# ----------------------------------------------------------------------------
# Logging
# ----------------------------------------------------------------------------
# Loguru for structured logging
loguru>=0.7.0,<0.8.0

# Python JSON logger
python-json-logger>=2.0.7,<2.1.0

# Log rotation
# Built-in to loguru

# ----------------------------------------------------------------------------
# Performance Monitoring
# ----------------------------------------------------------------------------
# Py-spy for profiling
py-spy>=0.3.0,<0.4.0

# Memory profiler
memory-profiler>=0.61.0,<0.62.0

# psutil for system monitoring
psutil>=5.9.6,<6.1.0

# GPUtil for GPU monitoring
gputil>=1.4.0,<1.5.0

# PyNVML for NVIDIA GPU
pynvml>=11.5.0,<11.6.0

# ----------------------------------------------------------------------------
# Model Serving Optimization
# ----------------------------------------------------------------------------
# ONNX Runtime for fast inference
onnxruntime>=1.16.0,<1.18.0

# ONNX Runtime GPU (optional)
# onnxruntime-gpu>=1.16.0,<1.18.0

# Model quantization
# Via torch.quantization (built-in)

# ----------------------------------------------------------------------------
# Batch Processing
# ----------------------------------------------------------------------------
# Batch inference utilities
# Custom implementation in src/inference/serving/batch_predictor.py

# ----------------------------------------------------------------------------
# File Storage
# ----------------------------------------------------------------------------
# Local file system utilities
# Built-in pathlib

# File locking
filelock>=3.13.0,<3.15.0

# ----------------------------------------------------------------------------
# Configuration Management
# ----------------------------------------------------------------------------
# YAML parsing
pyyaml>=6.0.1,<7.0.0

# Environment variables
python-dotenv>=1.0.0,<1.1.0

# OmegaConf for complex configs
omegaconf>=2.3.0,<2.4.0

# ----------------------------------------------------------------------------
# Health Checks
# ----------------------------------------------------------------------------
# Health check utilities
# Custom implementation in src/core/health/

# ----------------------------------------------------------------------------
# Service Discovery (for multi-instance)
# ----------------------------------------------------------------------------
# Consul client (optional)
python-consul>=1.1.0,<1.2.0

# ----------------------------------------------------------------------------
# Load Balancing (for multi-instance)
# ----------------------------------------------------------------------------
# HAProxy configuration (external)

# Nginx configuration (external)

# ----------------------------------------------------------------------------
# Process Management
# ----------------------------------------------------------------------------
# Supervisor for process management (external, but config included)

# Systemd service files
# See deployment/local/systemd/

# ----------------------------------------------------------------------------
# Docker Support
# ----------------------------------------------------------------------------
# Docker SDK (for health checks)
docker>=6.1.0,<7.2.0

# ----------------------------------------------------------------------------
# Signal Handling
# ----------------------------------------------------------------------------
# Graceful shutdown
# Built-in signal module

# ----------------------------------------------------------------------------
# Middleware
# ----------------------------------------------------------------------------
# ASGI middleware
# Built-in to Starlette/FastAPI

# Request ID tracking
asgi-correlation-id>=4.3.0,<4.4.0

# ----------------------------------------------------------------------------
# Error Tracking
# ----------------------------------------------------------------------------
# Sentry for error tracking (optional)
sentry-sdk>=1.39.0,<2.8.0

# ----------------------------------------------------------------------------
# Metrics Collection
# ----------------------------------------------------------------------------
# Custom metrics
# Implementation in src/services/monitoring/local_metrics_service.py

# ----------------------------------------------------------------------------
# API Versioning
# ----------------------------------------------------------------------------
# FastAPI versioning
# Custom implementation

# ----------------------------------------------------------------------------
# Response Compression
# ----------------------------------------------------------------------------
# GZip middleware (built-in to Starlette)

# ----------------------------------------------------------------------------
# Request Validation
# ----------------------------------------------------------------------------
# Pydantic (already included above)
pydantic>=2.5.0,<2.8.0

# ----------------------------------------------------------------------------
# JSON Serialization
# ----------------------------------------------------------------------------
# orjson for fast JSON
orjson>=3.9.0,<3.11.0

# ujson alternative
ujson>=5.9.0,<5.11.0

# ----------------------------------------------------------------------------
# Data Serialization
# ----------------------------------------------------------------------------
# MessagePack
msgpack>=1.0.7,<1.1.0

# Protocol Buffers
protobuf>=4.25.0,<5.28.0

# ----------------------------------------------------------------------------
# Time and Date Handling
# ----------------------------------------------------------------------------
# Python-dateutil
python-dateutil>=2.8.2,<2.10.0

# Timezone handling
pytz>=2023.3,<2024.2

# Arrow for datetime
arrow>=1.3.0,<1.4.0

# ----------------------------------------------------------------------------
# UUID Generation
# ----------------------------------------------------------------------------
# UUID utilities (built-in)

# ----------------------------------------------------------------------------
# Hash Functions
# ----------------------------------------------------------------------------
# xxhash for fast hashing
xxhash>=3.4.1,<3.5.0

# ----------------------------------------------------------------------------
# Concurrency
# ----------------------------------------------------------------------------
# Asyncio (built-in)

# Threading utilities (built-in)

# Multiprocessing
multiprocess>=0.70.15,<0.71.0

# ----------------------------------------------------------------------------
# Queue Management
# ----------------------------------------------------------------------------
# Queue (built-in)

# Priority queues (built-in heapq)

# ----------------------------------------------------------------------------
# Job Scheduling
# ----------------------------------------------------------------------------
# APScheduler (already included above)
apscheduler>=3.10.0,<3.11.0

# Crontab parsing
python-crontab>=3.0.0,<3.3.0

# ----------------------------------------------------------------------------
# Backup and Recovery
# ----------------------------------------------------------------------------
# Backup utilities
# Custom scripts in backup/scripts/

# ----------------------------------------------------------------------------
# SSL/TLS Support
# ----------------------------------------------------------------------------
# Cryptography
cryptography>=41.0.7,<43.0.0

# PyOpenSSL
pyopenssl>=23.3.0,<24.3.0

# ----------------------------------------------------------------------------
# Command Line Interface
# ----------------------------------------------------------------------------
# Click for CLI
click>=8.1.7,<8.2.0

# Rich for output
rich>=13.7.0,<13.8.0

# Typer for modern CLI
typer[all]>=0.9.0,<0.13.0

# ----------------------------------------------------------------------------
# Progress Tracking
# ----------------------------------------------------------------------------
# TQDM for progress bars
tqdm>=4.66.0,<4.67.0

# ----------------------------------------------------------------------------
# System Information
# ----------------------------------------------------------------------------
# Platform detection
distro>=1.8.0,<1.10.0

# ----------------------------------------------------------------------------
# Network Utilities
# ----------------------------------------------------------------------------
# URL parsing
urllib3>=2.1.0,<2.3.0

# ----------------------------------------------------------------------------
# Local Authentication
# ----------------------------------------------------------------------------
# Simple token-based auth
# Custom implementation in security/local_auth/simple_token.py

# Local RBAC
# Custom implementation in security/local_auth/local_rbac.py

# ----------------------------------------------------------------------------
# Data Privacy
# ----------------------------------------------------------------------------
# PII detection
presidio-analyzer>=2.2.0,<2.3.0
presidio-anonymizer>=2.2.0,<2.3.0

# ----------------------------------------------------------------------------
# Model Security
# ----------------------------------------------------------------------------
# Model checksums
# Custom implementation in security/model_security/model_checksum.py

# ----------------------------------------------------------------------------
# API Client
# ----------------------------------------------------------------------------
# Requests (already included)
requests>=2.31.0,<2.33.0

# ----------------------------------------------------------------------------
# Testing for Production
# ----------------------------------------------------------------------------
# Pytest for smoke tests
pytest>=7.4.0,<8.3.0

# Requests-mock for testing
requests-mock>=1.11.0,<1.13.0

# ----------------------------------------------------------------------------
# Documentation
# ----------------------------------------------------------------------------
# Markdown for API docs
markdown>=3.5.1,<3.7.0

# ----------------------------------------------------------------------------
# Utilities
# ----------------------------------------------------------------------------
# Type hints
typing-extensions>=4.9.0,<4.12.0

# Retry logic
tenacity>=8.2.3,<8.4.0

# ============================================================================
# Installation Notes for Local Production Requirements
# ============================================================================
# 1. Install local production dependencies:
#    pip install -r requirements/local_prod.txt
#
# 2. Setup local production environment:
#    bash scripts/setup/setup_local_environment.sh
#
# 3. Start local API server:
#    bash deployment/local/scripts/start_all.sh
#    # Or manually:
#    uvicorn src.api.rest.app:app --host 0.0.0.0 --port 8000 --workers 4
#
# 4. Start with Gunicorn (production):
#    gunicorn src.api.rest.app:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
#
# 5. Start local monitoring:
#    bash monitoring/local/setup_local_monitoring.sh
#    # TensorBoard:
#    tensorboard --logdir outputs/logs/tensorboard --port 6006
#    # MLflow:
#    mlflow ui --port 5000
#
# 6. Start background workers:
#    celery -A src.services.local.local_queue_service worker --loglevel=info
#
# 7. Health check:
#    curl http://localhost:8000/health
#    # Or use script:
#    python src/core/health/health_checker.py
#
# 8. API documentation:
#    http://localhost:8000/docs (Swagger UI)
#    http://localhost:8000/redoc (ReDoc)
#
# 9. Prometheus metrics:
#    http://localhost:8000/metrics
#
# 10. Docker deployment:
#     docker-compose -f deployment/docker/docker-compose.local.yml up -d
#
# Production deployment checklist:
# - Set environment variables in .env.local
# - Configure logging levels
# - Setup SSL/TLS certificates
# - Configure rate limiting
# - Setup backup strategy
# - Configure monitoring alerts
# - Test health checks
# - Setup systemd services
# - Configure firewall rules
# - Setup log rotation
#
# Environment variables (.env.local):
# API_HOST=0.0.0.0
# API_PORT=8000
# API_WORKERS=4
# LOG_LEVEL=INFO
# REDIS_URL=redis://localhost:6379
# MODEL_PATH=outputs/models/fine_tuned/
# CACHE_DIR=cache/local/
# MAX_BATCH_SIZE=32
# REQUEST_TIMEOUT=30
# RATE_LIMIT=100/minute
#
# Systemd service:
# - Install: sudo cp deployment/local/systemd/ag-news-api.service /etc/systemd/system/
# - Enable: sudo systemctl enable ag-news-api
# - Start: sudo systemctl start ag-news-api
# - Status: sudo systemctl status ag-news-api
# - Logs: journalctl -u ag-news-api -f
#
# Nginx reverse proxy:
# - Config: deployment/local/nginx/ag-news.conf
# - Install: sudo cp deployment/local/nginx/ag-news.conf /etc/nginx/sites-available/
# - Enable: sudo ln -s /etc/nginx/sites-available/ag-news.conf /etc/nginx/sites-enabled/
# - Test: sudo nginx -t
# - Reload: sudo systemctl reload nginx
#
# Performance tuning:
# - Workers: Number of CPU cores * 2 + 1
# - Worker class: uvicorn.workers.UvicornWorker
# - Timeout: 30-60 seconds
# - Keepalive: 5 seconds
# - Max requests: 1000 (per worker restart)
# - Preload app: True (for faster startup)
#
# Monitoring:
# - TensorBoard: Training metrics, model graphs
# - MLflow: Experiment tracking, model registry
# - Prometheus: API metrics, system metrics
# - Logs: JSON structured logs to file
# - Health checks: /health endpoint
#
# Caching strategy:
# - Model caching: Load once, cache in memory
# - Prediction caching: Cache frequent predictions in Redis
# - Static content: Disk cache
# - Session data: Redis
#
# Scaling:
# - Vertical: Increase workers, memory
# - Horizontal: Multiple instances with load balancer
# - Model parallelism: Multiple GPUs
# - Batch inference: Group requests
#
# Security:
# - API key authentication
# - Rate limiting per IP/user
# - Input validation
# - CORS configuration
# - SSL/TLS encryption
# - PII detection and masking
#
# Backup:
# - Model checkpoints: Daily backup
# - Configuration: Version controlled
# - Logs: Rotate and archive
# - Database: Daily SQLite backup
#
# High availability:
# - Multiple API instances
# - Redis sentinel for failover
# - Health check endpoints
# - Graceful shutdown
# - Rolling updates
#
# Resource requirements:
# - CPU: 4+ cores recommended
# - RAM: 8GB minimum, 16GB recommended
# - GPU: Optional, improves inference speed
# - Disk: 20GB minimum for models and cache
# - Network: 1Gbps for high throughput
#
# Expected performance:
# - Latency: 50-200ms per request (CPU)
# - Latency: 10-50ms per request (GPU)
# - Throughput: 100-500 req/sec (4 workers, CPU)
# - Throughput: 500-2000 req/sec (GPU with batching)
#
# Project-specific endpoints:
# - POST /api/v1/predict: Single prediction
# - POST /api/v1/predict/batch: Batch prediction
# - GET /api/v1/models: List available models
# - GET /api/v1/health: Health check
# - GET /api/v1/metrics: Prometheus metrics
# - GET /docs: API documentation
#
# For detailed deployment guide:
# - See FREE_DEPLOYMENT_GUIDE.md
# - See LOCAL_MONITORING_GUIDE.md
# - See deployment/local/README.md
# - See docs/getting_started/local_setup.md
# ============================================================================
