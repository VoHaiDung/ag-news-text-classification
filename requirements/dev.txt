# ============================================================================
# Development Requirements for AG News Text Classification
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Development tools, testing frameworks, and code quality
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# Python: >=3.8,<3.12
# ============================================================================
#
# Academic Rationale:
#   Following software engineering best practices from "Research Software
#   Engineering with Python" and "The Pragmatic Programmer", this development
#   environment ensures:
#   - Code quality through automated linting and formatting
#   - Comprehensive testing (unit, integration, E2E, performance)
#   - Type safety through static analysis
#   - Security through vulnerability scanning
#   - Documentation through automated generation
#   - Reproducibility through version control integration
#
# Development Workflow:
#   1. Code formatting: black, isort
#   2. Linting: flake8, pylint, ruff
#   3. Type checking: mypy
#   4. Testing: pytest with plugins
#   5. Coverage: pytest-cov
#   6. Security: bandit, safety
#   7. Pre-commit hooks: pre-commit
#   8. Documentation: sphinx, mkdocs
#
# Installation:
#   pip install -r requirements/dev.txt
#
# Quick Start:
#   pre-commit install
#   pytest tests/
#   black src/ tests/
#   mypy src/
#
# ============================================================================

# Include base requirements
-r base.txt

# ============================================================================
# Testing Framework and Plugins
# ============================================================================
# Comprehensive testing infrastructure supporting multiple testing strategies.

# Core pytest framework
# Already in base.txt but extended with plugins
pytest>=7.4.0,<8.3.0

# Code coverage measurement
pytest-cov>=4.1.0,<5.1.0

# Parallel test execution
pytest-xdist>=3.5.0,<3.7.0

# Mock objects and fixtures
pytest-mock>=3.12.0,<3.15.0

# Property-based testing for robustness
hypothesis>=6.92.0,<6.111.0

# Test timeout to prevent hanging
pytest-timeout>=2.2.0,<2.4.0

# Parametrized testing utilities
pytest-cases>=3.8.0,<3.9.0

# Behavior-Driven Development
pytest-bdd>=6.1.0,<7.3.0

# Async testing support
pytest-asyncio>=0.21.0,<0.24.0

# Regression testing
pytest-regressions>=2.5.0,<2.6.0

# Snapshot testing
syrupy>=4.6.0,<4.7.0

# Performance benchmarking
pytest-benchmark>=4.0.0,<4.1.0

# Memory profiling in tests
pytest-memray>=1.5.0,<1.8.0; python_version >= "3.9"

# HTML test reports
pytest-html>=4.1.0,<4.2.0

# JSON test reports for CI
pytest-json-report>=1.5.0,<1.6.0

# Test execution ordering
pytest-order>=1.2.0,<1.3.0

# Repeat failed tests
pytest-repeat>=0.9.0,<0.10.0

# Random test order for independence
pytest-randomly>=3.15.0,<3.16.0

# ============================================================================
# Coverage Analysis
# ============================================================================
# Code coverage tools and reporting.

# Coverage measurement with TOML support
coverage[toml]>=7.3.0,<7.6.0

# Diff coverage for pull requests
diff-cover>=8.0.0,<9.2.0

# Coverage badge generation
coverage-badge>=1.1.0,<1.2.0

# ============================================================================
# Mocking and Test Data
# ============================================================================
# Advanced mocking capabilities for isolated testing.

# HTTP request mocking
responses>=0.24.0,<0.26.0
requests-mock>=1.11.0,<1.13.0

# Time and date mocking
freezegun>=1.4.0,<1.6.0
time-machine>=2.13.0,<2.15.0

# Fake data generation for tests
faker>=20.1.0,<27.1.0

# Factory pattern for test fixtures
factory-boy>=3.3.0,<3.4.0

# ============================================================================
# Code Formatting
# ============================================================================
# Automated code formatting for consistency.

# Black code formatter
# Already in base.txt
black>=23.12.0,<24.5.0

# Import sorting
# Already in base.txt
isort>=5.13.0,<5.14.0

# Alternative PEP 8 formatter
autopep8>=2.0.0,<2.4.0

# YAPF formatter (Google style)
yapf>=0.40.0,<0.41.0

# Format code blocks in documentation
blacken-docs>=1.16.0,<1.17.0

# Notebook cell formatting
nbqa>=1.7.0,<1.9.0

# ============================================================================
# Linting and Static Analysis
# ============================================================================
# Multiple linters for comprehensive code quality checks.

# Flake8 style guide enforcement
# Already in base.txt
flake8>=7.0.0,<7.1.0

# Flake8 plugin ecosystem
flake8-docstrings>=1.7.0,<1.8.0
flake8-bugbear>=23.12.0,<24.5.0
flake8-comprehensions>=3.14.0,<3.15.0
flake8-simplify>=0.21.0,<0.22.0
flake8-annotations>=3.0.0,<3.2.0
flake8-bandit>=4.1.0,<4.2.0
flake8-print>=5.0.0,<5.1.0
flake8-pytest-style>=1.7.0,<2.1.0
flake8-return>=1.2.0,<1.3.0
flake8-type-checking>=2.6.0,<2.8.0
flake8-use-fstring>=1.4.0,<1.5.0

# Pylint for advanced analysis
# Already in base.txt
pylint>=3.0.3,<3.3.0

# Pylint plugins
pylint-pytest>=1.1.0,<1.2.0
pylint-django>=2.5.0,<2.6.0

# Ruff - Fast Python linter in Rust
ruff>=0.1.0,<0.6.0

# Pycodestyle (PEP 8 checker)
pycodestyle>=2.11.0,<2.13.0

# Pydocstyle for docstring conventions
pydocstyle>=6.3.0,<6.4.0

# Pyflakes for error detection
pyflakes>=3.1.0,<3.3.0

# ============================================================================
# Type Checking
# ============================================================================
# Static type analysis tools.

# MyPy static type checker
# Already in base.txt
mypy>=1.8.0,<1.11.0

# Type stubs for third-party libraries
types-requests>=2.31.0,<2.32.0
types-pyyaml>=6.0.0,<6.1.0
types-setuptools>=69.0.0,<71.2.0
types-toml>=0.10.0,<0.11.0
types-six>=1.16.0,<1.17.0
types-protobuf>=4.24.0,<5.28.0
types-python-dateutil>=2.8.0,<2.10.0

# Pyright type checker (Microsoft)
pyright>=1.1.0,<1.2.0

# Pyre type checker (Meta/Facebook)
pyre-check>=0.9.0,<0.10.0; platform_system == "Linux"

# Generate type stubs from runtime
monkeytype>=23.3.0,<23.4.0

# ============================================================================
# Pre-commit Hooks Framework
# ============================================================================
# Automated git hooks for code quality.

# Pre-commit framework
pre-commit>=3.6.0,<3.8.0

# Conventional commits
commitizen>=3.13.0,<3.29.0

# Commit message linting
gitlint>=0.19.0,<0.20.0

# ============================================================================
# Debugging Tools
# ============================================================================
# Enhanced debugging capabilities.

# IPython debugger
ipdb>=0.13.0,<0.14.0

# PDB with improved features
pdbpp>=0.10.0,<0.11.0

# IPython for interactive debugging
# Already in base.txt
ipython>=8.12.0,<8.28.0

# Remote debugging support
debugpy>=1.8.0,<1.9.0

# Visual debugging tool
snoop>=0.4.0,<0.5.0

# Pretty printing for debugging
icecream>=2.1.0,<2.2.0

# ============================================================================
# Performance Profiling
# ============================================================================
# Tools for analyzing code performance.

# Line-by-line profiling
line-profiler>=4.1.0,<4.2.0

# Memory usage profiling
memory-profiler>=0.61.0,<0.62.0

# Sampling profiler
py-spy>=0.3.0,<0.4.0

# CPU/GPU/memory profiler
scalene>=1.5.0,<1.6.0; python_version >= "3.9"

# cProfile visualization
snakeviz>=2.2.0,<2.3.0

# Profiling decorator
profilehooks>=1.12.0,<1.13.0

# Austin frame stack sampler
austin-python>=1.7.0,<1.8.0; platform_system == "Linux"

# ============================================================================
# Documentation Generation
# ============================================================================
# Tools for building project documentation.

# Sphinx documentation generator
sphinx>=7.2.0,<7.4.0
sphinx-rtd-theme>=2.0.0,<2.1.0
sphinx-autodoc-typehints>=1.25.0,<2.3.0
sphinx-copybutton>=0.5.0,<0.6.0
sphinxcontrib-mermaid>=0.9.0,<0.10.0

# MkDocs with Material theme
mkdocs>=1.5.0,<1.7.0
mkdocs-material>=9.5.0,<9.6.0
mkdocstrings[python]>=0.24.0,<0.26.0
mkdocs-jupyter>=0.24.0,<0.25.0

# API documentation generator
pdoc>=14.3.0,<14.7.0

# Docstring coverage checker
interrogate>=1.5.0,<1.6.0

# Changelog generation
towncrier>=23.11.0,<24.8.0

# ============================================================================
# Security Scanning
# ============================================================================
# Security vulnerability detection.

# Security issue scanner
bandit>=1.7.0,<1.8.0
bandit[toml]>=1.7.0,<1.8.0

# Dependency vulnerability checker
safety>=2.3.0,<3.3.0

# License compatibility checker
licensecheck>=2023.3.0,<2024.4.0

# Secret detection in code
detect-secrets>=1.4.0,<1.6.0

# SAST (Static Application Security Testing)
semgrep>=1.52.0,<1.82.0

# ============================================================================
# Code Quality Metrics
# ============================================================================
# Measuring code complexity and maintainability.

# Cyclomatic complexity
radon>=6.0.0,<6.1.0

# McCabe complexity checker
mccabe>=0.7.0,<0.8.0

# Dead code detection
vulture>=2.10.0,<2.12.0

# Unused code finder
dead>=1.5.0,<1.6.0

# Comprehensive code analysis
prospector>=1.10.0,<1.11.0

# ============================================================================
# Dependency Management
# ============================================================================
# Tools for managing project dependencies.

# Pip-tools for requirements management
# Already in base.txt
pip-tools>=7.3.0,<7.5.0

# Poetry dependency manager
poetry>=1.7.0,<1.9.0

# Pipenv alternative
pipenv>=2023.11.0,<2024.1.0

# Dependency tree visualization
pipdeptree>=2.13.0,<2.24.0

# License information
pip-licenses>=4.3.0,<4.5.0

# ============================================================================
# API Testing
# ============================================================================
# HTTP API testing utilities.

# Async HTTP client
# Already in base.txt
httpx>=0.25.0,<0.28.0

# HTTP recording and replay
vcrpy>=5.1.0,<6.1.0

# WebSocket testing
# pytest-websocket>=0.0.1,<0.1.0; python_version >= "3.9"

# ============================================================================
# Notebook Development
# ============================================================================
# Jupyter notebook tools.

# JupyterLab environment
notebook>=7.0.0,<7.3.0
jupyterlab>=4.0.0,<4.3.0

# Notebook testing
nbval>=0.10.0,<0.11.0

# Notebook execution
papermill>=2.5.0,<2.7.0

# Notebook linting
# nbqa already listed above

# Notebook diffing and merging
nbdime>=4.0.0,<4.1.0

# ============================================================================
# Database Testing
# ============================================================================
# Database-specific testing utilities.

# SQLite testing
# pytest-sqlite>=0.1.0,<0.2.0; python_version >= "3.9"

# PostgreSQL testing
pytest-postgresql>=5.0.0,<6.1.0

# ============================================================================
# Container Testing
# ============================================================================
# Docker and container testing.

# Docker SDK
docker>=6.1.0,<7.2.0

# Testcontainers for integration tests
testcontainers>=3.7.0,<4.8.0

# ============================================================================
# Environment Testing
# ============================================================================
# Environment and configuration testing.

# Environment variable testing
pytest-env>=1.1.0,<1.2.0

# ============================================================================
# File System Testing
# ============================================================================
# File and directory testing utilities.

# Temporary file fixtures
# pytest-tmp-files>=0.0.2,<0.1.0

# ============================================================================
# CI/CD Tools
# ============================================================================
# Continuous integration support.

# GitHub Actions local runner
# act>=0.2.0,<0.3.0; python_version >= "3.9"

# ============================================================================
# Build Tools
# ============================================================================
# Package building and distribution.

# Modern build backend
build>=1.0.0,<1.3.0

# Setup tools
setuptools>=69.0.0,<71.3.0
wheel>=0.42.0,<0.45.0

# Package upload to PyPI
twine>=4.0.0,<5.2.0

# ============================================================================
# Mutation Testing
# ============================================================================
# Test suite quality verification.

# Mutation testing tool
mutmut>=2.4.0,<2.5.0

# Advanced mutation testing
# cosmic-ray>=8.3.0,<8.4.0; python_version >= "3.9"

# ============================================================================
# Load Testing
# ============================================================================
# Performance and stress testing.

# Load testing framework
locust>=2.20.0,<2.31.0

# ============================================================================
# Utilities
# ============================================================================
# Development utilities.

# Colored terminal output
colorama>=0.4.6,<0.5.0
termcolor>=2.4.0,<2.5.0

# YAML linting
yamllint>=1.33.0,<1.36.0

# TOML handling
toml>=0.10.0,<0.11.0
tomlkit>=0.12.0,<0.13.0

# ============================================================================
# IDE Support
# ============================================================================
# Editor and IDE integration.

# Refactoring library
rope>=1.11.0,<1.14.0

# Code completion
jedi>=0.19.0,<0.20.0

# Python Language Server
python-lsp-server>=1.10.0,<1.12.0

# ============================================================================
# Multi-Environment Testing
# ============================================================================
# Testing across Python versions and environments.

# Test automation
tox>=4.11.0,<4.17.0

# Alternative test automation
nox>=2023.4.0,<2024.5.0

# ============================================================================
# Performance Regression Detection
# ============================================================================
# Benchmark tracking over time.

# Airspeed Velocity benchmarks
asv>=0.6.0,<0.7.0

# ============================================================================
# Version Control
# ============================================================================
# Git integration tools.

# GitPython
# Already in base.txt
gitpython>=3.1.40,<3.2.0

# Git changelog generation
git-changelog>=2.4.0,<2.6.0

# ============================================================================
# Logging in Tests
# ============================================================================
# Enhanced logging for test debugging.

# Loguru integration with pytest
pytest-loguru>=0.3.0,<0.4.0

# ============================================================================
# Installation and Usage Guide
# ============================================================================
#
# Installation:
#   pip install -r requirements/dev.txt
#
# Setup Development Environment:
#
# 1. Install pre-commit hooks:
#    pre-commit install
#    pre-commit install --hook-type commit-msg
#
# 2. Run all pre-commit hooks manually:
#    pre-commit run --all-files
#
# 3. Update pre-commit hooks:
#    pre-commit autoupdate
#
# Testing:
#
# 1. Run all tests:
#    pytest tests/
#
# 2. Run specific test categories:
#    pytest tests/unit/
#    pytest tests/integration/
#    pytest tests/e2e/
#
# 3. Run with coverage:
#    pytest --cov=src --cov-report=html --cov-report=term
#
# 4. Run parallel tests:
#    pytest -n auto
#
# 5. Generate HTML coverage report:
#    coverage html
#    open htmlcov/index.html
#
# Code Quality:
#
# 1. Format code:
#    black src/ tests/
#    isort src/ tests/
#
# 2. Lint code:
#    flake8 src/ tests/
#    pylint src/
#    ruff check src/ tests/
#
# 3. Type check:
#    mypy src/
#
# Security:
#
# 1. Security scan:
#    bandit -r src/
#
# 2. Dependency vulnerabilities:
#    safety check
#
# 3. Secret detection:
#    detect-secrets scan
#
# 4. SAST scanning:
#    semgrep --config=auto src/
#
# Documentation:
#
# 1. Build Sphinx docs:
#    cd docs/ && make html
#    open docs/_build/html/index.html
#
# 2. Serve MkDocs:
#    mkdocs serve
#    # Visit http://127.0.0.1:8000
#
# 3. Check docstring coverage:
#    interrogate -v src/
#
# Profiling:
#
# 1. Profile script:
#    python -m cProfile -o output.prof script.py
#    snakeviz output.prof
#
# 2. Line profiling:
#    kernprof -l -v script.py
#
# 3. Memory profiling:
#    python -m memory_profiler script.py
#
# 4. Sampling profiler:
#    py-spy record -o profile.svg -- python script.py
#
# Build Package:
#
# 1. Build distribution:
#    python -m build
#
# 2. Check distribution:
#    twine check dist/*
#
# 3. Upload to Test PyPI:
#    twine upload --repository testpypi dist/*
#
# Project-Specific Testing:
#
# 1. Health check:
#    python src/core/health/health_checker.py
#
# 2. Overfitting prevention tests:
#    pytest tests/unit/overfitting_prevention/ -v
#
# 3. Config validation:
#    python tools/config_tools/validate_all_configs.py
#
# 4. IDE sync verification:
#    python tools/ide_tools/sync_ide_configs.py
#
# 5. Dependency verification:
#    python scripts/setup/verify_dependencies.py
#
# 6. Platform detection test:
#    pytest tests/unit/deployment/test_platform_detector.py
#
# CI/CD Integration:
#   - GitHub Actions: .github/workflows/tests.yml
#   - Full CI pipeline: .github/workflows/ci.yml
#   - Pre-commit CI: .pre-commit-config.yaml
#
# For More Information:
#   - Contributing guide: docs/developer_guide/contributing.md
#   - Development workflow: docs/developer_guide/
#   - Tool configurations: setup.cfg, pyproject.toml, .flake8
#   - Pre-commit hooks: .pre-commit-config.yaml
#
# ============================================================================
