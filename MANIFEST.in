# ============================================================================
# Package Manifest for AG News Text Classification
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Specification of files to include in source distribution
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# ============================================================================
#
# Academic Purpose:
#   This manifest ensures reproducibility of research experiments by
#   explicitly specifying which files are included in the distribution.
#   Following PEP 517 and setuptools best practices for scientific
#   software packaging.
#
# Distribution Strategy:
#   - Include: Source code, configs, scripts, documentation, tests
#   - Exclude: Large binaries, training data, model weights, cache files
#   - Rationale: Keep package size manageable while maintaining full
#                functionality through separate data/model download scripts
#
# Syntax Reference:
#   include <pattern>                   - Include files matching pattern
#   recursive-include <dir> <pattern>   - Include recursively from directory
#   exclude <pattern>                   - Exclude files matching pattern
#   recursive-exclude <dir> <pattern>   - Exclude recursively from directory
#   global-exclude <pattern>            - Exclude pattern from all directories
#   graft <dir>                         - Include entire directory tree
#   prune <dir>                         - Exclude entire directory tree
#
# Build and Verification:
#   Build source distribution:    python -m build --sdist
#   Build wheel distribution:     python -m build --wheel
#   Verify contents:              tar -tzf dist/*.tar.gz | less
#   Check size:                   ls -lh dist/
#   Dry run:                      python setup.py sdist --dry-run --verbose
#
# References:
#   - PEP 517: https://peps.python.org/pep-0517/
#   - PEP 621: https://peps.python.org/pep-0621/
#   - Setuptools packaging: https://setuptools.pypa.io/en/latest/userguide/
#   - PyPA packaging guide: https://packaging.python.org/
#
# ============================================================================

# ============================================================================
# Root-Level Documentation Files
# ============================================================================
# Essential documentation that provides project overview, legal information,
# and quick navigation for users and contributors.

include README.md
include LICENSE
include CHANGELOG.md
include CITATION.cff
include CONTRIBUTING.md
include AUTHORS.md

# ============================================================================
# Specialized Academic and Technical Documentation
# ============================================================================
# Comprehensive guides for research methodology, system architecture,
# performance benchmarks, and operational procedures.

include ARCHITECTURE.md
include PERFORMANCE.md
include SECURITY.md
include TROUBLESHOOTING.md
include SOTA_MODELS_GUIDE.md
include OVERFITTING_PREVENTION.md
include ROADMAP.md
include FREE_DEPLOYMENT_GUIDE.md
include PLATFORM_OPTIMIZATION_GUIDE.md
include IDE_SETUP_GUIDE.md
include LOCAL_MONITORING_GUIDE.md
include QUICK_START.md
include HEALTH_CHECK.md

# ============================================================================
# Build System and Package Configuration
# ============================================================================
# Configuration files for setuptools, poetry, and build tools following
# modern Python packaging standards (PEP 517, PEP 621).

include setup.py
include setup.cfg
include MANIFEST.in
include pyproject.toml
include poetry.lock
include Makefile
include install.sh

# ============================================================================
# Environment and Runtime Configuration
# ============================================================================
# Template files for environment variables and runtime configuration.
# Actual secrets are excluded via .gitignore.

include .env.example
include .env.test
include .env.local

# ============================================================================
# Version Control Configuration
# ============================================================================
# Git configuration files for repository management, file handling,
# and Docker containerization.

include .gitignore
include .gitattributes
include .dockerignore
include .editorconfig

# ============================================================================
# Code Quality and Development Tools Configuration
# ============================================================================
# Configuration for automated code quality checks, pre-commit hooks,
# and commit message linting following conventional commits standard.

include .pre-commit-config.yaml
include .flake8
include commitlint.config.js

# ============================================================================
# Python Dependencies Management
# ============================================================================
# Hierarchical requirements files supporting multiple deployment scenarios
# (local, cloud, CPU, GPU, TPU) and use cases (development, production,
# research, minimal deployment).

recursive-include requirements *.txt
recursive-include requirements/lock *.lock
include requirements/lock/README.md

# ============================================================================
# Configuration System
# ============================================================================
# YAML-based configuration system with 300+ config files supporting:
# - Model architectures (transformers, LLMs, ensembles)
# - Training strategies (LoRA, QLoRA, distillation, adversarial)
# - Overfitting prevention (constraints, monitoring, validation)
# - Platform-specific optimization (Colab, Kaggle, local)
# - Deployment scenarios (local, cloud, free-tier)
#
# Includes Jinja2 templates for programmatic config generation.

recursive-include configs *.yaml
recursive-include configs *.yml
recursive-include configs *.json
recursive-include configs *.py
recursive-include configs *.toml
recursive-include configs *.j2
recursive-include configs README.md
recursive-include configs SELECTION_GUIDE.md
recursive-include configs ENSEMBLE_SELECTION_GUIDE.yaml

# ============================================================================
# Source Code Package
# ============================================================================
# Core implementation including:
# - Model architectures (DeBERTa, RoBERTa, ELECTRA, LLaMA, Mistral, etc.)
# - Training framework (standard, distributed, efficient fine-tuning)
# - Overfitting prevention system (validators, monitors, guards)
# - Data pipeline (preprocessing, augmentation, validation)
# - API layer (REST, local, batch, streaming)
# - Deployment utilities (platform detection, quota management)

recursive-include src *.py
recursive-include src *.yaml
recursive-include src *.json
recursive-include src *.txt
recursive-include src README.md
include src/__version__.py

# ============================================================================
# Automation Scripts and Tools
# ============================================================================
# Comprehensive script collection for:
# - Setup and installation (environment, dependencies, verification)
# - Data preparation (download, preprocessing, augmentation, splitting)
# - Training workflows (single models, ensembles, distillation)
# - Evaluation and benchmarking (accuracy, efficiency, robustness)
# - Deployment (local, cloud, platform-specific)
# - CI/CD automation (testing, building, verification)

recursive-include scripts *.py
recursive-include scripts *.sh
recursive-include scripts *.bash
recursive-include scripts README.md

graft scripts/setup
graft scripts/data_preparation
graft scripts/training
graft scripts/evaluation
graft scripts/optimization
graft scripts/deployment
graft scripts/overfitting_prevention
graft scripts/platform
graft scripts/monitoring
graft scripts/ide
graft scripts/local
graft scripts/ci
graft scripts/domain_adaptation

# ============================================================================
# LLM Prompt Templates
# ============================================================================
# Structured prompts for large language model inference supporting:
# - Zero-shot and few-shot classification
# - Chain-of-thought reasoning
# - Instruction-based task specification
# - Knowledge distillation

recursive-include prompts *.txt
recursive-include prompts *.md
recursive-include prompts README.md

# ============================================================================
# Developer Tools and Utilities
# ============================================================================
# Advanced tooling for:
# - Profiling (memory, speed, parameter counting)
# - Debugging (model-specific, overfitting, platform-specific)
# - Visualization (training curves, attention, LoRA weights)
# - Configuration management (generation, validation, synchronization)
# - Compatibility testing (version matrix, platform testing)

recursive-include tools *.py
recursive-include tools *.sh
recursive-include tools README.md

graft tools/profiling
graft tools/debugging
graft tools/visualization
graft tools/config_tools
graft tools/platform_tools
graft tools/cost_tools
graft tools/ide_tools
graft tools/compatibility
graft tools/automation
graft tools/cli_helpers

# ============================================================================
# Visual Documentation Assets
# ============================================================================
# Architecture diagrams, workflow visualizations, and decision trees
# supporting technical documentation and academic presentations.

recursive-include images *.png
recursive-include images *.jpg
recursive-include images *.jpeg
recursive-include images *.svg
recursive-include images *.pdf

# ============================================================================
# Integrated Development Environment Configurations
# ============================================================================
# Support for 10+ development environments with single source of truth
# configuration system ensuring consistency across:
# - Desktop IDEs (VSCode, PyCharm, Sublime Text)
# - Terminal editors (Vim, Neovim)
# - Notebook environments (Jupyter Lab, Jupyter Notebook)
# - Cloud IDEs (Colab, Kaggle, Gitpod, GitHub Codespaces)
#
# Auto-generation and synchronization scripts maintain IDE configuration
# alignment with project standards.

graft .ide

include .ide/SOURCE_OF_TRUTH.yaml

recursive-include .ide/vscode *.json
recursive-include .ide/pycharm *.xml
include .ide/pycharm/README_PYCHARM.md
include .ide/pycharm/settings.zip

recursive-include .ide/jupyter *.py
recursive-include .ide/jupyter *.json
recursive-include .ide/jupyter *.css
recursive-include .ide/jupyter *.js

include .ide/vim/.vimrc
include .ide/vim/coc-settings.json
include .ide/vim/README_VIM.md
recursive-include .ide/vim/ultisnips *.snippets

include .ide/neovim/init.lua
include .ide/neovim/coc-settings.json
include .ide/neovim/README_NEOVIM.md
recursive-include .ide/neovim/lua *.lua

recursive-include .ide/sublime *.sublime-project
recursive-include .ide/sublime *.sublime-workspace
recursive-include .ide/sublime *.sublime-settings
recursive-include .ide/sublime *.sublime-snippet
recursive-include .ide/sublime *.sublime-build
include .ide/sublime/README_SUBLIME.md

recursive-include .ide/cloud_ides *.yml
recursive-include .ide/cloud_ides *.yaml
recursive-include .ide/cloud_ides *.json
recursive-include .ide/cloud_ides *.py
recursive-include .ide/cloud_ides Dockerfile

# ============================================================================
# Development Container Configuration
# ============================================================================
# VSCode development container and GitHub Codespaces configuration
# for consistent development environments.

recursive-include .devcontainer *.json
recursive-include .devcontainer Dockerfile

# ============================================================================
# Git Hooks Management
# ============================================================================
# Husky-based git hooks for commit message validation and
# pre-commit quality checks.

recursive-include .husky *

# ============================================================================
# Code and Configuration Templates
# ============================================================================
# Boilerplate templates for rapid development of:
# - Custom experiments and ablation studies
# - New model architectures
# - Dataset loaders and preprocessors
# - Evaluation metrics
# - IDE-specific configurations (run configs, tasks, snippets)

recursive-include templates *.py
recursive-include templates *.yaml
recursive-include templates *.json
recursive-include templates *.xml
recursive-include templates *.ipynb
recursive-include templates README*.md

# ============================================================================
# Quick Start Resources
# ============================================================================
# Rapid onboarding materials supporting 2-minute to 1-hour workflows:
# - Auto-training demo (fully automated)
# - Quick demo (5 minutes)
# - Research experiment setup (30 minutes)
# - Production deployment (1 hour)
#
# Includes setup wizard, interactive CLI, and decision tree for
# model/platform selection.

recursive-include quickstart *.py
recursive-include quickstart *.ipynb
recursive-include quickstart *.sh
recursive-include quickstart *.md
recursive-include quickstart *.yaml
recursive-include quickstart Dockerfile
recursive-include quickstart docker-compose*.yml

# ============================================================================
# Monitoring and Observability Configuration
# ============================================================================
# Local-first monitoring setup supporting:
# - TensorBoard for training visualization
# - MLflow for experiment tracking
# - Weights & Biases for collaborative monitoring
# - Custom dashboards for overfitting detection and quota management
#
# Docker Compose configurations enable one-command monitoring stack deployment.

recursive-include monitoring *.yaml
recursive-include monitoring *.yml
recursive-include monitoring *.json
recursive-include monitoring *.py
recursive-include monitoring *.sh
recursive-include monitoring README.md
recursive-include monitoring docker-compose*.yml

# ============================================================================
# Security Components
# ============================================================================
# Security modules for:
# - Local authentication and authorization
# - PII detection and data privacy
# - Model security and adversarial defense
# - Checksum verification

recursive-include security *.py
recursive-include security *.yaml
recursive-include security *.md

# ============================================================================
# Data and Configuration Migration Tools
# ============================================================================
# Version migration utilities for backward compatibility when
# updating data schemas, model formats, or configuration structures.

recursive-include migrations *.py
recursive-include migrations README.md

# ============================================================================
# Local Caching System
# ============================================================================
# High-performance caching layer with SQLite backend and
# in-memory LRU cache for model predictions and preprocessed data.

recursive-include cache *.sql
recursive-include cache *.py

# ============================================================================
# Backup and Recovery Strategies
# ============================================================================
# Automated backup scripts and recovery procedures for:
# - Local model checkpoints
# - Experimental results
# - Configuration snapshots
# - Training logs

recursive-include backup *.yaml
recursive-include backup *.sh
recursive-include backup *.md

# ============================================================================
# Deployment Configurations
# ============================================================================
# Multi-platform deployment support:
# - Docker containerization (local and GPU variants)
# - Systemd service definitions for production Linux deployments
# - Nginx reverse proxy configuration
# - Free-tier deployments (HuggingFace Spaces, Streamlit Cloud)
# - Auto-deployment scripts with platform detection
#
# Supports zero-cost monthly operation through optimized resource usage.

recursive-include deployment *.yaml
recursive-include deployment *.yml
recursive-include deployment *.conf
recursive-include deployment *.service
recursive-include deployment *.sh
recursive-include deployment Dockerfile*
recursive-include deployment docker-compose*.yml
recursive-include deployment .dockerignore
recursive-include deployment README.md
recursive-include deployment requirements.txt

graft deployment/docker
graft deployment/auto_deploy
graft deployment/platform_specific
graft deployment/huggingface
graft deployment/streamlit_cloud
graft deployment/local

# ============================================================================
# Web Application and User Interfaces
# ============================================================================
# Streamlit and Gradio applications providing:
# - Single and batch prediction interfaces
# - Model comparison dashboards
# - Overfitting monitoring visualizations
# - Parameter efficiency analysis
# - Real-time inference demonstrations
# - Platform selection and quota management UIs
# - Auto-training configuration interface

recursive-include app *.py
recursive-include app *.yaml
recursive-include app *.css
recursive-include app *.js
recursive-include app *.png
recursive-include app *.jpg
recursive-include app *.svg

graft app/pages
graft app/components
graft app/utils
graft app/assets

# ============================================================================
# Test Suite
# ============================================================================
# Comprehensive testing framework covering:
# - Unit tests for individual components
# - Integration tests for multi-component workflows
# - Platform-specific tests (Colab, Kaggle, local)
# - Performance and benchmark tests
# - End-to-end workflow validation
# - Regression tests for model accuracy
# - Chaos testing for fault tolerance
# - Cross-version compatibility tests
#
# Supports test-driven development and continuous integration.

recursive-include tests *.py
recursive-include tests *.yaml
recursive-include tests *.json
recursive-include tests conftest.py
recursive-include tests README.md

graft tests/unit
graft tests/integration
graft tests/platform_specific
graft tests/performance
graft tests/e2e
graft tests/regression
graft tests/chaos
graft tests/compatibility
graft tests/fixtures

# ============================================================================
# Benchmark Results and Baselines
# ============================================================================
# Empirical results for reproducibility verification:
# - Accuracy benchmarks across model architectures
# - Efficiency metrics (memory, speed, parameter count)
# - Robustness evaluations (adversarial, OOD, contrast sets)
# - Overfitting analysis (train-val-test gaps, LoRA rank studies)

recursive-include benchmarks *.json
recursive-include benchmarks *.yaml
recursive-include benchmarks README.md

graft benchmarks/accuracy
graft benchmarks/efficiency
graft benchmarks/robustness
graft benchmarks/overfitting

# ============================================================================
# Documentation Source
# ============================================================================
# Sphinx/MkDocs documentation source including:
# - Getting started guides for all experience levels
# - Platform-specific deployment guides
# - API reference documentation
# - IDE setup tutorials
# - Best practices and design patterns
# - Troubleshooting and FAQ
# - Architecture decision records
#
# Organized in progressive disclosure pattern from beginner to advanced.

recursive-include docs *.md
recursive-include docs *.rst
recursive-include docs *.py
recursive-include docs *.txt
recursive-include docs conf.py
recursive-include docs Makefile
recursive-include docs make.bat
recursive-include docs requirements.txt

include mkdocs.yml
include docs.yml

recursive-include docs/_static *
recursive-include docs/_templates *
recursive-include docs/cheatsheets *.pdf

graft docs/getting_started
graft docs/level_1_beginner
graft docs/level_2_intermediate
graft docs/level_3_advanced
graft docs/platform_guides
graft docs/user_guide
graft docs/developer_guide
graft docs/api_reference
graft docs/ide_guides
graft docs/tutorials
graft docs/best_practices
graft docs/examples
graft docs/troubleshooting
graft docs/architecture

# ============================================================================
# Jupyter Notebooks
# ============================================================================
# 40+ educational and experimental notebooks organized by:
# - Setup and configuration (7 notebooks for different platforms)
# - Tutorials (17 notebooks covering basic to advanced topics)
# - Exploratory data analysis (8 notebooks)
# - Experimental workflows (10 notebooks for SOTA experiments)
# - Analysis and interpretation (9 notebooks)
# - Deployment demonstrations (7 notebooks)
# - Platform-specific optimizations (15+ notebooks)
#
# Supports interactive learning and reproducible research.

recursive-include notebooks *.ipynb
recursive-include notebooks *.py
recursive-include notebooks *.md
recursive-include notebooks README.md

graft notebooks/00_setup
graft notebooks/01_tutorials
graft notebooks/02_exploratory
graft notebooks/03_experiments
graft notebooks/04_analysis
graft notebooks/05_deployment
graft notebooks/06_platform_specific

# ============================================================================
# Plugin System
# ============================================================================
# Extensibility framework allowing users to add:
# - Custom model architectures
# - Novel data sources and loaders
# - Specialized evaluation metrics
# - Domain-specific preprocessors

recursive-include plugins *.py
recursive-include plugins README.md

graft plugins/custom_models
graft plugins/data_sources
graft plugins/evaluators
graft plugins/processors

# ============================================================================
# Data Directory Structure
# ============================================================================
# Include metadata and test samples while excluding large datasets.
# Actual training data downloaded separately via scripts to keep
# package size manageable.
#
# Test samples support automated testing and quick demonstrations.
# Metadata files enable data provenance tracking and reproducibility.

recursive-include data/test_samples *.json
recursive-include data/test_samples *.csv
recursive-include data/test_samples *.txt
recursive-include data/metadata *.json
recursive-include data/metadata README.md

include data/raw/.gitkeep
include data/raw/ag_news/README.md
include data/processed/.gitkeep
include data/processed/.test_set_hash
include data/augmented/.gitkeep
include data/external/.gitkeep
include data/cache/.gitkeep
include data/pseudo_labeled/.gitkeep
include data/selected_subsets/.gitkeep
include data/platform_cache/.gitkeep
include data/quota_tracking/.gitkeep
include data/test_access_log.json

# ============================================================================
# Output Directory Structure
# ============================================================================
# Preserve directory structure while excluding large output files.
# Users generate outputs locally through training and evaluation scripts.

include outputs/.gitkeep
include outputs/models/.gitkeep
include outputs/models/checkpoints/.gitkeep
include outputs/models/pretrained/.gitkeep
include outputs/models/fine_tuned/.gitkeep
include outputs/models/lora_adapters/.gitkeep
include outputs/models/qlora_adapters/.gitkeep
include outputs/models/ensembles/.gitkeep
include outputs/models/distilled/.gitkeep
include outputs/models/optimized/.gitkeep
include outputs/models/exported/.gitkeep
include outputs/models/prompted/.gitkeep
include outputs/results/.gitkeep
include outputs/results/experiments/.gitkeep
include outputs/results/benchmarks/.gitkeep
include outputs/results/overfitting_reports/.gitkeep
include outputs/results/parameter_efficiency_reports/.gitkeep
include outputs/results/ablations/.gitkeep
include outputs/results/reports/.gitkeep
include outputs/analysis/.gitkeep
include outputs/analysis/error_analysis/.gitkeep
include outputs/analysis/interpretability/.gitkeep
include outputs/analysis/statistical/.gitkeep
include outputs/logs/.gitkeep
include outputs/logs/training/.gitkeep
include outputs/logs/tensorboard/.gitkeep
include outputs/logs/mlflow/.gitkeep
include outputs/logs/wandb/.gitkeep
include outputs/logs/local/.gitkeep
include outputs/profiling/.gitkeep
include outputs/profiling/memory/.gitkeep
include outputs/profiling/speed/.gitkeep
include outputs/profiling/traces/.gitkeep
include outputs/artifacts/.gitkeep
include outputs/artifacts/figures/.gitkeep
include outputs/artifacts/tables/.gitkeep
include outputs/artifacts/lora_visualizations/.gitkeep
include outputs/artifacts/presentations/.gitkeep

# ============================================================================
# GitHub Workflows and CI/CD
# ============================================================================
# Continuous integration workflows for:
# - Automated testing across Python versions
# - Code quality enforcement
# - Documentation building and deployment
# - Benchmark regression detection
# - Overfitting prevention validation
# - Platform compatibility verification
# - Dependency security scanning

recursive-include .github *.yml
recursive-include .github *.yaml
recursive-include .github *.md

graft .github/workflows
graft .github/ISSUE_TEMPLATE

include .github/PULL_REQUEST_TEMPLATE.md
include .github/dependabot.yml

# ============================================================================
# Experiment Management
# ============================================================================
# Experimental framework supporting:
# - Hyperparameter search (Optuna, Ray Tune)
# - Ablation studies (10+ dimensions)
# - SOTA experiments (6-phase progressive pipeline)
# - Baseline comparisons (classical ML and neural baselines)
# - Result aggregation and leaderboard generation

recursive-include experiments *.py
recursive-include experiments *.yaml
recursive-include experiments *.json
recursive-include experiments README.md

graft experiments/hyperparameter_search
graft experiments/benchmarks
graft experiments/baselines
graft experiments/ablation_studies
graft experiments/sota_experiments

include experiments/results/.gitkeep

# ============================================================================
# Global Exclusion Patterns
# ============================================================================
# Exclude runtime artifacts, build outputs, and platform-specific files
# that should not be included in source distribution.
#
# These exclusions prevent distribution bloat and avoid including
# user-specific or machine-specific files.

global-exclude __pycache__
global-exclude *.py[cod]
global-exclude *$py.class
global-exclude *.so
global-exclude *.dylib
global-exclude *.dll

global-exclude .pytest_cache
global-exclude .coverage
global-exclude htmlcov
global-exclude .hypothesis
global-exclude coverage.xml
global-exclude *.cover
global-exclude .tox

global-exclude .ipynb_checkpoints

global-exclude .idea
global-exclude .vscode
global-exclude *.swp
global-exclude *.swo
global-exclude *~

global-exclude .DS_Store
global-exclude Thumbs.db
global-exclude desktop.ini

global-exclude *.pt
global-exclude *.pth
global-exclude *.ckpt
global-exclude *.safetensors
global-exclude *.bin
global-exclude *.h5
global-exclude *.onnx
global-exclude *.pkl
global-exclude *.pickle
global-exclude *.msgpack

global-exclude *.log

exclude .env
exclude .env.prod
exclude .secrets.baseline

# ============================================================================
# Prune Large Data and Output Directories
# ============================================================================
# Exclude directories containing large datasets, model weights, and
# experimental outputs. These are either downloaded separately or
# generated during training.
#
# This strategy keeps the package size under 100MB while maintaining
# full functionality through separate data/model management.

prune data/raw/ag_news
prune data/processed/train
prune data/processed/validation
prune data/processed/test
prune data/processed/stratified_folds
prune data/processed/instruction_formatted
prune data/augmented/back_translated
prune data/augmented/paraphrased
prune data/augmented/synthetic
prune data/augmented/llm_generated
prune data/augmented/mixup
prune data/augmented/contrast_sets
prune data/external/news_corpus
prune data/external/pretrain_data
prune data/external/distillation_data
prune data/cache/local_cache
prune data/cache/model_cache
prune data/cache/huggingface_cache

prune outputs/models/checkpoints
prune outputs/models/pretrained
prune outputs/models/fine_tuned
prune outputs/models/lora_adapters
prune outputs/models/qlora_adapters
prune outputs/models/ensembles
prune outputs/models/distilled
prune outputs/models/optimized
prune outputs/models/exported
prune outputs/results/experiments
prune outputs/logs/training
prune outputs/logs/tensorboard
prune outputs/logs/mlflow
prune outputs/logs/wandb

prune cache/local
prune .cache

prune build
prune dist
prune *.egg-info

prune node_modules

prune experiments/results

prune wandb
prune mlruns

# ============================================================================
# Package Metadata Summary
# ============================================================================
#
# Expected Package Composition:
#   Source code:              5,000+ lines across 200+ modules
#   Configuration files:      300+ YAML configs
#   Documentation:            50+ markdown files
#   Scripts:                  100+ automation scripts
#   Tests:                    150+ test modules
#   Notebooks:                40+ Jupyter notebooks
#   IDE configurations:       10+ development environments
#
# Expected Package Size:
#   Source distribution:      50-100 MB
#   Wheel distribution:       30-60 MB
#
# Post-Installation Steps:
#   1. Download datasets:     python scripts/setup/download_all_data.py
#   2. Download models:       python scripts/setup/download_pretrained_models.py
#   3. Verify installation:   python scripts/setup/verify_installation.py
#   4. Run health check:      ag-news health-check
#
# Verification Commands:
#   List contents:            tar -tzf dist/ag-news-text-classification-*.tar.gz
#   Check size:               ls -lh dist/
#   Verify structure:         tar -tzf dist/*.tar.gz | grep -E "^[^/]+/$" | sort
#   Test installation:        pip install dist/ag-news-text-classification-*.whl
#   Validate imports:         python -c "import src; print(src.__version__)"
#
# ============================================================================
