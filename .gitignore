# ============================================================================
# Git Ignore Configuration for AG News Text Classification
# ============================================================================
# Project: AG News Text Classification (ag-news-text-classification)
# Description: Comprehensive ignore patterns for version control
# Author: Võ Hải Dũng
# Email: vohaidung.work@gmail.com
# License: MIT
# ============================================================================
#
# Academic Rationale:
#   This configuration follows best practices from "Pro Git" (Chacon & Straub)
#   and academic software engineering principles. Proper version control
#   hygiene is essential for reproducible research, ensuring that:
#   - Large binary files do not bloat the repository
#   - Generated artifacts can be regenerated from source
#   - Sensitive credentials are never committed
#   - IDE-specific files do not interfere with collaboration
#   - Platform-specific files are isolated
#
# Pattern Syntax:
#   - Lines starting with # are comments
#   - Blank lines are ignored
#   - Standard glob patterns work (*, ?, [abc], [0-9])
#   - ** matches nested directories
#   - / at start matches from repository root
#   - / at end matches directories only
#   - ! negates a pattern (whitelist)
#
# Design Principles:
#   1. Ignore generated files (can be regenerated)
#   2. Ignore large binaries (use Git LFS or external storage)
#   3. Ignore platform-specific files
#   4. Ignore IDE-specific files
#   5. Ignore sensitive credentials
#   6. Whitelist essential files with ! prefix
#
# Verification Commands:
#   Check what would be ignored:     git status --ignored
#   Debug ignore pattern:            git check-ignore -v <file>
#   List all ignored files:          git ls-files --others --ignored --exclude-standard
#   Check if file is ignored:        git check-ignore <file> && echo "ignored" || echo "tracked"
#
# References:
#   - Git documentation: https://git-scm.com/docs/gitignore
#   - GitHub gitignore templates: https://github.com/github/gitignore
#   - Atlassian Git tutorials: https://www.atlassian.com/git/tutorials/saving-changes/gitignore
#
# ============================================================================

# ============================================================================
# Python Runtime and Build Artifacts
# ============================================================================
# Bytecode, compiled extensions, and build outputs that can be regenerated
# from source code. Following PEP 3147 (bytecode cache) and setuptools
# conventions.

__pycache__/
*.py[cod]
*$py.class
*.so
*.dylib
*.dll

# ============================================================================
# Python Package Distribution
# ============================================================================
# Distribution and packaging artifacts generated by setuptools, pip, and
# modern build tools (PEP 517/518). These are build outputs that should
# be regenerated for each release.

build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
pip-wheel-metadata/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# ============================================================================
# Python Virtual Environments
# ============================================================================
# Virtual environment directories created by venv, virtualenv, conda, etc.
# Each developer should create their own environment from requirements files.

.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/
.virtualenv/
.pyenv/
.conda/
__pypackages__/

# ============================================================================
# Python Testing and Coverage
# ============================================================================
# Test execution artifacts, coverage reports, and testing tool outputs.
# These are regenerated on each test run and should not be versioned.

htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
.test_cache/
test_outputs/

# ============================================================================
# Python Development Tools
# ============================================================================
# Artifacts from various Python development and documentation tools.

profile_default/
ipython_config.py
.python-version
Pipfile.lock
.pdm.toml
.pybuilder/
target/
.mypy_cache/
.dmypy.json
dmypy.json
.pyre/
.pytype/
cython_debug/

# Python documentation builds
docs/_build/
docs/.doctrees/
docs/_static/
docs/_templates/
site/

# Sphinx
.buildinfo
.doctrees

# ============================================================================
# Machine Learning Model Artifacts
# ============================================================================
# Model weights, checkpoints, and serialized models. These binary files are
# typically large and should be stored in Git LFS, DVC, or cloud storage.
# Following conventions from PyTorch, TensorFlow, Hugging Face, and ONNX.

*.pt
*.pth
*.ckpt
*.safetensors
*.bin
*.msgpack
*.h5
*.hdf5
*.pb
*.onnx
*.tflite
*.keras
*.weights
*.pkl
*.pickle
*.joblib
*.tar
*.model

# TensorFlow specific
checkpoint
*.tfrecord
*.tfevents.*
saved_model/

# PyTorch Lightning
lightning_logs/

# ============================================================================
# Project Data Directories
# ============================================================================
# Data directories following the project structure. Raw and processed data
# are excluded as they should be downloaded via scripts or managed with DVC.

data/raw/ag_news/train.csv
data/raw/ag_news/test.csv

data/processed/train/
data/processed/validation/
data/processed/test/
data/processed/stratified_folds/
data/processed/instruction_formatted/

data/augmented/back_translated/
data/augmented/paraphrased/
data/augmented/synthetic/
data/augmented/llm_generated/
data/augmented/mixup/
data/augmented/contrast_sets/

data/external/news_corpus/
data/external/pretrain_data/
data/external/distillation_data/

data/pseudo_labeled/
data/selected_subsets/

data/cache/
data/platform_cache/

# ============================================================================
# Model Outputs and Checkpoints
# ============================================================================
# Trained models, fine-tuned checkpoints, and optimized versions.
# Following the outputs/ directory structure from project.

outputs/models/checkpoints/
outputs/models/pretrained/
outputs/models/fine_tuned/
outputs/models/lora_adapters/
outputs/models/qlora_adapters/
outputs/models/ensembles/
outputs/models/distilled/
outputs/models/optimized/
outputs/models/exported/
outputs/models/prompted/

# ============================================================================
# Experimental Results and Analysis
# ============================================================================
# Experiment outputs, benchmarks, reports, and analysis artifacts.

outputs/results/experiments/
outputs/results/benchmarks/
outputs/results/overfitting_reports/
outputs/results/parameter_efficiency_reports/
outputs/results/ablations/
outputs/results/reports/

outputs/analysis/error_analysis/
outputs/analysis/interpretability/
outputs/analysis/statistical/

# ============================================================================
# Logging and Profiling
# ============================================================================
# Training logs, profiling outputs, and debugging traces.

outputs/logs/
outputs/logs/training/
outputs/logs/tensorboard/
outputs/logs/mlflow/
outputs/logs/wandb/
outputs/logs/local/

outputs/profiling/memory/
outputs/profiling/speed/
outputs/profiling/traces/

*.log
*.log.*
*.trace
*.prof
*.lprof
*.py.lprof
profile_*.txt

# ============================================================================
# Visualization Artifacts
# ============================================================================
# Generated figures, tables, and presentation materials.

outputs/artifacts/figures/
outputs/artifacts/tables/
outputs/artifacts/lora_visualizations/
outputs/artifacts/presentations/

# ============================================================================
# Experiment Tracking Platforms
# ============================================================================
# Directories created by experiment tracking tools. Each platform maintains
# its own local cache and metadata.

wandb/
artifacts/

mlruns/
mlartifacts/
.mlflow/

runs/
events.out.tfevents.*

.neptune/
.comet/
.clearml/
.dvc/

experiments/results/

# ============================================================================
# Caching Systems
# ============================================================================
# Local caches for models, datasets, and preprocessed data.

.cache/
cache/
.torch/
.huggingface/
transformers_cache/
model_cache/

cache/local/
cache/model_cache/
cache/huggingface_cache/

data/cache/local_cache/
data/cache/model_cache/
data/cache/huggingface_cache/

# ============================================================================
# Platform-Specific Data and Quota Tracking
# ============================================================================
# Platform-specific caches and quota management databases.

data/platform_cache/colab_cache/
data/platform_cache/kaggle_cache/
data/platform_cache/local_cache/

data/quota_tracking/quota_history.json
data/quota_tracking/session_logs.json
data/quota_tracking/platform_usage.db

# ============================================================================
# Monitoring and Metrics
# ============================================================================
# Local monitoring stack data directories.

monitoring/local/data/
monitoring/local/prometheus/
monitoring/local/grafana/

# ============================================================================
# IDE Configurations - VSCode
# ============================================================================
# VSCode workspace settings. Project provides shared settings in .ide/vscode/
# but local overrides should not be committed.

.vscode/
.vscode-server/
*.code-workspace
.history/

# ============================================================================
# IDE Configurations - PyCharm / IntelliJ
# ============================================================================
# JetBrains IDE project files. Shared configurations are in .ide/pycharm/

.idea/
.idea/**/workspace.xml
.idea/**/tasks.xml
.idea/**/usage.statistics.xml
.idea/**/dictionaries
.idea/**/shelf
.idea/**/contentModel.xml
.idea/**/dataSources/
.idea/**/dataSources.ids
.idea/**/dataSources.local.xml
.idea/**/sqlDataSources.xml
.idea/**/dynamic.xml
.idea/**/uiDesigner.xml
.idea/**/dbnavigator.xml
*.iml
*.ipr
*.iws
.idea_modules/
.fleet/

# ============================================================================
# IDE Configurations - Sublime Text
# ============================================================================
# Sublime Text project files. Shared configs in .ide/sublime/

*.sublime-project
*.sublime-workspace
.sublime/

# ============================================================================
# IDE Configurations - Vim / Neovim
# ============================================================================
# Vim/Neovim temporary and session files. Shared configs in .ide/vim/ and .ide/neovim/

*.swp
*.swo
*.swn
*~
.vim/
.neovim/
*.un~
Session.vim
.netrwhist
tags
tags.lock
tags.temp

# ============================================================================
# IDE Configurations - Emacs
# ============================================================================

*~
\#*\#
.\#*
.dir-locals.el
auto-save-list
tramp
.\#*
*.elc

# ============================================================================
# IDE Configurations - Other Editors
# ============================================================================

.project
.pydevproject
.settings/
.atom/
.eclipse/

# ============================================================================
# Cloud IDE Configurations
# ============================================================================
# Cloud IDE local state and caches.

.gitpod/local/
.devcontainer/local/
.colab/
.kaggle/local/

# ============================================================================
# Jupyter Notebooks
# ============================================================================
# Notebook checkpoints and converted outputs. Keep .ipynb files but exclude
# execution outputs (handled by nbstripout in pre-commit).

.ipynb_checkpoints/
*.ipynb_checkpoints/
notebooks/**/*.nbconvert.ipynb

# ============================================================================
# Operating System Files
# ============================================================================

.DS_Store
.AppleDouble
.LSOverride
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.stackdump
[Dd]esktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# ============================================================================
# Docker and Containerization
# ============================================================================

.docker/
docker-compose.override.yml
.kube/

# ============================================================================
# Security and Secrets
# ============================================================================
# Environment files containing credentials and API keys.
# Template files (.env.example) are kept in version control.

.env
.env.local
.env.prod
.env.production
.env.development
.env.staging
.secrets
.secrets.yaml
secrets.yaml
*.key
*.pem
*.crt
*.p12
*.pfx
credentials.json
service-account.json
token.json
.secrets.baseline

configs/secrets/local_secrets.yaml

# ============================================================================
# Backup and Temporary Files
# ============================================================================

*.bak
*.backup
*.old
*.orig
*.tmp
*.temp
.backups/
backup/
backups/
tmp/
temp/

backup/strategies/local_backup_data/

# ============================================================================
# Archive Files
# ============================================================================

*.zip
*.tar
*.tar.gz
*.tgz
*.rar
*.7z
*.gz
*.bz2
*.xz

# ============================================================================
# Database Files
# ============================================================================

*.sqlite
*.sqlite3
*.db
db.sqlite3
db.sqlite3-journal
*.sql

# ============================================================================
# Build and Distribution Tools
# ============================================================================

node_modules/
package-lock.json
yarn.lock
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# ============================================================================
# Profiling and Performance Analysis
# ============================================================================

*.hprof
*.dump
*.npy
*.npz

# ============================================================================
# Documentation Build Outputs
# ============================================================================

docs/cheatsheets/*.pdf

# ============================================================================
# Benchmark Results
# ============================================================================

benchmarks/accuracy/*.json
benchmarks/efficiency/*.json
benchmarks/robustness/*.json
benchmarks/overfitting/*.json

# ============================================================================
# Deployment Artifacts
# ============================================================================

deployment/local/data/
deployment/local/logs/
deployment/docker/data/

# ============================================================================
# Plugin System
# ============================================================================

plugins/cache/

# ============================================================================
# Tool Outputs
# ============================================================================

tools/outputs/
tools/debugging/outputs/

# ============================================================================
# Experiment Management
# ============================================================================

experiments/results/
experiments/outputs/
experiments/hyperparameter_search/outputs/

# ============================================================================
# Migration Data
# ============================================================================

migrations/data/cache/

# ============================================================================
# Test Data
# ============================================================================

data/test_access_log.json

# ============================================================================
# IDE Sync Cache
# ============================================================================

.ide/sync/
tools/ide_tools/cache/

# ============================================================================
# Application Runtime
# ============================================================================

app/.streamlit/
app/assets/runtime/

# ============================================================================
# Make and Build Caches
# ============================================================================

.make.cache
.build_cache

# ============================================================================
# Lock Files (Conditional)
# ============================================================================
# Uncomment to ignore lock files (not recommended for reproducibility)
# requirements/lock/*.lock
# poetry.lock

# ============================================================================
# Whitelist Exceptions
# ============================================================================
# Files that match ignore patterns but should be tracked.

!.gitkeep
!.gitattributes
!.github/
!.gitignore
!.pre-commit-config.yaml
!.editorconfig
!.flake8
!.dockerignore

!data/test_samples/
!data/metadata/
!data/raw/.gitkeep
!data/raw/ag_news/README.md
!data/processed/.gitkeep
!data/processed/.test_set_hash
!data/augmented/.gitkeep
!data/external/.gitkeep
!data/cache/.gitkeep
!data/pseudo_labeled/.gitkeep
!data/selected_subsets/.gitkeep
!data/platform_cache/.gitkeep
!data/quota_tracking/.gitkeep

!outputs/.gitkeep
!outputs/**/.gitkeep

!experiments/results/.gitkeep

!requirements/lock/*.lock
!requirements/lock/README.md

!configs/templates/
!configs/secrets/secrets.template.yaml

!docs/_static/custom.css

!.ide/
!.ide/**/*

!.devcontainer/
!.devcontainer/**/*

!.husky/
!.husky/**/*

!notebooks/**/*.ipynb

!benchmarks/**/*.yaml
!benchmarks/**/README.md

# ============================================================================
# Project-Specific Patterns
# ============================================================================
# Additional patterns specific to AG News Text Classification project.

outputs/models/lora_adapters/**/*.pt
outputs/models/qlora_adapters/**/*.pt

data/augmented/llm_generated/llama2/
data/augmented/llm_generated/mistral/
data/augmented/llm_generated/mixtral/

data/external/distillation_data/llama_outputs/
data/external/distillation_data/mistral_outputs/
data/external/distillation_data/teacher_ensemble_outputs/

data/metadata/model_predictions/xlarge_predictions.json
data/metadata/model_predictions/llm_predictions.json
data/metadata/model_predictions/ensemble_predictions.json

monitoring/dashboards/tensorboard/runs/
monitoring/dashboards/mlflow/mlruns/
monitoring/dashboards/wandb/wandb/

# ============================================================================
# Notes
# ============================================================================
#
# Maintenance Guidelines:
#   - Review patterns quarterly as project evolves
#   - Add new patterns for new directories or file types
#   - Document rationale for non-obvious patterns
#   - Test patterns with: git check-ignore -v <file>
#
# For Large Files:
#   - Use Git LFS for model weights > 100MB
#   - Use DVC for datasets > 1GB
#   - Use external storage (S3, GCS) for very large artifacts
#
# For Sensitive Data:
#   - Never commit API keys, tokens, or credentials
#   - Use environment variables or secret management tools
#   - Rotate any accidentally committed secrets immediately
#
# For Reproducibility:
#   - Keep lock files (requirements/lock/*.lock) in version control
#   - Document data download and processing steps
#   - Use consistent random seeds in code
#   - Version control configuration files
#
# Verification:
#   - Before committing: git status
#   - Check ignored files: git status --ignored
#   - Verify pattern: git check-ignore -v <filename>
#   - List all tracked files: git ls-tree -r HEAD --name-only
#
# ============================================================================
